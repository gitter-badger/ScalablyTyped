package typings
package webpackLib.webpackMod.webpackNs.compilationNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

trait CompilationHooks extends js.Object {
  var additionalAssets: tapableLib.tapableMod.AsyncSeriesHook[_, _, _]
  var additionalChunkAssets: tapableLib.tapableMod.SyncHook[js.Array[Chunk], _, _]
  var advancedOptimizeModuleOrder: tapableLib.tapableMod.SyncHook[js.Array[Module], _, _]
  var afterHash: tapableLib.tapableMod.SyncHook[_, _, _]
  var afterOptimizeAssets: tapableLib.tapableMod.SyncHook[js.Array[Asset], _, _]
  var afterOptimizeChunkAssets: tapableLib.tapableMod.SyncHook[js.Array[Chunk], _, _]
  var afterOptimizeChunkIds: tapableLib.tapableMod.SyncHook[js.Array[Chunk], _, _]
  var afterOptimizeChunkModules: tapableLib.tapableMod.SyncHook[js.Array[Chunk], js.Array[Module], _]
  var afterOptimizeChunks: tapableLib.tapableMod.SyncHook[js.Array[Chunk], js.Array[ChunkGroup], _]
  var afterOptimizeDependencies: tapableLib.tapableMod.SyncHook[js.Array[Module], _, _]
  var afterOptimizeExtractedChunks: tapableLib.tapableMod.SyncHook[js.Array[Chunk], _, _]
  var afterOptimizeModuleIds: tapableLib.tapableMod.SyncHook[js.Array[Module], _, _]
  var afterOptimizeModules: tapableLib.tapableMod.SyncHook[js.Array[Module], _, _]
  var afterOptimizeTree: tapableLib.tapableMod.SyncHook[js.Array[Chunk], js.Array[Module], _]
  var afterSeal: tapableLib.tapableMod.AsyncSeriesHook[_, _, _]
  var assetPath: tapableLib.tapableMod.SyncWaterfallHook[java.lang.String, _, _]
  var beforeChunkAssets: tapableLib.tapableMod.SyncHook[_, _, _]
  var beforeChunkIds: tapableLib.tapableMod.SyncHook[js.Array[Chunk], _, _]
  var beforeHash: tapableLib.tapableMod.SyncHook[_, _, _]
  var beforeModuleAssets: tapableLib.tapableMod.SyncHook[_, _, _]
  var beforeModuleIds: tapableLib.tapableMod.SyncHook[js.Array[Module], _, _]
  var buildModule: tapableLib.tapableMod.SyncHook[Module, _, _]
  var childCompiler: tapableLib.tapableMod.SyncHook[_, _, _]
  var chunkAsset: tapableLib.tapableMod.SyncHook[Chunk, java.lang.String, _]
  var chunkHash: tapableLib.tapableMod.SyncHook[Chunk, ChunkHash, _]
  var failedModule: tapableLib.tapableMod.SyncHook[Module, nodeLib.Error with stdLib.Error, _]
  var finishModules: tapableLib.tapableMod.SyncHook[js.Array[Module], _, _]
  var finishRebuildingModule: tapableLib.tapableMod.SyncHook[Module, _, _]
  var moduleAsset: tapableLib.tapableMod.SyncHook[Module, java.lang.String, _]
  var moduleIds: tapableLib.tapableMod.SyncHook[js.Array[Module], _, _]
  var needAdditionalPass: tapableLib.tapableMod.SyncBailHook[_, _, _, _]
  var needAdditionalSeal: tapableLib.tapableMod.SyncBailHook[_, _, _, _]
  var normalModuleLoader: tapableLib.tapableMod.SyncHook[_, Module, _]
  var optimize: tapableLib.tapableMod.SyncHook[_, _, _]
  var optimizeAssets: tapableLib.tapableMod.AsyncSeriesHook[js.Array[Asset], _, _]
  var optimizeChunkAssets: tapableLib.tapableMod.AsyncSeriesHook[js.Array[Chunk], _, _]
  var optimizeChunkIds: tapableLib.tapableMod.SyncHook[js.Array[Chunk], _, _]
  var optimizeChunkModules: tapableLib.tapableMod.SyncBailHook[js.Array[Chunk], js.Array[Module], _, _]
  var optimizeChunkModulesAdvanced: tapableLib.tapableMod.SyncBailHook[js.Array[Chunk], js.Array[Module], _, _]
  var optimizeChunkModulesBasic: tapableLib.tapableMod.SyncBailHook[js.Array[Chunk], js.Array[Module], _, _]
  var optimizeChunkOrder: tapableLib.tapableMod.SyncHook[js.Array[Chunk], _, _]
  var optimizeChunks: tapableLib.tapableMod.SyncBailHook[js.Array[Chunk], js.Array[ChunkGroup], _, _]
  var optimizeChunksAdvanced: tapableLib.tapableMod.SyncBailHook[js.Array[Chunk], js.Array[ChunkGroup], _, _]
  var optimizeChunksBasic: tapableLib.tapableMod.SyncBailHook[js.Array[Chunk], js.Array[ChunkGroup], _, _]
  var optimizeDependencies: tapableLib.tapableMod.SyncBailHook[js.Array[Module], _, _, _]
  var optimizeDependenciesAdvanced: tapableLib.tapableMod.SyncBailHook[js.Array[Module], _, _, _]
  var optimizeDependenciesBasic: tapableLib.tapableMod.SyncBailHook[js.Array[Module], _, _, _]
  var optimizeExtractedChunks: tapableLib.tapableMod.SyncBailHook[js.Array[Chunk], _, _, _]
  var optimizeExtractedChunksAdvanced: tapableLib.tapableMod.SyncBailHook[js.Array[Chunk], _, _, _]
  var optimizeExtractedChunksBasic: tapableLib.tapableMod.SyncBailHook[js.Array[Chunk], _, _, _]
  var optimizeModuleIds: tapableLib.tapableMod.SyncHook[js.Array[Module], _, _]
  var optimizeModuleOrder: tapableLib.tapableMod.SyncHook[js.Array[Module], _, _]
  var optimizeModules: tapableLib.tapableMod.SyncBailHook[js.Array[Module], _, _, _]
  var optimizeModulesAdvanced: tapableLib.tapableMod.SyncBailHook[js.Array[Module], _, _, _]
  var optimizeModulesBasic: tapableLib.tapableMod.SyncBailHook[js.Array[Module], _, _, _]
  var optimizeTree: tapableLib.tapableMod.AsyncSeriesHook[js.Array[Chunk], js.Array[Module], _]
  var rebuildModule: tapableLib.tapableMod.SyncHook[Module, _, _]
  var record: tapableLib.tapableMod.SyncHook[Compilation, js.Array[Record], _]
  var recordChunks: tapableLib.tapableMod.SyncHook[js.Array[Chunk], js.Array[Record], _]
  var recordHash: tapableLib.tapableMod.SyncHook[js.Array[Record], _, _]
  var recordModules: tapableLib.tapableMod.SyncHook[js.Array[Module], js.Array[Record], _]
  var records: tapableLib.tapableMod.SyncHook[Compilation, js.Array[Record], _]
  var reviveChunks: tapableLib.tapableMod.SyncHook[js.Array[Chunk], js.Array[Record], _]
  var reviveModules: tapableLib.tapableMod.SyncHook[js.Array[Module], js.Array[Record], _]
  var seal: tapableLib.tapableMod.SyncHook[_, _, _]
  var shouldGenerateChunkAssets: tapableLib.tapableMod.SyncBailHook[_, _, _, _]
  var shouldRecord: tapableLib.tapableMod.SyncBailHook[_, _, _, _]
  var succeedModule: tapableLib.tapableMod.SyncHook[Module, _, _]
  var unseal: tapableLib.tapableMod.SyncHook[_, _, _]
}

