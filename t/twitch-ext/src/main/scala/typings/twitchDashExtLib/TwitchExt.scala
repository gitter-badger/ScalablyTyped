package typings
package twitchDashExtLib

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * The Twitch extensions JavaScript Helper.
  *
  * @see https://dev.twitch.tv/docs/extensions/reference/#javascript-helper
  */
@js.native
trait TwitchExt extends js.Object {
  /**
  	 * @see https://dev.twitch.tv/docs/extensions/reference/#twitch-extension-actions
  	 */
  var actions: TwitchExtActions = js.native
  /**
  	 * @see https://dev.twitch.tv/docs/extensions/bits/#javascript-helper
  	 */
  var bits: TwitchExtBits = js.native
  /**
  	 * This encodes the environment. For external users, this is always production.
  	 */
  var environment: twitchDashExtLib.twitchDashExtLibStrings.production = js.native
  /**
  	 * @see https://dev.twitch.tv/docs/extensions/reference/#twitch-extension-feature-flags
  	 */
  var features: TwitchExtFeatures = js.native
  /**
  	 * Helper methods for the Twitch Extension rig.
  	 * @see https://github.com/twitchdev/developer-rig
  	 */
  var rig: TwitchExtRig = js.native
  /**
  	 * This encodes the Helper version in 1.1.1 (semantic versioning) format.
  	 */
  var version: java.lang.String = js.native
  /**
  	 * This function binds the callback to listen to the target topic.
  	 *
  	 * @param target Target topic. Often this is "broadcast" but it might be "whisper-<userId>".
  	 * @param callback These fields correspond to the values in the send() message, except the message is always a string.
  	 * @see https://dev.twitch.tv/docs/extensions/reference/#listen
  	 */
  def listen(
    target: java.lang.String,
    callback: js.Function3[
      /* target */ java.lang.String, 
      /* contentType */ java.lang.String, 
      /* message */ java.lang.String, 
      scala.Unit
    ]
  ): scala.Unit = js.native
  /**
  	 * This function binds the callback to the initial values and changes to the authorization data.
  	 *
  	 * @param authCallback This callback is fired each time the JWT is refreshed.
  	 * @see https://dev.twitch.tv/docs/extensions/reference/#onauthorized
  	 */
  def onAuthorized(authCallback: js.Function1[/* auth */ TwitchExtAuthorized, scala.Unit]): scala.Unit = js.native
  /**
  	 * This function binds the callback to the initial values and changes to the context.
  	 *
  	 * @param contextCallback This callback is fired when the context of an extension is fired.
  	 * @see https://dev.twitch.tv/docs/extensions/reference/#oncontext
  	 */
  def onContext(
    contextCallback: js.Function2[
      /* context */ stdLib.Partial[TwitchExtContext], 
      /* changed */ js.Array[java.lang.String], 
      scala.Unit
    ]
  ): scala.Unit = js.native
  /**
  	 * This function binds the callback to any internal error.
  	 *
  	 * @param errorCallback This callback is fired if any errors are generated by the extension helper.
  	 * @see https://dev.twitch.tv/docs/extensions/reference/#onerror
  	 */
  def onError(errorCallback: js.Function1[/* errorValue */ js.Any, scala.Unit]): scala.Unit = js.native
  /**
  	 * This function registers a callback that gets called whenever an extension changes position in the player. This
  	 * occurs only for video-component extensions. This also is triggered as the extension loads.
  	 *
  	 * @param callback This callback is called whenever an extension changes position in the player.
  	 * @see https://dev.twitch.tv/docs/extensions/reference/#onpositionchanged
  	 */
  def onPositionChanged(callback: js.Function1[/* position */ Anon_X, scala.Unit]): scala.Unit = js.native
  /**
  	 * This function registers a callback that gets called whenever an extension is hidden/re-shown. (This occurs only
  	 * for mobile or component extensions.) When an extension is not visible in the mobile app, it does not receive
  	 * onContext updates and must perform only minimal work in the background.
  	 *
  	 * @param callback This callback is called whenever an extension is hidden/re-shown.
  	 * @see https://dev.twitch.tv/docs/extensions/reference/#onvisibilitychanged
  	 */
  def onVisibilityChanged(callback: js.Function1[twitchDashExtLib.twitchDashExtLibNumbers.`false`, scala.Unit]): scala.Unit = js.native
  def onVisibilityChanged(
    callback: js.Function2[
      twitchDashExtLib.twitchDashExtLibNumbers.`true`, 
      /* context */ stdLib.Partial[TwitchExtContext], 
      scala.Unit
    ]
  ): scala.Unit = js.native
  def send(target: java.lang.String, contentType: java.lang.String, message: java.lang.String): scala.Unit = js.native
  /**
  	 * This function can be called by the front end to send directly to PubSub.
  	 *
  	 * @param target Target topic. Often this is "broadcast" but it might be "whisper-<userId>".
  	 * @param contentType type of the serialized message; for example, "application/json".
  	 * @param message Either an object that will be automatically serialized as JSON or a string.
  	 * @see https://dev.twitch.tv/docs/extensions/reference/#send
  	 */
  def send(target: java.lang.String, contentType: java.lang.String, message: js.Object): scala.Unit = js.native
  /**
  	 * This function unbinds the listen callback from the target.
  	 *
  	 * @param target Target topic. Often this is "broadcast" but it might be "whisper-<userId>".
  	 * @param callback These fields correspond to the values in the send() message, except the message is always a string.
  	 * @see https://dev.twitch.tv/docs/extensions/reference/#unlisten
  	 */
  def unlisten(
    target: java.lang.String,
    callback: js.Function3[
      /* target */ java.lang.String, 
      /* contentType */ java.lang.String, 
      /* message */ java.lang.String, 
      scala.Unit
    ]
  ): scala.Unit = js.native
}

