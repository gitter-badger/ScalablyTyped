package typings
package cypressLib.CypressNs

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * Chainable interface for non-array Subjects
  */
@js.native
trait Chainable[Subject] extends js.Object {
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  var and_Original: Chainer[Subject] = js.native
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  var off_Original: Actions = js.native
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  var on_Original: Actions = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  var should_Original: Chainer[Subject] = js.native
  // fallback
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    * Ctrl+Space will invoke auto-complete in most editors.
    * @see https://on.cypress.io/should
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  def and(chainers: java.lang.String): Chainable[Subject] = js.native
  def and(chainers: java.lang.String, value: js.Any): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  def and(chainers: java.lang.String, value: js.Any, `match`: js.Any): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    * Passing a function to `.should()` enables you to make multiple assertions on the yielded subject. This also gives you the opportunity to massage what you’d like to assert on.
    * Just be sure _not_ to include any code that has side effects in your callback function. The callback function will be retried over and over again until no assertions within it throw.
    * @example
    *    cy
    *      .get('p')
    *      .should(($p) => {
    *        // should have found 3 elements
    *        expect($p).to.have.length(3)
    *
    *        // make sure the first contains some text content
    *        expect($p.first()).to.contain('Hello World')
    *
    *        // use jquery's map to grab all of their classes
    *        // jquery's map returns a new jquery object
    *        const classes = $p.map((i, el) => {
    *          return Cypress.$(el).attr('class')
    *        })
    *
    *        // call classes.get() to make this a plain array
    *        expect(classes.get()).to.deep.eq([
    *          'text-primary',
    *          'text-danger',
    *          'text-default'
    *        ])
    *      })
    * @see https://on.cypress.io/should
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  def and(fn: js.Function1[/* currentSubject */ Subject, scala.Unit]): Chainable[Subject] = js.native
  /**
    * Assert spy always returned the provided value.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_alwaysreturned(chainer: cypressLib.cypressLibStrings.alwaysDOTreturned, value: js.Any): Chainable[Subject] = js.native
  // chai
  /**
    * Asserts that the target’s `type` is equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap('foo').should('be.a', 'string')
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bea(chainer: cypressLib.cypressLibStrings.beDOTa, `type`: java.lang.String): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.above', 5)
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beabove(chainer: cypressLib.cypressLibStrings.beDOTabove, value: scala.Double): Chainable[Subject] = js.native
  @JSName("and")
  def and_beabove(chainer: cypressLib.cypressLibStrings.beDOTabove, value: stdLib.Date): Chainable[Subject] = js.native
  /**
    * Assert if spy was always called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bealwayscalledWithMatch(chainer: cypressLib.cypressLibStrings.beDOTalwaysDOTcalledWithMatch, args: js.Any*): Chainable[Subject] = js.native
  // sinon-chai
  /**
    * Assert spy/stub was called the `new` operator.
    * Beware that this is inferred based on the value of the this object and the spy function’s prototype, so it may give false positives if you actively return the right kind of object.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithnew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bealwayscalledWithNew(chainer: cypressLib.cypressLibStrings.beDOTalwaysDOTcalledWithNew): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `type` is equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap({ foo: 'bar' }).should('be.an', 'object')
    * @alias a
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bean(chainer: cypressLib.cypressLibStrings.beDOTan, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number that’s within a given +/- `delta` range of the given number `expected`. However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('be.approximately', 5, 0.5)
    * @alias closeTo
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beapproximately(chainer: cypressLib.cypressLibStrings.beDOTapproximately, value: scala.Double, delta: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is an `arguments` object.
    * @example
    *    cy.wrap(arguments).should('be.arguments')
    * @see http://chaijs.com/api/bdd/#method_arguments
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bearguments(chainer: cypressLib.cypressLibStrings.beDOTarguments): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date greater than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.at.least', 5)
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beatleast(chainer: cypressLib.cypressLibStrings.beDOTatDOTleast, value: scala.Double): Chainable[Subject] = js.native
  @JSName("and")
  def and_beatleast(chainer: cypressLib.cypressLibStrings.beDOTatDOTleast, value: stdLib.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.below', 5)
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bebelow(chainer: cypressLib.cypressLibStrings.beDOTbelow, value: scala.Double): Chainable[Subject] = js.native
  /**
    * `true` if the spy was called at least once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_becalled(chainer: cypressLib.cypressLibStrings.beDOTcalled): Chainable[Subject] = js.native
  /**
    * Assert spy was called after `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledafteranotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_becalledAfter(chainer: cypressLib.cypressLibStrings.beDOTcalledAfter, spy: sinonLib.sinonMod.SinonNs.SinonSpy): Chainable[Subject] = js.native
  /**
    * Assert spy was called before `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledbeforeanotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_becalledBefore(chainer: cypressLib.cypressLibStrings.beDOTcalledBefore, spy: sinonLib.sinonMod.SinonNs.SinonSpy): Chainable[Subject] = js.native
  /**
    * Assert spy was called at least once with `obj` as `this`. `calledOn` also accepts a matcher (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers)).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_becalledOn(chainer: cypressLib.cypressLibStrings.beDOTcalledOn, context: js.Any): Chainable[Subject] = js.native
  /**
    * Assert spy was called exactly once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonce
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_becalledOnce(chainer: cypressLib.cypressLibStrings.beDOTcalledOnce): Chainable[Subject] = js.native
  /**
    * Assert spy was called exactly three times
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledthrice
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_becalledThrice(chainer: cypressLib.cypressLibStrings.beDOTcalledThrice): Chainable[Subject] = js.native
  /**
    * Assert spy was called exactly twice
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledtwice
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_becalledTwice(chainer: cypressLib.cypressLibStrings.beDOTcalledTwice): Chainable[Subject] = js.native
  /**
    * Assert spy was called at least once with the provided arguments and no others.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithexactlyarg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_becalledWithExactly(chainer: cypressLib.cypressLibStrings.beDOTcalledWithExactly, args: js.Any*): Chainable[Subject] = js.native
  /**
    * Assert spy was called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_becalledWithMatch(chainer: cypressLib.cypressLibStrings.beDOTcalledWithMatch, args: js.Any*): Chainable[Subject] = js.native
  /**
    * Assert spy/stub was called the `new` operator.
    * Beware that this is inferred based on the value of the this object and the spy function’s prototype, so it may give false positives if you actively return the right kind of object.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithnew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_becalledWithNew(chainer: cypressLib.cypressLibStrings.beDOTcalledWithNew): Chainable[Subject] = js.native
  // jquery-chai
  /**
    * Assert that at least one element of the selection is checked, using `.is(':checked')`.
    * @example
    *    cy.get('#result').should('be.checked')
    * @see http://chaijs.com/plugins/chai-jquery/#checked
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bechecked(chainer: cypressLib.cypressLibStrings.beDOTchecked): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number that’s within a given +/- `delta` range of the given number `expected`. However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('be.closeTo', 5, 0.5)
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_becloseTo(chainer: cypressLib.cypressLibStrings.beDOTcloseTo, value: scala.Double, delta: scala.Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is disabled, using `.is(':disabled')`.
    * @example
    *    cy.get('#result').should('be.disabled')
    * @see http://chaijs.com/plugins/chai-jquery/#disabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bedisabled(chainer: cypressLib.cypressLibStrings.beDOTdisabled): Chainable[Subject] = js.native
  /**
    * When the target is a string or array, .empty asserts that the target’s length property is strictly (===) equal to 0
    * @example
    *    cy.wrap([]).should('be.empty')
    *    cy.wrap('').should('be.empty')
    * @see http://chaijs.com/api/bdd/#method_empty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beempty(chainer: cypressLib.cypressLibStrings.beDOTempty): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is enabled, using `.is(':enabled')`.
    * @example
    *    cy.get('#result').should('be.enabled')
    * @see http://chaijs.com/plugins/chai-jquery/#enabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beenabled(chainer: cypressLib.cypressLibStrings.beDOTenabled): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to `false`.
    * @example
    *    cy.wrap(false).should('be.false')
    * @see http://chaijs.com/api/bdd/#method_false
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_befalse(chainer: cypressLib.cypressLibStrings.beDOTfalse): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.greaterThan', 5)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_begreaterThan(chainer: cypressLib.cypressLibStrings.beDOTgreaterThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.gt', 5)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_begt(chainer: cypressLib.cypressLibStrings.beDOTgt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date greater than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.gte', 5)
    * @alias least
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_begte(chainer: cypressLib.cypressLibStrings.beDOTgte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is hidden, using `.is(':hidden')`.
    * @example
    *    cy.get('#result').should('be.hidden')
    * @see http://chaijs.com/plugins/chai-jquery/#hidden
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_behidden(chainer: cypressLib.cypressLibStrings.beDOThidden): Chainable[Subject] = js.native
  /**
    * Asserts that the target is an instance of the given `constructor`.
    * @example
    *    cy.wrap([1, 2]).should('be.instanceOf', Array)
    * @see http://chaijs.com/api/bdd/#method_instanceof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beinstanceOf(chainer: cypressLib.cypressLibStrings.beDOTinstanceOf, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.lessThan', 5)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_belessThan(chainer: cypressLib.cypressLibStrings.beDOTlessThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.lt', 5)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_belt(chainer: cypressLib.cypressLibStrings.beDOTlt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.lte', 5)
    * @alias most
    * @see http://chaijs.com/api/bdd/#method_most
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_belte(chainer: cypressLib.cypressLibStrings.beDOTlte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is loosely (`==`) equal to `true`. However, it’s often best to assert that the target is strictly (`===`) or deeply equal to its expected value.
    * @example
    *    cy.wrap(1).should('be.ok')
    * @see http://chaijs.com/api/bdd/#method_ok
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beok(chainer: cypressLib.cypressLibStrings.beDOTok): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is selected, using `.is(':selected')`.
    * @example
    *    cy.get('#result').should('be.selected')
    * @see http://chaijs.com/plugins/chai-jquery/#selected
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beselected(chainer: cypressLib.cypressLibStrings.beDOTselected): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to true.
    * @example
    *    cy.wrap(true).should('be.true')
    * @see http://chaijs.com/api/bdd/#method_true
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_betrue(chainer: cypressLib.cypressLibStrings.beDOTtrue): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to undefined.
    * @example
    *    cy.wrap(undefined).should('be.undefined')
    * @see http://chaijs.com/api/bdd/#method_undefined
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_beundefined(chainer: cypressLib.cypressLibStrings.beDOTundefined): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is visible, using `.is(':visible')`.
    * @example
    *    cy.get('#result').should('be.visible')
    * @see http://chaijs.com/plugins/chai-jquery/#visible
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bevisible(chainer: cypressLib.cypressLibStrings.beDOTvisible): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than or equal to the given number or date `start`, and less than or equal to the given number or date `finish` respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.within', 5, 10)
    * @see http://chaijs.com/api/bdd/#method_within
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bewithin(chainer: cypressLib.cypressLibStrings.beDOTwithin, start: scala.Double, end: scala.Double): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_bewithin(chainer: cypressLib.cypressLibStrings.beDOTwithin, start: stdLib.Date, end: stdLib.Date): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.change` asserts that the given function `subject` returns a different value when it’s invoked before the target function compared to when it’s invoked afterward.
    * However, it’s often best to assert that `subject` is equal to its expected value.
    * @example
    *    let dots = ''
    *    function addDot() { dots += '.' }
    *    function getDots() { return dots }
    *    cy.wrap(addDot).should('change', getDots)
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_change(chainer: cypressLib.cypressLibStrings.change, fn: js.Function1[/* repeated */ js.Any, _]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.change` asserts that the value of the given object `subject`'s `prop` property is different before invoking the target function compared to afterward.
    * @example
    *    const myObj = { dots: '' }
    *    function addDot() { myObj.dots += '.' }
    *    cy.wrap(addDot).should('change', myObj, 'dots')
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_change(chainer: cypressLib.cypressLibStrings.change, obj: js.Object, prop: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the selection contains the given text, using `:contains()`. If the object asserted against is not a jQuery object, or if `contain` is not called as a function, the original implementation will be called.
    * @example
    *    cy.get('#result').should('contain', 'text')
    * @see http://chaijs.com/plugins/chai-jquery/#containtext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_contain(chainer: cypressLib.cypressLibStrings.contain, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string val is a substring of the target.
    * @example
    *    cy.wrap('tester').should('contain', 'test')
    * @alias include
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_contain(chainer: cypressLib.cypressLibStrings.contain, value: js.Any): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.decrease` asserts that the given function `subject` returns a lesser number when it’s invoked after invoking the target function compared to when it’s invoked beforehand.
    * `.decrease` also causes all `.by` assertions that follow in the chain to assert how much lesser of a number is returned. It’s often best to assert that the return value decreased by the expected amount, rather than asserting it decreased by any amount.
    * @example
    *    let val = 1
    *    function subtractTwo() { val -= 2 }
    *    function getVal() { return val }
    *    cy.wrap(subtractTwo).should('decrease', getVal)
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_decrease(chainer: cypressLib.cypressLibStrings.decrease, fn: js.Function1[/* repeated */ js.Any, _]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.decrease` asserts that the value of the given object `subject`'s `prop` property is lesser after invoking the target function compared to beforehand.
    * @example
    *    let val = 1
    *    function subtractTwo() { val -= 2 }
    *    function getVal() { return val }
    *    cy.wrap(subtractTwo).should('decrease', getVal)
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_decrease(chainer: cypressLib.cypressLibStrings.decrease, obj: js.Object, prop: java.lang.String): Chainable[Subject] = js.native
  /**
    * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property` assertions that follow in the chain to use deep equality instead of strict (`===`) equality. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ a: 1 }).should('deep.equal', { a: 1 })
    * @see http://chaijs.com/api/bdd/#method_deep
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_deepequal(chainer: cypressLib.cypressLibStrings.deepDOTequal, value: Subject): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('eq', 1)
    * @alias equal
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_eq(chainer: cypressLib.cypressLibStrings.eq, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is deeply equal to the given `obj`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({a: 1}).should('eql', {a: 1}).and('not.equal', {a: 1})
    * @see http://chaijs.com/api/bdd/#method_eql
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_eql(chainer: cypressLib.cypressLibStrings.eql, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('equal', 1)
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_equal(chainer: cypressLib.cypressLibStrings.equal, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to either `null` or `undefined`. However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(1).should('exist')
    * @see http://chaijs.com/api/bdd/#method_exist
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_exist(chainer: cypressLib.cypressLibStrings.exist): Chainable[Subject] = js.native
  /**
    * Causes all `.keys` assertions that follow in the chain to require that the target have all of the given keys. This is the opposite of `.any`, which only requires that the target have at least one of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('have.all.keys', 'a', 'b')
    * @see http://chaijs.com/api/bdd/#method_all
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveallkeys(chainer: cypressLib.cypressLibStrings.haveDOTallDOTkeys, value: java.lang.String*): Chainable[Subject] = js.native
  /**
    * Assert spy always threw an exception.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysthrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havealwaysthrown(chainer: cypressLib.cypressLibStrings.haveDOTalwaysDOTthrown): Chainable[Subject] = js.native
  @JSName("and")
  def and_havealwaysthrown(
    chainer: cypressLib.cypressLibStrings.haveDOTalwaysDOTthrown,
    value: nodeLib.Error with stdLib.Error
  ): Chainable[Subject] = js.native
  @JSName("and")
  def and_havealwaysthrown(chainer: cypressLib.cypressLibStrings.haveDOTalwaysDOTthrown, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_havealwaysthrown(chainer: cypressLib.cypressLibStrings.haveDOTalwaysDOTthrown, value: stdLib.ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Causes all `.keys` assertions that follow in the chain to only require that the target have at least one of the given keys. This is the opposite of `.all`, which requires that the target have all of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('have.any.keys', 'a')
    * @see http://chaijs.com/api/bdd/#method_any
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveanykeys(chainer: cypressLib.cypressLibStrings.haveDOTanyDOTkeys, value: java.lang.String*): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.attr', 'role')
    *    cy.get('#result').should('have.attr', 'role', 'menu')
    * @see http://chaijs.com/plugins/chai-jquery/#attrname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveattr(chainer: cypressLib.cypressLibStrings.haveDOTattr, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_haveattr(
    chainer: cypressLib.cypressLibStrings.haveDOTattr,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Assert the number of calls.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycallcount
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havecallCount(chainer: cypressLib.cypressLibStrings.haveDOTcallCount, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.class', 'success')
    * @see http://chaijs.com/plugins/chai-jquery/#classclassname
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveclass(chainer: cypressLib.cypressLibStrings.haveDOTclass, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given CSS property, using `.css()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.css', 'display', 'none')
    * @see http://chaijs.com/plugins/chai-jquery/#cssname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havecss(chainer: cypressLib.cypressLibStrings.haveDOTcss, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_havecss(
    chainer: cypressLib.cypressLibStrings.haveDOTcss,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given data value, using `.data()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.data', 'foo', 'bar')
    * @see http://chaijs.com/plugins/chai-jquery/#dataname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havedata(chainer: cypressLib.cypressLibStrings.haveDOTdata, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_havedata(
    chainer: cypressLib.cypressLibStrings.haveDOTdata,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target has a property with the given key `name`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ x: {a: 1 }}).should('have.deep.property', 'x', { a: 1 })
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havedeepproperty(
    chainer: cypressLib.cypressLibStrings.haveDOTdeepDOTproperty,
    value: java.lang.String,
    obj: js.Object
  ): Chainable[Subject] = js.native
  /**
    * Assert that the selection contains at least one element which has a descendant matching the given selector, using `.has()`.
    * @example
    *    cy.get('#result').should('have.descendants', 'h1')
    * @see http://chaijs.com/plugins/chai-jquery/#descendantsselector
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havedescendants(chainer: cypressLib.cypressLibStrings.haveDOTdescendants, selector: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection is equal to the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('have.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havehtml(chainer: cypressLib.cypressLibStrings.haveDOThtml, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given id, using `.attr('id')`.
    * @example
    *    cy.get('#result').should('have.id', 'result')
    * @see http://chaijs.com/plugins/chai-jquery/#idid
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveid(chainer: cypressLib.cypressLibStrings.haveDOTid, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_haveid(
    chainer: cypressLib.cypressLibStrings.haveDOTid,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length', 3)
    *    cy.wrap('foo').should('have.length', 3)
    * @alias lengthOf
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havelength(chainer: cypressLib.cypressLibStrings.haveDOTlength, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.greaterThan', 2)
    *    cy.wrap('foo').should('have.length.greaterThan', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havelengthgreaterThan(chainer: cypressLib.cypressLibStrings.haveDOTlengthDOTgreaterThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.gt', 2)
    *    cy.wrap('foo').should('have.length.gt', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havelengthgt(chainer: cypressLib.cypressLibStrings.haveDOTlengthDOTgt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is greater than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.gte', 2)
    *    cy.wrap('foo').should('have.length.gte', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havelengthgte(chainer: cypressLib.cypressLibStrings.haveDOTlengthDOTgte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lessThan', 4)
    *    cy.wrap('foo').should('have.length.lessThan', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havelengthlessThan(chainer: cypressLib.cypressLibStrings.haveDOTlengthDOTlessThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lt', 4)
    *    cy.wrap('foo').should('have.length.lt', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havelengthlt(chainer: cypressLib.cypressLibStrings.haveDOTlengthDOTlt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is less than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lte', 4)
    *    cy.wrap('foo').should('have.length.lte', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havelengthlte(chainer: cypressLib.cypressLibStrings.haveDOTlengthDOTlte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target array has the same members as the given array `set`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.members', [2, 1, 3])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havemembers(chainer: cypressLib.cypressLibStrings.haveDOTmembers, values: js.Array[_]): Chainable[Subject] = js.native
  /**
    * Asserts that the target array has the same members as the given array where order matters.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.ordered.members', [1, 2, 3])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveorderedmembers(chainer: cypressLib.cypressLibStrings.haveDOTorderedDOTmembers, values: js.Array[_]): Chainable[Subject] = js.native
  /**
    * Causes all `.property` and `.include` assertions that follow in the chain to ignore inherited properties.
    * @example
    *    Object.prototype.b = 2
    *    cy.wrap({ a: 1 }).should('have.property', 'a').and('not.have.ownProperty', 'b')
    * @see http://chaijs.com/api/bdd/#method_ownproperty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveownProperty(chainer: cypressLib.cypressLibStrings.haveDOTownProperty, property: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given property, using `.prop()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.prop', 'disabled')
    *    cy.get('#result').should('have.prop', 'disabled', false)
    * @see http://chaijs.com/plugins/chai-jquery/#propname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveprop(chainer: cypressLib.cypressLibStrings.haveDOTprop, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_haveprop(chainer: cypressLib.cypressLibStrings.haveDOTprop, value: java.lang.String, `match`: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target has a property with the given key `name`.
    * @example
    *    cy.wrap({ a: 1 }).should('have.property', 'a')
    *    cy.wrap({ a: 1 }).should('have.property', 'a', 1)
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_haveproperty(chainer: cypressLib.cypressLibStrings.haveDOTproperty, property: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_haveproperty(chainer: cypressLib.cypressLibStrings.haveDOTproperty, property: java.lang.String, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target string contains the given substring `str`.
    * @example
    *    cy.wrap('foobar').should('have.string', 'bar')
    * @see http://chaijs.com/api/bdd/#method_string
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havestring(chainer: cypressLib.cypressLibStrings.haveDOTstring, `match`: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_havestring(chainer: cypressLib.cypressLibStrings.haveDOTstring, `match`: stdLib.RegExp): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection is equal to the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('have.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havetext(chainer: cypressLib.cypressLibStrings.haveDOTtext, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert spy threw an exception at least once.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spythrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havethrown(chainer: cypressLib.cypressLibStrings.haveDOTthrown): Chainable[Subject] = js.native
  @JSName("and")
  def and_havethrown(chainer: cypressLib.cypressLibStrings.haveDOTthrown, value: nodeLib.Error with stdLib.Error): Chainable[Subject] = js.native
  @JSName("and")
  def and_havethrown(chainer: cypressLib.cypressLibStrings.haveDOTthrown, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_havethrown(chainer: cypressLib.cypressLibStrings.haveDOTthrown, value: stdLib.ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('have.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_havevalue(chainer: cypressLib.cypressLibStrings.haveDOTvalue, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string `val` is a substring of the target.
    * @example
    *    cy.wrap('foobar').should('include', 'foo')
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_include(chainer: cypressLib.cypressLibStrings.include, value: js.Any): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string `val` is a substring of the target.
    * @example
    *    cy.wrap([1, 2, 3]).should('include.members', [1, 2])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_includemembers(chainer: cypressLib.cypressLibStrings.includeDOTmembers, value: js.Array[_]): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.increase` asserts that the given function `subject` returns a greater number when it’s
    * invoked after invoking the target function compared to when it’s invoked beforehand.
    * `.increase` also causes all `.by` assertions that follow in the chain to assert how much greater of a number is returned.
    * It’s often best to assert that the return value increased by the expected amount, rather than asserting it increased by any amount.
    * @example
    *    let val = 1
    *    function addTwo() { val += 2 }
    *    function getVal() { return val }
    *    cy.wrap(addTwo).should('increase', getVal)
    * @see http://chaijs.com/api/bdd/#method_increase
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_increase(chainer: cypressLib.cypressLibStrings.increase, value: js.Object, property: java.lang.String): Chainable[Subject] = js.native
  /**
    * Asserts that the target matches the given regular expression `re`.
    * @example
    *    cy.wrap('foobar').should('match', /^foo/)
    * @see http://chaijs.com/api/bdd/#method_match
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_match(chainer: cypressLib.cypressLibStrings.`match`, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_match(chainer: cypressLib.cypressLibStrings.`match`, value: stdLib.RegExp): Chainable[Subject] = js.native
  /**
    * Assert spy not always returned the provided value.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notalwaysreturned(chainer: cypressLib.cypressLibStrings.notDOTalwaysDOTreturned, value: js.Any): Chainable[Subject] = js.native
  // chai.not
  /**
    * Asserts that the target’s `type` is not equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap('foo').should('not.be.a', 'number')
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbea(chainer: cypressLib.cypressLibStrings.notDOTbeDOTa, `type`: java.lang.String): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or not a date greater than the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.above', 10)
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeabove(chainer: cypressLib.cypressLibStrings.notDOTbeDOTabove, value: scala.Double): Chainable[Subject] = js.native
  @JSName("and")
  def and_notbeabove(chainer: cypressLib.cypressLibStrings.notDOTbeDOTabove, value: stdLib.Date): Chainable[Subject] = js.native
  /**
    * Assert if spy was not always called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbealwayscalledWithMatch(chainer: cypressLib.cypressLibStrings.notDOTbeDOTalwaysDOTcalledWithMatch, args: js.Any*): Chainable[Subject] = js.native
  // sinon-chai.not
  /**
    * Assert spy/stub was not called the `new` operator.
    * Beware that this is inferred based on the value of the this object and the spy function’s prototype, so it may give false positives if you actively return the right kind of object.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithnew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbealwayscalledWithNew(chainer: cypressLib.cypressLibStrings.notDOTbeDOTalwaysDOTcalledWithNew): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `type` is not equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap('foo').should('not.be.an', 'object')
    * @alias a
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbean(chainer: cypressLib.cypressLibStrings.notDOTbeDOTan, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number that’s within a given +/- `delta` range of the given number `expected`. However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('not.be.approximately', 6, 0.5)
    * @alias closeTo
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeapproximately(
    chainer: cypressLib.cypressLibStrings.notDOTbeDOTapproximately,
    value: scala.Double,
    delta: scala.Double
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not an `arguments` object.
    * @example
    *    cy.wrap(1).should('not.be.arguments')
    * @see http://chaijs.com/api/bdd/#method_arguments
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbearguments(chainer: cypressLib.cypressLibStrings.notDOTbeDOTarguments): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or not a `n` date greater than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.at.least', 10)
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeatleast(chainer: cypressLib.cypressLibStrings.notDOTbeDOTatDOTleast, value: scala.Double): Chainable[Subject] = js.native
  @JSName("and")
  def and_notbeatleast(chainer: cypressLib.cypressLibStrings.notDOTbeDOTatDOTleast, value: stdLib.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or not a `n` date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.below', 1)
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbebelow(chainer: cypressLib.cypressLibStrings.notDOTbeDOTbelow, value: scala.Double): Chainable[Subject] = js.native
  /**
    * `true` if the spy was not called at least once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbecalled(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalled): Chainable[Subject] = js.native
  /**
    * Assert spy was not.called after `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledafteranotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbecalledAfter(
    chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledAfter,
    spy: sinonLib.sinonMod.SinonNs.SinonSpy
  ): Chainable[Subject] = js.native
  /**
    * Assert spy was not called before `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledbeforeanotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbecalledBefore(
    chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledBefore,
    spy: sinonLib.sinonMod.SinonNs.SinonSpy
  ): Chainable[Subject] = js.native
  /**
    * Assert spy was not called at least once with `obj` as `this`. `calledOn` also accepts a matcher (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers)).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbecalledOn(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledOn, context: js.Any): Chainable[Subject] = js.native
  /**
    * Assert spy was not called exactly once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonce
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbecalledOnce(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledOnce): Chainable[Subject] = js.native
  /**
    * Assert spy was not called exactly three times
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledthrice
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbecalledThrice(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledThrice): Chainable[Subject] = js.native
  /**
    * Assert spy was not called exactly twice
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledtwice
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbecalledTwice(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledTwice): Chainable[Subject] = js.native
  /**
    * Assert spy was not called at least once with the provided arguments and no others.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithexactlyarg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbecalledWithExactly(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledWithExactly, args: js.Any*): Chainable[Subject] = js.native
  /**
    * Assert spy was not called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbecalledWithMatch(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledWithMatch, args: js.Any*): Chainable[Subject] = js.native
  /**
    * Assert spy/stub was not called the `new` operator.
    * Beware that this is inferred based on the value of the this object and the spy function’s prototype, so it may give false positives if you actively return the right kind of object.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithnew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbecalledWithNew(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledWithNew): Chainable[Subject] = js.native
  // jquery-chai.not
  /**
    * Assert that at least one element of the selection is not checked, using `.is(':checked')`.
    * @example
    *    cy.get('#result').should('not.be.checked')
    * @see http://chaijs.com/plugins/chai-jquery/#checked
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbechecked(chainer: cypressLib.cypressLibStrings.notDOTbeDOTchecked): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number that’s within a given +/- `delta` range of the given number `expected`. However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('not.be.closeTo', 6, 0.5)
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbecloseTo(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcloseTo, value: scala.Double, delta: scala.Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not disabled, using `.is(':disabled')`.
    * @example
    *    cy.get('#result').should('not.be.disabled')
    * @see http://chaijs.com/plugins/chai-jquery/#disabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbedisabled(chainer: cypressLib.cypressLibStrings.notDOTbeDOTdisabled): Chainable[Subject] = js.native
  /**
    * When the target is a not string or array, .empty asserts that the target’s length property is strictly (===) equal to 0
    * @example
    *    cy.wrap([1]).should('not.be.empty')
    *    cy.wrap('foo').should('not.be.empty')
    * @see http://chaijs.com/api/bdd/#method_empty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeempty(chainer: cypressLib.cypressLibStrings.notDOTbeDOTempty): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not enabled, using `.is(':enabled')`.
    * @example
    *    cy.get('#result').should('not.be.enabled')
    * @see http://chaijs.com/plugins/chai-jquery/#enabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeenabled(chainer: cypressLib.cypressLibStrings.notDOTbeDOTenabled): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to `false`.
    * @example
    *    cy.wrap(true).should('not.be.false')
    * @see http://chaijs.com/api/bdd/#method_false
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbefalse(chainer: cypressLib.cypressLibStrings.notDOTbeDOTfalse): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or a date greater than the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.greaterThan', 7)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbegreaterThan(chainer: cypressLib.cypressLibStrings.notDOTbeDOTgreaterThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or a date greater than the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.gt', 7)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbegt(chainer: cypressLib.cypressLibStrings.notDOTbeDOTgt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or a `n` date greater than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.gte', 7)
    * @alias least
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbegte(chainer: cypressLib.cypressLibStrings.notDOTbeDOTgte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not hidden, using `.is(':hidden')`.
    * @example
    *    cy.get('#result').should('not.be.hidden')
    * @see http://chaijs.com/plugins/chai-jquery/#hidden
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbehidden(chainer: cypressLib.cypressLibStrings.notDOTbeDOThidden): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not an instance of the given `constructor`.
    * @example
    *    cy.wrap([1, 2]).should('not.be.instanceOf', String)
    * @see http://chaijs.com/api/bdd/#method_instanceof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeinstanceOf(chainer: cypressLib.cypressLibStrings.notDOTbeDOTinstanceOf, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.lessThan', 3)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbelessThan(chainer: cypressLib.cypressLibStrings.notDOTbeDOTlessThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.lt', 3)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbelt(chainer: cypressLib.cypressLibStrings.notDOTbeDOTlt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.lte', 3)
    * @alias most
    * @see http://chaijs.com/api/bdd/#method_most
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbelte(chainer: cypressLib.cypressLibStrings.notDOTbeDOTlte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not loosely (`==`) equal to `true`. However, it’s often best to assert that the target is strictly (`===`) or deeply equal to its expected value.
    * @example
    *    cy.wrap(0).should('not.be.ok')
    * @see http://chaijs.com/api/bdd/#method_ok
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeok(chainer: cypressLib.cypressLibStrings.notDOTbeDOTok): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not selected, using `.is(':selected')`.
    * @example
    *    cy.get('#result').should('not.be.selected')
    * @see http://chaijs.com/plugins/chai-jquery/#selected
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeselected(chainer: cypressLib.cypressLibStrings.notDOTbeDOTselected): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to true.
    * @example
    *    cy.wrap(false).should('not.be.true')
    * @see http://chaijs.com/api/bdd/#method_true
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbetrue(chainer: cypressLib.cypressLibStrings.notDOTbeDOTtrue): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to undefined.
    * @example
    *    cy.wrap(true).should('not.be.undefined')
    * @see http://chaijs.com/api/bdd/#method_undefined
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbeundefined(chainer: cypressLib.cypressLibStrings.notDOTbeDOTundefined): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not visible, using `.is(':visible')`.
    * @example
    *    cy.get('#result').should('not.be.visible')
    * @see http://chaijs.com/plugins/chai-jquery/#visible
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbevisible(chainer: cypressLib.cypressLibStrings.notDOTbeDOTvisible): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a date greater than or equal to the given number or date `start`, and less than or equal to the given number or date `finish` respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(3).should('not.be.within', 5, 10)
    * @see http://chaijs.com/api/bdd/#method_within
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbewithin(chainer: cypressLib.cypressLibStrings.notDOTbeDOTwithin, start: scala.Double, end: scala.Double): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notbewithin(chainer: cypressLib.cypressLibStrings.notDOTbeDOTwithin, start: stdLib.Date, end: stdLib.Date): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.change` asserts that the given function `subject` returns a different value when it’s invoked before the target function compared to when it’s invoked afterward.
    * However, it’s often best to assert that `subject` is equal to its expected value.
    * @example
    *    let dots = ''
    *    function addDot() { dots += '.' }
    *    function getDots() { return dots }
    *    cy.wrap(() => {}).should('not.change', getDots)
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notchange(chainer: cypressLib.cypressLibStrings.notDOTchange, fn: js.Function1[/* repeated */ js.Any, _]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.change` asserts that the value of the given object `subject`'s `prop` property is different before invoking the target function compared to afterward.
    * @example
    *    const myObj = { dots: '' }
    *    function addDot() { myObj.dots += '.' }
    *    cy.wrap(() => {}).should('not.change', myObj, 'dots')
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notchange(chainer: cypressLib.cypressLibStrings.notDOTchange, obj: js.Object, prop: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the selection does not contain the given text, using `:contains()`. If the object asserted against is not a jQuery object, or if `contain` is not called as a function, the original implementation will be called.
    * @example
    *    cy.get('#result').should('not.contain', 'text')
    * @see http://chaijs.com/plugins/chai-jquery/#containtext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notcontain(chainer: cypressLib.cypressLibStrings.notDOTcontain, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string val is a substring of the target.
    * @example
    *    cy.wrap('tester').should('not.contain', 'foo')
    * @alias include
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notcontain(chainer: cypressLib.cypressLibStrings.notDOTcontain, value: js.Any): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.decrease` asserts that the given function `subject` does not returns a lesser number when it’s invoked after invoking the target function compared to when it’s invoked beforehand.
    * `.decrease` also causes all `.by` assertions that follow in the chain to assert how much lesser of a number is returned. It’s often best to assert that the return value decreased by the expected amount, rather than asserting it decreased by any amount.
    * @example
    *    let val = 1
    *    function subtractTwo() { val -= 2 }
    *    function getVal() { return val }
    *    cy.wrap(() => {}).should('not.decrease', getVal)
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notdecrease(chainer: cypressLib.cypressLibStrings.notDOTdecrease, fn: js.Function1[/* repeated */ js.Any, _]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.decrease` asserts that the value of the given object `subject`'s `prop` property is not lesser after invoking the target function compared to beforehand.
    * @example
    *    const myObj = { val: 1 }
    *    function subtractTwo() { myObj.val -= 2 }
    *    cy.wrap(() => {}).should('not.decrease', myObj, 'val')
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notdecrease(chainer: cypressLib.cypressLibStrings.notDOTdecrease, obj: js.Object, prop: java.lang.String): Chainable[Subject] = js.native
  /**
    * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property` assertions that follow in the chain to not use deep equality instead of strict (`===`) equality. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ a: 1 }).should('not.deep.equal', { b: 1 })
    * @see http://chaijs.com/api/bdd/#method_deep
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notdeepequal(chainer: cypressLib.cypressLibStrings.notDOTdeepDOTequal, value: Subject): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('not.eq', 2)
    * @alias equal
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_noteq(chainer: cypressLib.cypressLibStrings.notDOTeq, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not deeply equal to the given `obj`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({a: 1}).should('not.eql', {c: 1}).and('not.equal', {a: 1})
    * @see http://chaijs.com/api/bdd/#method_eql
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_noteql(chainer: cypressLib.cypressLibStrings.notDOTeql, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('not.equal', 2)
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notequal(chainer: cypressLib.cypressLibStrings.notDOTequal, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to either `null` or `undefined`. However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(null).should('not.exist')
    * @see http://chaijs.com/api/bdd/#method_exist
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notexist(chainer: cypressLib.cypressLibStrings.notDOTexist): Chainable[Subject] = js.native
  /**
    * Causes all `.keys` assertions that follow in the chain to not require that the target have all of the given keys. This is the opposite of `.any`, which only requires that the target have at least one of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('not.have.all.keys', 'c', 'd')
    * @see http://chaijs.com/api/bdd/#method_all
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveallkeys(chainer: cypressLib.cypressLibStrings.notDOThaveDOTallDOTkeys, value: java.lang.String*): Chainable[Subject] = js.native
  /**
    * Assert spy did not always throw an exception.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysthrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavealwaysthrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTalwaysDOTthrown): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavealwaysthrown(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTalwaysDOTthrown,
    value: nodeLib.Error with stdLib.Error
  ): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavealwaysthrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTalwaysDOTthrown, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavealwaysthrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTalwaysDOTthrown, value: stdLib.ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Causes all `.keys` assertions that follow in the chain to only require that the target not have at least one of the given keys. This is the opposite of `.all`, which requires that the target have all of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('not.have.any.keys', 'c')
    * @see http://chaijs.com/api/bdd/#method_any
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveanykeys(chainer: cypressLib.cypressLibStrings.notDOThaveDOTanyDOTkeys, value: java.lang.String*): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.attr', 'role')
    *    cy.get('#result').should('not.have.attr', 'role', 'menu')
    * @see http://chaijs.com/plugins/chai-jquery/#attrname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveattr(chainer: cypressLib.cypressLibStrings.notDOThaveDOTattr, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothaveattr(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTattr,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Assert not the number of calls.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycallcount
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavecallCount(chainer: cypressLib.cypressLibStrings.notDOThaveDOTcallCount, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.class', 'success')
    * @see http://chaijs.com/plugins/chai-jquery/#classclassname
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveclass(chainer: cypressLib.cypressLibStrings.notDOThaveDOTclass, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given CSS property, using `.css()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.css', 'display', 'none')
    * @see http://chaijs.com/plugins/chai-jquery/#cssname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavecss(chainer: cypressLib.cypressLibStrings.notDOThaveDOTcss, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavecss(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTcss,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given data value, using `.data()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.data', 'foo', 'bar')
    * @see http://chaijs.com/plugins/chai-jquery/#dataname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavedata(chainer: cypressLib.cypressLibStrings.notDOThaveDOTdata, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavedata(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTdata,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target does not have a property with the given key `name`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ x: {a: 1 }}).should('not.have.deep.property', 'y', { a: 1 })
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavedeepproperty(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTdeepDOTproperty,
    value: java.lang.String,
    obj: js.Object
  ): Chainable[Subject] = js.native
  /**
    * Assert that the selection does not contain at least one element which has a descendant matching the given selector, using `.has()`.
    * @example
    *    cy.get('#result').should('not.have.descendants', 'h1')
    * @see http://chaijs.com/plugins/chai-jquery/#descendantsselector
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavedescendants(chainer: cypressLib.cypressLibStrings.notDOThaveDOTdescendants, selector: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection is not equal to the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('not.have.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavehtml(chainer: cypressLib.cypressLibStrings.notDOThaveDOThtml, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given id, using `.attr('id')`.
    * @example
    *    cy.get('#result').should('not.have.id', 'result')
    * @see http://chaijs.com/plugins/chai-jquery/#idid
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveid(chainer: cypressLib.cypressLibStrings.notDOThaveDOTid, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothaveid(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTid,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is not equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length', 2)
    * cy.wrap('foo').should('not.have.length', 2)
    * @alias lengthOf
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavelength(chainer: cypressLib.cypressLibStrings.notDOThaveDOTlength, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is not greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.greaterThan', 4)
    *    cy.wrap('foo').should('not.have.length.greaterThan', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavelengthgreaterThan(chainer: cypressLib.cypressLibStrings.notDOThaveDOTlengthDOTgreaterThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is not greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.gt', 4)
    *    cy.wrap('foo').should('not.have.length.gt', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavelengthgt(chainer: cypressLib.cypressLibStrings.notDOThaveDOTlengthDOTgt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lessThan', 2)
    *    cy.wrap('foo').should('have.length.lessThan', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavelengthlessThan(chainer: cypressLib.cypressLibStrings.notDOThaveDOTlengthDOTlessThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is not less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.lt', 2)
    *    cy.wrap('foo').should('not.have.length.lt', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavelengthlt(chainer: cypressLib.cypressLibStrings.notDOThaveDOTlengthDOTlt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is not less than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.let', 2)
    *    cy.wrap('foo').should('not.have.length.lte', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavelengthlte(chainer: cypressLib.cypressLibStrings.notDOThaveDOTlengthDOTlte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target array does not have the same members as the given array `set`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.members', [4, 5, 6])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavemembers(chainer: cypressLib.cypressLibStrings.notDOThaveDOTmembers, values: js.Array[_]): Chainable[Subject] = js.native
  /**
    * Asserts that the target array does not have the same members as the given array where order matters.
    * @example
    *    cy.wrap([1, 2, 3]).should('not. have.ordered.members', [4, 5, 6])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveorderedmembers(chainer: cypressLib.cypressLibStrings.notDOThaveDOTorderedDOTmembers, values: js.Array[_]): Chainable[Subject] = js.native
  /**
    * Causes all `.property` and `.include` assertions that follow in the chain to ignore inherited properties.
    * @example
    *    Object.prototype.b = 2
    *    cy.wrap({ a: 1 }).should('have.property', 'a').and('not.have.ownProperty', 'b')
    * @see http://chaijs.com/api/bdd/#method_ownproperty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveownProperty(chainer: cypressLib.cypressLibStrings.notDOThaveDOTownProperty, property: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given property, using `.prop()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.prop', 'disabled')
    *    cy.get('#result').should('not.have.prop', 'disabled', false)
    * @see http://chaijs.com/plugins/chai-jquery/#propname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveprop(chainer: cypressLib.cypressLibStrings.notDOThaveDOTprop, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothaveprop(chainer: cypressLib.cypressLibStrings.notDOThaveDOTprop, value: java.lang.String, `match`: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target has a property with the given key `name`.
    * @example
    *    cy.wrap({ a: 1 }).should('not.have.property', 'b')
    *    cy.wrap({ a: 1 }).should('not.have.property', 'b', 1)
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothaveproperty(chainer: cypressLib.cypressLibStrings.notDOThaveDOTproperty, property: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothaveproperty(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTproperty,
    property: java.lang.String,
    value: js.Any
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target string does not contains the given substring `str`.
    * @example
    *    cy.wrap('foobar').should('not.have.string', 'baz')
    * @see http://chaijs.com/api/bdd/#method_string
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavestring(chainer: cypressLib.cypressLibStrings.notDOThaveDOTstring, `match`: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavestring(chainer: cypressLib.cypressLibStrings.notDOThaveDOTstring, `match`: stdLib.RegExp): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection is not equal to the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('not.have.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavetext(chainer: cypressLib.cypressLibStrings.notDOThaveDOTtext, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert spy did not throw an exception at least once.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spythrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavethrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTthrown): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavethrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTthrown, value: nodeLib.Error with stdLib.Error): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavethrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTthrown, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_nothavethrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTthrown, value: stdLib.ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('not.have.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_nothavevalue(chainer: cypressLib.cypressLibStrings.notDOThaveDOTvalue, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string `val` is not a substring of the target.
    * @example
    *    cy.wrap('foobar').should('not.include', 'baz')
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notinclude(chainer: cypressLib.cypressLibStrings.notDOTinclude, value: js.Any): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string `val` is not a substring of the target.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.include.members', [4, 5])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notincludemembers(chainer: cypressLib.cypressLibStrings.notDOTincludeDOTmembers, value: js.Array[_]): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.increase` asserts that the given function `subject` returns a greater number when it’s
    * invoked after invoking the target function compared to when it’s invoked beforehand.
    * `.increase` also causes all `.by` assertions that follow in the chain to assert how much greater of a number is returned.
    * It’s often best to assert that the return value increased by the expected amount, rather than asserting it increased by any amount.
    * @example
    *    let val = 1
    *    function addTwo() { val += 2 }
    *    function getVal() { return val }
    *    cy.wrap(() => {}).should('not.increase', getVal)
    * @see http://chaijs.com/api/bdd/#method_increase
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notincrease(chainer: cypressLib.cypressLibStrings.notDOTincrease, value: js.Object, property: java.lang.String): Chainable[Subject] = js.native
  /**
    * Asserts that the target does not match the given regular expression `re`.
    * @example
    *    cy.wrap('foobar').should('not.match', /baz$/)
    * @see http://chaijs.com/api/bdd/#method_match
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notmatch(chainer: cypressLib.cypressLibStrings.notDOTmatch, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_notmatch(chainer: cypressLib.cypressLibStrings.notDOTmatch, value: stdLib.RegExp): Chainable[Subject] = js.native
  /**
    * When the target is a non-function object, `.respondTo` asserts that the target does not have a `method` with the given name method. The method can be own or inherited, and it can be enumerable or non-enumerable.
    * @example
    *    class Cat {
    *      meow() {}
    *    }
    *    cy.wrap(new Cat()).should('not.respondTo', 'bark')
    * @see http://chaijs.com/api/bdd/#method_respondto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notrespondTo(chainer: cypressLib.cypressLibStrings.notDOTrespondTo, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert spy did not return the provided value at least once. (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers))
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notreturned(chainer: cypressLib.cypressLibStrings.notDOTreturned, value: js.Any): Chainable[Subject] = js.native
  /**
    * Invokes the given `matcher` function with the target being passed as the first argument, and asserts that the value returned is falsy.
    * @example
    *    cy.wrap(1).should('not.satisfy', (num) => num < 0)
    * @see http://chaijs.com/api/bdd/#method_satisfy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_notsatisfy(
    chainer: cypressLib.cypressLibStrings.notDOTsatisfy,
    fn: js.Function1[/* val */ js.Any, scala.Boolean]
  ): Chainable[Subject] = js.native
  /**
    * When the target is a non-function object, `.respondTo` asserts that the target has a `method` with the given name method. The method can be own or inherited, and it can be enumerable or non-enumerable.
    * @example
    *    class Cat {
    *      meow() {}
    *    }
    *    cy.wrap(new Cat()).should('respondTo', 'meow')
    * @see http://chaijs.com/api/bdd/#method_respondto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_respondTo(chainer: cypressLib.cypressLibStrings.respondTo, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert spy returned the provided value at least once. (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers))
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_returned(chainer: cypressLib.cypressLibStrings.returned, value: js.Any): Chainable[Subject] = js.native
  /**
    * Invokes the given `matcher` function with the target being passed as the first argument, and asserts that the value returned is truthy.
    * @example
    *    cy.wrap(1).should('satisfy', (num) => num > 0)
    * @see http://chaijs.com/api/bdd/#method_satisfy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_satisfy(chainer: cypressLib.cypressLibStrings.satisfy, fn: js.Function1[/* val */ js.Any, scala.Boolean]): Chainable[Subject] = js.native
  /**
    * When no arguments are provided, `.throw` invokes the target function and asserts that an error is thrown.
    * When one argument is provided, and it’s a string, `.throw` invokes the target function and asserts that an error is thrown with a message that contains that string.
    * @example
    *    function badFn() { throw new TypeError('Illegal salmon!') }
    *    cy.wrap(badFn).should('throw')
    *    cy.wrap(badFn).should('throw', 'salmon')
    *    cy.wrap(badFn).should('throw', /salmon/)
    * @see http://chaijs.com/api/bdd/#method_throw
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_throw(chainer: cypressLib.cypressLibStrings.`throw`): Chainable[Subject] = js.native
  /**
    * When no arguments are provided, `.throw` invokes the target function and asserts that an error is thrown.
    * When one argument is provided, and it’s a string, `.throw` invokes the target function and asserts that an error is thrown with a message that contains that string.
    * @example
    *    function badFn() { throw new TypeError('Illegal salmon!') }
    *    cy.wrap(badFn).should('throw')
    *    cy.wrap(badFn).should('throw', 'salmon')
    *    cy.wrap(badFn).should('throw', /salmon/)
    * @see http://chaijs.com/api/bdd/#method_throw
    * @see https://on.cypress.io/assertions
    */
  // tslint:disable-next-line ban-types
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @alias should
    * @see https://on.cypress.io/and
    */
  @JSName("and")
  def and_throw(chainer: cypressLib.cypressLibStrings.`throw`, error: nodeLib.Error with stdLib.Error): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(
    chainer: cypressLib.cypressLibStrings.`throw`,
    error: nodeLib.Error with stdLib.Error,
    expected: java.lang.String
  ): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(
    chainer: cypressLib.cypressLibStrings.`throw`,
    error: nodeLib.Error with stdLib.Error,
    expected: stdLib.RegExp
  ): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(chainer: cypressLib.cypressLibStrings.`throw`, error: js.Function): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(chainer: cypressLib.cypressLibStrings.`throw`, error: js.Function, expected: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(chainer: cypressLib.cypressLibStrings.`throw`, error: js.Function, expected: stdLib.RegExp): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(chainer: cypressLib.cypressLibStrings.`throw`, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("and")
  def and_throw(chainer: cypressLib.cypressLibStrings.`throw`, value: stdLib.RegExp): Chainable[Subject] = js.native
  /**
    * Assign an alias for later use. Reference the alias later within a
    * [cy.get()](https://on.cypress.io/get) or
    * [cy.wait()](https://on.cypress.io/wait) command with a `@` prefix.
    * You can alias DOM elements, routes, stubs and spies.
    *
    * @see https://on.cypress.io/as
    * @see https://on.cypress.io/variables-and-aliases
    * @see https://on.cypress.io/get
    * @example
    *    // Get the aliased ‘todos’ elements
    *    cy.get('ul#todos').as('todos')
    *    //...hack hack hack...
    *    // later retrieve the todos
    *    cy.get('@todos')
    */
  def as(alias: java.lang.String): Chainable[Subject] = js.native
  /**
    * Blur a focused element. This element must currently be in focus. If you want to ensure an element is focused before blurring, try using .focus() before .blur().
    *
    * @see https://on.cypress.io/blur
    */
  def blur(): Chainable[Subject] = js.native
  def blur(options: stdLib.Partial[BlurOptions]): Chainable[Subject] = js.native
  /**
    * Check checkbox(es) or radio(s). This element must be an `<input>` with type `checkbox` or `radio`.
    *
    * @see https://on.cypress.io/check
    * @example
    *    // Check checkbox element
    *    cy.get('[type="checkbox"]').check()
    *    // Check first radio element
    *    cy.get('[type="radio"]').first().check()
    */
  def check(): Chainable[Subject] = js.native
  def check(options: stdLib.Partial[CheckOptions]): Chainable[Subject] = js.native
  /**
    * Check checkbox(es) or radio(s). This element must be an `<input>` with type `checkbox` or `radio`.
    *
    * @see https://on.cypress.io/check
    * @example
    *    // Select the radio with the value of ‘US’
    *    cy.get('[type="radio"]').check('US')
    *    // Check the checkboxes with the values ‘ga’ and ‘ca’
    *    cy.get('[type="checkbox"]').check(['ga', 'ca'])
    */
  def check(value: java.lang.String): Chainable[Subject] = js.native
  def check(value: java.lang.String, options: stdLib.Partial[CheckOptions]): Chainable[Subject] = js.native
  def check(value: js.Array[java.lang.String]): Chainable[Subject] = js.native
  def check(value: js.Array[java.lang.String], options: stdLib.Partial[CheckOptions]): Chainable[Subject] = js.native
  /**
    * Get the children of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/children
    */
  def children[E /* <: stdLib.Node */](): Chainable[jqueryLib.JQuery[E]] = js.native
  def children[E /* <: stdLib.Node */](options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  def children[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def children[E /* <: stdLib.Node */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  @JSName("children")
  def children_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("children")
  def children_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("children")
  def children_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("children")
  def children_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("children")
  def children_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("children")
  def children_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("children")
  def children_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("children")
  def children_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("children")
  def children_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("children")
  def children_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("children")
  def children_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("children")
  def children_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("children")
  def children_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("children")
  def children_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("children")
  def children_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("children")
  def children_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("children")
  def children_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("children")
  def children_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("children")
  def children_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("children")
  def children_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("children")
  def children_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("children")
  def children_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("children")
  def children_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("children")
  def children_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("children")
  def children_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("children")
  def children_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("children")
  def children_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("children")
  def children_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("children")
  def children_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("children")
  def children_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("children")
  def children_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("children")
  def children_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("children")
  def children_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("children")
  def children_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("children")
  def children_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("children")
  def children_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("children")
  def children_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("children")
  def children_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("children")
  def children_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("children")
  def children_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("children")
  def children_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("children")
  def children_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("children")
  def children_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("children")
  def children_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("children")
  def children_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("children")
  def children_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("children")
  def children_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("children")
  def children_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("children")
  def children_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("children")
  def children_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("children")
  def children_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("children")
  def children_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("children")
  def children_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("children")
  def children_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("children")
  def children_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("children")
  def children_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("children")
  def children_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("children")
  def children_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("children")
  def children_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("children")
  def children_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("children")
  def children_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("children")
  def children_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("children")
  def children_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("children")
  def children_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("children")
  def children_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("children")
  def children_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("children")
  def children_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("children")
  def children_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("children")
  def children_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("children")
  def children_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("children")
  def children_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("children")
  def children_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("children")
  def children_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("children")
  def children_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("children")
  def children_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("children")
  def children_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("children")
  def children_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("children")
  def children_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("children")
  def children_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("children")
  def children_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("children")
  def children_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("children")
  def children_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("children")
  def children_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("children")
  def children_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("children")
  def children_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("children")
  def children_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("children")
  def children_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("children")
  def children_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("children")
  def children_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("children")
  def children_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("children")
  def children_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("children")
  def children_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("children")
  def children_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("children")
  def children_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("children")
  def children_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("children")
  def children_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("children")
  def children_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("children")
  def children_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("children")
  def children_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("children")
  def children_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("children")
  def children_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("children")
  def children_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("children")
  def children_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("children")
  def children_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("children")
  def children_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("children")
  def children_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("children")
  def children_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("children")
  def children_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("children")
  def children_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("children")
  def children_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("children")
  def children_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("children")
  def children_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("children")
  def children_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("children")
  def children_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("children")
  def children_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("children")
  def children_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("children")
  def children_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("children")
  def children_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("children")
  def children_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("children")
  def children_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("children")
  def children_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("children")
  def children_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("children")
  def children_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("children")
  def children_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("children")
  def children_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("children")
  def children_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("children")
  def children_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("children")
  def children_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("children")
  def children_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("children")
  def children_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("children")
  def children_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("children")
  def children_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("children")
  def children_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("children")
  def children_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("children")
  def children_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("children")
  def children_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("children")
  def children_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("children")
  def children_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("children")
  def children_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("children")
  def children_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("children")
  def children_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("children")
  def children_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("children")
  def children_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("children")
  def children_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("children")
  def children_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("children")
  def children_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("children")
  def children_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("children")
  def children_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("children")
  def children_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("children")
  def children_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("children")
  def children_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("children")
  def children_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("children")
  def children_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Clear the value of an `input` or `textarea`.
    * An alias for `.type({selectall}{backspace})`
    *
    * @see https://on.cypress.io/clear
    */
  def clear(): Chainable[Subject] = js.native
  def clear(options: stdLib.Partial[ClearOptions]): Chainable[Subject] = js.native
  /**
    * Clear a specific browser cookie.
    * Cypress automatically clears all cookies before each test to prevent state from being shared across tests. You shouldn’t need to use this command unless you’re using it to clear a specific cookie inside a single test.
    *
    * @see https://on.cypress.io/clearcookie
    */
  def clearCookie(name: java.lang.String): Chainable[scala.Null] = js.native
  def clearCookie(name: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[scala.Null] = js.native
  /**
    * Clear all browser cookies.
    * Cypress automatically clears all cookies before each test to prevent state from being shared across tests. You shouldn’t need to use this command unless you’re using it to clear a specific cookie inside a single test.
    *
    * @see https://on.cypress.io/clearcookies
    */
  def clearCookies(): Chainable[scala.Null] = js.native
  def clearCookies(options: stdLib.Partial[Loggable with Timeoutable]): Chainable[scala.Null] = js.native
  /**
    * Clear data in local storage.
    * Cypress automatically runs this command before each test to prevent state from being
    * shared across tests. You shouldn’t need to use this command unless you’re using it
    * to clear localStorage inside a single test. Yields `localStorage` object.
    *
    * @see https://on.cypress.io/clearlocalstorage
    * @example
    *    cy.clearLocalStorage().should(ls => {
    *      expect(ls.getItem('prop1')).to.be.null
    *    })
    */
  def clearLocalStorage(): Chainable[stdLib.Storage] = js.native
  def clearLocalStorage(key: java.lang.String): Chainable[stdLib.Storage] = js.native
  /**
    * Clear keys in local storage that match given regular expression.
    *
    * @see https://on.cypress.io/clearlocalstorage
    * @example
    *    // Clear all local storage matching /app-/
    *    cy.clearLocalStorage(/app-/)
    */
  def clearLocalStorage(re: stdLib.RegExp): Chainable[stdLib.Storage] = js.native
  /**
    * Click a DOM element.
    *
    * @see https://on.cypress.io/click
    * @example
    *    cy.get('button').click()          // Click on button
    *    cy.focused().click()              // Click on el with focus
    *    cy.contains('Welcome').click()    // Click on first el containing 'Welcome'
    */
  def click(): Chainable[Subject] = js.native
  def click(options: stdLib.Partial[ClickOptions]): Chainable[Subject] = js.native
  /**
    * Click a DOM element at specific corner / side.
    *
    * @param {String} position The position where the click should be issued. The `center` position is the default position.
    * @see https://on.cypress.io/click
    * @example
    *    cy.get('button').click('topRight')
    */
  def click(position: java.lang.String): Chainable[Subject] = js.native
  def click(position: java.lang.String, options: stdLib.Partial[ClickOptions]): Chainable[Subject] = js.native
  /**
    * Click a DOM element at specific coordinates
    *
    * @param {number} x The distance in pixels from the element’s left to issue the click.
    * @param {number} y The distance in pixels from the element’s top to issue the click.
    * @see https://on.cypress.io/click
    * @example
    *    // The click below will be issued inside of the element
    *    // (15px from the left and 40px from the top).
    *    cy.get('button').click(15, 40)
    */
  def click(x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  def click(x: scala.Double, y: scala.Double, options: stdLib.Partial[ClickOptions]): Chainable[Subject] = js.native
  /**
    * `cy.clock()` overrides native global functions related to time allowing them to be controlled
    * synchronously via [cy.tick()](https://on.cypress.io/tick) or the yielded clock object.
    * This includes controlling:
    * * `setTimeout`
    * * `clearTimeout`
    * * `setInterval`
    * * `clearInterval`
    * * `Date` Objects
    *
    * The clock starts at the unix epoch (timestamp of 0).
    * This means that when you instantiate new Date in your application,
    * it will have a time of January 1st, 1970.
    *
    * @see https://on.cypress.io/clock
    */
  def clock(): Chainable[Clock] = js.native
  /**
    * Mocks global clock and sets current timestamp to the given value.
    * Overrides all functions that deal with time.
    *
    * @see https://on.cypress.io/clock
    * @example
    *    // your app code
    *    $('#date').text(new Date().toJSON())
    *    // from spec file
    *    const now = new Date(2017, 3, 14).getTime() // March 14, 2017 timestamp
    *    cy.clock(now)
    *    cy.visit('/index.html')
    *    cy.get('#date').contains('2017-03-14')
    */
  def clock(now: scala.Double): Chainable[Clock] = js.native
  def clock(
    now: scala.Double,
    functions: js.Array[
      cypressLib.cypressLibStrings.setTimeout | cypressLib.cypressLibStrings.clearTimeout | cypressLib.cypressLibStrings.setInterval | cypressLib.cypressLibStrings.clearInterval
    ]
  ): Chainable[Clock] = js.native
  def clock(
    now: scala.Double,
    functions: js.Array[
      cypressLib.cypressLibStrings.setTimeout | cypressLib.cypressLibStrings.clearTimeout | cypressLib.cypressLibStrings.setInterval | cypressLib.cypressLibStrings.clearInterval
    ],
    options: Loggable
  ): Chainable[Clock] = js.native
  def clock(now: scala.Double, options: Loggable): Chainable[Clock] = js.native
  /**
    * Mocks global clock and all functions.
    *
    * @see https://on.cypress.io/clock
    * @example
    *    // mock clock but do not log this command
    *    cy.clock({ log: false })
    */
  def clock(options: Loggable): Chainable[Clock] = js.native
  def closest[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def closest[E /* <: stdLib.Node */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("closest")
  def closest_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("closest")
  def closest_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("closest")
  def closest_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("closest")
  def closest_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("closest")
  def closest_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("closest")
  def closest_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("closest")
  def closest_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("closest")
  def closest_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("closest")
  def closest_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("closest")
  def closest_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("closest")
  def closest_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("closest")
  def closest_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("closest")
  def closest_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("closest")
  def closest_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("closest")
  def closest_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("closest")
  def closest_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("closest")
  def closest_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("closest")
  def closest_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("closest")
  def closest_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("closest")
  def closest_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("closest")
  def closest_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("closest")
  def closest_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("closest")
  def closest_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("closest")
  def closest_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("closest")
  def closest_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("closest")
  def closest_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("closest")
  def closest_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("closest")
  def closest_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("closest")
  def closest_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("closest")
  def closest_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("closest")
  def closest_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("closest")
  def closest_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("closest")
  def closest_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("closest")
  def closest_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("closest")
  def closest_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("closest")
  def closest_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("closest")
  def closest_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("closest")
  def closest_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("closest")
  def closest_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("closest")
  def closest_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("closest")
  def closest_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("closest")
  def closest_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("closest")
  def closest_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("closest")
  def closest_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("closest")
  def closest_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("closest")
  def closest_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("closest")
  def closest_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("closest")
  def closest_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("closest")
  def closest_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("closest")
  def closest_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("closest")
  def closest_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("closest")
  def closest_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("closest")
  def closest_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("closest")
  def closest_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("closest")
  def closest_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("closest")
  def closest_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("closest")
  def closest_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("closest")
  def closest_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("closest")
  def closest_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("closest")
  def closest_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("closest")
  def closest_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("closest")
  def closest_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("closest")
  def closest_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("closest")
  def closest_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("closest")
  def closest_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("closest")
  def closest_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("closest")
  def closest_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("closest")
  def closest_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("closest")
  def closest_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("closest")
  def closest_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("closest")
  def closest_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("closest")
  def closest_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("closest")
  def closest_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("closest")
  def closest_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("closest")
  def closest_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("closest")
  def closest_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get the first DOM element that matches the selector (whether it be itself or one of its ancestors).
    *
    * @see https://on.cypress.io/closest
    */
  @JSName("closest")
  def closest_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("closest")
  def closest_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element containing the text.
    * DOM elements can contain more than the desired text and still match.
    * Additionally, Cypress prefers some DOM elements over the deepest element found.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // Yield el in .nav containing 'About'
    *    cy.get('.nav').contains('About')
    *    // Yield first el in document containing 'Hello'
    *    cy.contains('Hello')
    *    // you can use regular expression
    *    cy.contains(/^b\w+/)
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  def contains(content: java.lang.String): Chainable[Subject] = js.native
  def contains(content: scala.Double): Chainable[Subject] = js.native
  def contains(content: stdLib.RegExp): Chainable[Subject] = js.native
  /**
    * Get the DOM element using CSS "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <... class="foo">... apples ...</...>
    *    cy.contains('.foo', 'apples')
    */
  def contains[E /* <: stdLib.Node */](selector: java.lang.String, text: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def contains[E /* <: stdLib.Node */](
    selector: java.lang.String,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[E]] = js.native
  def contains[E /* <: stdLib.Node */](selector: java.lang.String, text: scala.Double): Chainable[jqueryLib.JQuery[E]] = js.native
  def contains[E /* <: stdLib.Node */](selector: java.lang.String, text: scala.Double, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  def contains[E /* <: stdLib.Node */](selector: java.lang.String, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[E]] = js.native
  def contains[E /* <: stdLib.Node */](
    selector: java.lang.String,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get the child DOM element that contains given text.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // Yield el in .nav containing 'About'
    *    cy.get('.nav').contains('About')
    */
  @JSName("contains")
  def contains_ENode[E /* <: stdLib.Node */](content: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  @JSName("contains")
  def contains_ENode[E /* <: stdLib.Node */](content: scala.Double): Chainable[jqueryLib.JQuery[E]] = js.native
  @JSName("contains")
  def contains_ENode[E /* <: stdLib.Node */](content: stdLib.RegExp): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_a(selector: cypressLib.cypressLibStrings.a, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("contains")
  def contains_a(
    selector: cypressLib.cypressLibStrings.a,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("contains")
  def contains_a(selector: cypressLib.cypressLibStrings.a, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("contains")
  def contains_a(
    selector: cypressLib.cypressLibStrings.a,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("contains")
  def contains_a(selector: cypressLib.cypressLibStrings.a, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("contains")
  def contains_a(
    selector: cypressLib.cypressLibStrings.a,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_abbr(selector: cypressLib.cypressLibStrings.abbr, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_abbr(
    selector: cypressLib.cypressLibStrings.abbr,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_abbr(selector: cypressLib.cypressLibStrings.abbr, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_abbr(
    selector: cypressLib.cypressLibStrings.abbr,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_abbr(selector: cypressLib.cypressLibStrings.abbr, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_abbr(
    selector: cypressLib.cypressLibStrings.abbr,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_address(selector: cypressLib.cypressLibStrings.address, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_address(
    selector: cypressLib.cypressLibStrings.address,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_address(selector: cypressLib.cypressLibStrings.address, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_address(
    selector: cypressLib.cypressLibStrings.address,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_address(selector: cypressLib.cypressLibStrings.address, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_address(
    selector: cypressLib.cypressLibStrings.address,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_applet(selector: cypressLib.cypressLibStrings.applet, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("contains")
  def contains_applet(
    selector: cypressLib.cypressLibStrings.applet,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("contains")
  def contains_applet(selector: cypressLib.cypressLibStrings.applet, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("contains")
  def contains_applet(
    selector: cypressLib.cypressLibStrings.applet,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("contains")
  def contains_applet(selector: cypressLib.cypressLibStrings.applet, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("contains")
  def contains_applet(
    selector: cypressLib.cypressLibStrings.applet,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_area(selector: cypressLib.cypressLibStrings.area, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("contains")
  def contains_area(
    selector: cypressLib.cypressLibStrings.area,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("contains")
  def contains_area(selector: cypressLib.cypressLibStrings.area, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("contains")
  def contains_area(
    selector: cypressLib.cypressLibStrings.area,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("contains")
  def contains_area(selector: cypressLib.cypressLibStrings.area, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("contains")
  def contains_area(
    selector: cypressLib.cypressLibStrings.area,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_article(selector: cypressLib.cypressLibStrings.article, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_article(
    selector: cypressLib.cypressLibStrings.article,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_article(selector: cypressLib.cypressLibStrings.article, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_article(
    selector: cypressLib.cypressLibStrings.article,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_article(selector: cypressLib.cypressLibStrings.article, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_article(
    selector: cypressLib.cypressLibStrings.article,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_aside(selector: cypressLib.cypressLibStrings.aside, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_aside(
    selector: cypressLib.cypressLibStrings.aside,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_aside(selector: cypressLib.cypressLibStrings.aside, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_aside(
    selector: cypressLib.cypressLibStrings.aside,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_aside(selector: cypressLib.cypressLibStrings.aside, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_aside(
    selector: cypressLib.cypressLibStrings.aside,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_audio(selector: cypressLib.cypressLibStrings.audio, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("contains")
  def contains_audio(
    selector: cypressLib.cypressLibStrings.audio,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("contains")
  def contains_audio(selector: cypressLib.cypressLibStrings.audio, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("contains")
  def contains_audio(
    selector: cypressLib.cypressLibStrings.audio,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("contains")
  def contains_audio(selector: cypressLib.cypressLibStrings.audio, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("contains")
  def contains_audio(
    selector: cypressLib.cypressLibStrings.audio,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_b(selector: cypressLib.cypressLibStrings.b, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_b(
    selector: cypressLib.cypressLibStrings.b,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_b(selector: cypressLib.cypressLibStrings.b, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_b(
    selector: cypressLib.cypressLibStrings.b,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_b(selector: cypressLib.cypressLibStrings.b, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_b(
    selector: cypressLib.cypressLibStrings.b,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_base(selector: cypressLib.cypressLibStrings.base, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("contains")
  def contains_base(
    selector: cypressLib.cypressLibStrings.base,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("contains")
  def contains_base(selector: cypressLib.cypressLibStrings.base, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("contains")
  def contains_base(
    selector: cypressLib.cypressLibStrings.base,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("contains")
  def contains_base(selector: cypressLib.cypressLibStrings.base, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("contains")
  def contains_base(
    selector: cypressLib.cypressLibStrings.base,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_basefont(selector: cypressLib.cypressLibStrings.basefont, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("contains")
  def contains_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("contains")
  def contains_basefont(selector: cypressLib.cypressLibStrings.basefont, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("contains")
  def contains_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("contains")
  def contains_basefont(selector: cypressLib.cypressLibStrings.basefont, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("contains")
  def contains_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_bdo(selector: cypressLib.cypressLibStrings.bdo, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdo(
    selector: cypressLib.cypressLibStrings.bdo,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdo(selector: cypressLib.cypressLibStrings.bdo, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdo(
    selector: cypressLib.cypressLibStrings.bdo,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdo(selector: cypressLib.cypressLibStrings.bdo, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_bdo(
    selector: cypressLib.cypressLibStrings.bdo,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_blockquote(selector: cypressLib.cypressLibStrings.blockquote, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_blockquote(selector: cypressLib.cypressLibStrings.blockquote, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_blockquote(selector: cypressLib.cypressLibStrings.blockquote, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_body(selector: cypressLib.cypressLibStrings.body, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("contains")
  def contains_body(
    selector: cypressLib.cypressLibStrings.body,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("contains")
  def contains_body(selector: cypressLib.cypressLibStrings.body, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("contains")
  def contains_body(
    selector: cypressLib.cypressLibStrings.body,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("contains")
  def contains_body(selector: cypressLib.cypressLibStrings.body, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("contains")
  def contains_body(
    selector: cypressLib.cypressLibStrings.body,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_br(selector: cypressLib.cypressLibStrings.br, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("contains")
  def contains_br(
    selector: cypressLib.cypressLibStrings.br,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("contains")
  def contains_br(selector: cypressLib.cypressLibStrings.br, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("contains")
  def contains_br(
    selector: cypressLib.cypressLibStrings.br,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("contains")
  def contains_br(selector: cypressLib.cypressLibStrings.br, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("contains")
  def contains_br(
    selector: cypressLib.cypressLibStrings.br,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_button(selector: cypressLib.cypressLibStrings.button, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("contains")
  def contains_button(
    selector: cypressLib.cypressLibStrings.button,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("contains")
  def contains_button(selector: cypressLib.cypressLibStrings.button, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("contains")
  def contains_button(
    selector: cypressLib.cypressLibStrings.button,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("contains")
  def contains_button(selector: cypressLib.cypressLibStrings.button, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("contains")
  def contains_button(
    selector: cypressLib.cypressLibStrings.button,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_canvas(selector: cypressLib.cypressLibStrings.canvas, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("contains")
  def contains_canvas(
    selector: cypressLib.cypressLibStrings.canvas,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("contains")
  def contains_canvas(selector: cypressLib.cypressLibStrings.canvas, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("contains")
  def contains_canvas(
    selector: cypressLib.cypressLibStrings.canvas,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("contains")
  def contains_canvas(selector: cypressLib.cypressLibStrings.canvas, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("contains")
  def contains_canvas(
    selector: cypressLib.cypressLibStrings.canvas,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_caption(selector: cypressLib.cypressLibStrings.caption, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("contains")
  def contains_caption(
    selector: cypressLib.cypressLibStrings.caption,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("contains")
  def contains_caption(selector: cypressLib.cypressLibStrings.caption, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("contains")
  def contains_caption(
    selector: cypressLib.cypressLibStrings.caption,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("contains")
  def contains_caption(selector: cypressLib.cypressLibStrings.caption, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("contains")
  def contains_caption(
    selector: cypressLib.cypressLibStrings.caption,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_cite(selector: cypressLib.cypressLibStrings.cite, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_cite(
    selector: cypressLib.cypressLibStrings.cite,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_cite(selector: cypressLib.cypressLibStrings.cite, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_cite(
    selector: cypressLib.cypressLibStrings.cite,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_cite(selector: cypressLib.cypressLibStrings.cite, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_cite(
    selector: cypressLib.cypressLibStrings.cite,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_code(selector: cypressLib.cypressLibStrings.code, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_code(
    selector: cypressLib.cypressLibStrings.code,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_code(selector: cypressLib.cypressLibStrings.code, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_code(
    selector: cypressLib.cypressLibStrings.code,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_code(selector: cypressLib.cypressLibStrings.code, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_code(
    selector: cypressLib.cypressLibStrings.code,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_col(selector: cypressLib.cypressLibStrings.col, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_col(
    selector: cypressLib.cypressLibStrings.col,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_col(selector: cypressLib.cypressLibStrings.col, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_col(
    selector: cypressLib.cypressLibStrings.col,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_col(selector: cypressLib.cypressLibStrings.col, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_col(
    selector: cypressLib.cypressLibStrings.col,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_colgroup(selector: cypressLib.cypressLibStrings.colgroup, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_colgroup(selector: cypressLib.cypressLibStrings.colgroup, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_colgroup(selector: cypressLib.cypressLibStrings.colgroup, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("contains")
  def contains_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_data(selector: cypressLib.cypressLibStrings.data, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("contains")
  def contains_data(
    selector: cypressLib.cypressLibStrings.data,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("contains")
  def contains_data(selector: cypressLib.cypressLibStrings.data, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("contains")
  def contains_data(
    selector: cypressLib.cypressLibStrings.data,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("contains")
  def contains_data(selector: cypressLib.cypressLibStrings.data, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("contains")
  def contains_data(
    selector: cypressLib.cypressLibStrings.data,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_datalist(selector: cypressLib.cypressLibStrings.datalist, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("contains")
  def contains_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("contains")
  def contains_datalist(selector: cypressLib.cypressLibStrings.datalist, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("contains")
  def contains_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("contains")
  def contains_datalist(selector: cypressLib.cypressLibStrings.datalist, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("contains")
  def contains_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_dd(selector: cypressLib.cypressLibStrings.dd, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dd(
    selector: cypressLib.cypressLibStrings.dd,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dd(selector: cypressLib.cypressLibStrings.dd, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dd(
    selector: cypressLib.cypressLibStrings.dd,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dd(selector: cypressLib.cypressLibStrings.dd, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dd(
    selector: cypressLib.cypressLibStrings.dd,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_del(selector: cypressLib.cypressLibStrings.del, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("contains")
  def contains_del(
    selector: cypressLib.cypressLibStrings.del,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("contains")
  def contains_del(selector: cypressLib.cypressLibStrings.del, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("contains")
  def contains_del(
    selector: cypressLib.cypressLibStrings.del,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("contains")
  def contains_del(selector: cypressLib.cypressLibStrings.del, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("contains")
  def contains_del(
    selector: cypressLib.cypressLibStrings.del,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_details(selector: cypressLib.cypressLibStrings.details, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("contains")
  def contains_details(
    selector: cypressLib.cypressLibStrings.details,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("contains")
  def contains_details(selector: cypressLib.cypressLibStrings.details, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("contains")
  def contains_details(
    selector: cypressLib.cypressLibStrings.details,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("contains")
  def contains_details(selector: cypressLib.cypressLibStrings.details, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("contains")
  def contains_details(
    selector: cypressLib.cypressLibStrings.details,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_dfn(selector: cypressLib.cypressLibStrings.dfn, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dfn(
    selector: cypressLib.cypressLibStrings.dfn,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dfn(selector: cypressLib.cypressLibStrings.dfn, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dfn(
    selector: cypressLib.cypressLibStrings.dfn,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dfn(selector: cypressLib.cypressLibStrings.dfn, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dfn(
    selector: cypressLib.cypressLibStrings.dfn,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_dialog(selector: cypressLib.cypressLibStrings.dialog, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("contains")
  def contains_dialog(
    selector: cypressLib.cypressLibStrings.dialog,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("contains")
  def contains_dialog(selector: cypressLib.cypressLibStrings.dialog, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("contains")
  def contains_dialog(
    selector: cypressLib.cypressLibStrings.dialog,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("contains")
  def contains_dialog(selector: cypressLib.cypressLibStrings.dialog, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("contains")
  def contains_dialog(
    selector: cypressLib.cypressLibStrings.dialog,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_dir(selector: cypressLib.cypressLibStrings.dir, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("contains")
  def contains_dir(
    selector: cypressLib.cypressLibStrings.dir,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("contains")
  def contains_dir(selector: cypressLib.cypressLibStrings.dir, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("contains")
  def contains_dir(
    selector: cypressLib.cypressLibStrings.dir,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("contains")
  def contains_dir(selector: cypressLib.cypressLibStrings.dir, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("contains")
  def contains_dir(
    selector: cypressLib.cypressLibStrings.dir,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_div(selector: cypressLib.cypressLibStrings.div, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("contains")
  def contains_div(
    selector: cypressLib.cypressLibStrings.div,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("contains")
  def contains_div(selector: cypressLib.cypressLibStrings.div, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("contains")
  def contains_div(
    selector: cypressLib.cypressLibStrings.div,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("contains")
  def contains_div(selector: cypressLib.cypressLibStrings.div, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("contains")
  def contains_div(
    selector: cypressLib.cypressLibStrings.div,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_dl(selector: cypressLib.cypressLibStrings.dl, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("contains")
  def contains_dl(
    selector: cypressLib.cypressLibStrings.dl,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("contains")
  def contains_dl(selector: cypressLib.cypressLibStrings.dl, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("contains")
  def contains_dl(
    selector: cypressLib.cypressLibStrings.dl,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("contains")
  def contains_dl(selector: cypressLib.cypressLibStrings.dl, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("contains")
  def contains_dl(
    selector: cypressLib.cypressLibStrings.dl,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_dt(selector: cypressLib.cypressLibStrings.dt, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dt(
    selector: cypressLib.cypressLibStrings.dt,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dt(selector: cypressLib.cypressLibStrings.dt, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dt(
    selector: cypressLib.cypressLibStrings.dt,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dt(selector: cypressLib.cypressLibStrings.dt, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_dt(
    selector: cypressLib.cypressLibStrings.dt,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_em(selector: cypressLib.cypressLibStrings.em, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_em(
    selector: cypressLib.cypressLibStrings.em,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_em(selector: cypressLib.cypressLibStrings.em, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_em(
    selector: cypressLib.cypressLibStrings.em,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_em(selector: cypressLib.cypressLibStrings.em, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_em(
    selector: cypressLib.cypressLibStrings.em,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_embed(selector: cypressLib.cypressLibStrings.embed, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("contains")
  def contains_embed(
    selector: cypressLib.cypressLibStrings.embed,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("contains")
  def contains_embed(selector: cypressLib.cypressLibStrings.embed, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("contains")
  def contains_embed(
    selector: cypressLib.cypressLibStrings.embed,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("contains")
  def contains_embed(selector: cypressLib.cypressLibStrings.embed, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("contains")
  def contains_embed(
    selector: cypressLib.cypressLibStrings.embed,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_fieldset(selector: cypressLib.cypressLibStrings.fieldset, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("contains")
  def contains_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("contains")
  def contains_fieldset(selector: cypressLib.cypressLibStrings.fieldset, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("contains")
  def contains_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("contains")
  def contains_fieldset(selector: cypressLib.cypressLibStrings.fieldset, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("contains")
  def contains_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_figcaption(selector: cypressLib.cypressLibStrings.figcaption, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_figcaption(selector: cypressLib.cypressLibStrings.figcaption, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_figcaption(selector: cypressLib.cypressLibStrings.figcaption, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_figure(selector: cypressLib.cypressLibStrings.figure, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_figure(
    selector: cypressLib.cypressLibStrings.figure,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_figure(selector: cypressLib.cypressLibStrings.figure, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_figure(
    selector: cypressLib.cypressLibStrings.figure,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_figure(selector: cypressLib.cypressLibStrings.figure, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_figure(
    selector: cypressLib.cypressLibStrings.figure,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_font(selector: cypressLib.cypressLibStrings.font, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("contains")
  def contains_font(
    selector: cypressLib.cypressLibStrings.font,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("contains")
  def contains_font(selector: cypressLib.cypressLibStrings.font, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("contains")
  def contains_font(
    selector: cypressLib.cypressLibStrings.font,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("contains")
  def contains_font(selector: cypressLib.cypressLibStrings.font, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("contains")
  def contains_font(
    selector: cypressLib.cypressLibStrings.font,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_footer(selector: cypressLib.cypressLibStrings.footer, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_footer(
    selector: cypressLib.cypressLibStrings.footer,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_footer(selector: cypressLib.cypressLibStrings.footer, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_footer(
    selector: cypressLib.cypressLibStrings.footer,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_footer(selector: cypressLib.cypressLibStrings.footer, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_footer(
    selector: cypressLib.cypressLibStrings.footer,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_form(selector: cypressLib.cypressLibStrings.form, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("contains")
  def contains_form(
    selector: cypressLib.cypressLibStrings.form,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("contains")
  def contains_form(selector: cypressLib.cypressLibStrings.form, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("contains")
  def contains_form(
    selector: cypressLib.cypressLibStrings.form,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("contains")
  def contains_form(selector: cypressLib.cypressLibStrings.form, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("contains")
  def contains_form(
    selector: cypressLib.cypressLibStrings.form,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_frame(selector: cypressLib.cypressLibStrings.frame, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("contains")
  def contains_frame(
    selector: cypressLib.cypressLibStrings.frame,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("contains")
  def contains_frame(selector: cypressLib.cypressLibStrings.frame, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("contains")
  def contains_frame(
    selector: cypressLib.cypressLibStrings.frame,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("contains")
  def contains_frame(selector: cypressLib.cypressLibStrings.frame, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("contains")
  def contains_frame(
    selector: cypressLib.cypressLibStrings.frame,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_frameset(selector: cypressLib.cypressLibStrings.frameset, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("contains")
  def contains_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("contains")
  def contains_frameset(selector: cypressLib.cypressLibStrings.frameset, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("contains")
  def contains_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("contains")
  def contains_frameset(selector: cypressLib.cypressLibStrings.frameset, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("contains")
  def contains_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_h1(selector: cypressLib.cypressLibStrings.h1, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h1(
    selector: cypressLib.cypressLibStrings.h1,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h1(selector: cypressLib.cypressLibStrings.h1, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h1(
    selector: cypressLib.cypressLibStrings.h1,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h1(selector: cypressLib.cypressLibStrings.h1, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h1(
    selector: cypressLib.cypressLibStrings.h1,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_h2(selector: cypressLib.cypressLibStrings.h2, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h2(
    selector: cypressLib.cypressLibStrings.h2,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h2(selector: cypressLib.cypressLibStrings.h2, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h2(
    selector: cypressLib.cypressLibStrings.h2,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h2(selector: cypressLib.cypressLibStrings.h2, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h2(
    selector: cypressLib.cypressLibStrings.h2,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_h3(selector: cypressLib.cypressLibStrings.h3, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h3(
    selector: cypressLib.cypressLibStrings.h3,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h3(selector: cypressLib.cypressLibStrings.h3, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h3(
    selector: cypressLib.cypressLibStrings.h3,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h3(selector: cypressLib.cypressLibStrings.h3, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h3(
    selector: cypressLib.cypressLibStrings.h3,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_h4(selector: cypressLib.cypressLibStrings.h4, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h4(
    selector: cypressLib.cypressLibStrings.h4,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h4(selector: cypressLib.cypressLibStrings.h4, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h4(
    selector: cypressLib.cypressLibStrings.h4,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h4(selector: cypressLib.cypressLibStrings.h4, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h4(
    selector: cypressLib.cypressLibStrings.h4,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_h5(selector: cypressLib.cypressLibStrings.h5, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h5(
    selector: cypressLib.cypressLibStrings.h5,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h5(selector: cypressLib.cypressLibStrings.h5, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h5(
    selector: cypressLib.cypressLibStrings.h5,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h5(selector: cypressLib.cypressLibStrings.h5, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h5(
    selector: cypressLib.cypressLibStrings.h5,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_h6(selector: cypressLib.cypressLibStrings.h6, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h6(
    selector: cypressLib.cypressLibStrings.h6,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h6(selector: cypressLib.cypressLibStrings.h6, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h6(
    selector: cypressLib.cypressLibStrings.h6,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h6(selector: cypressLib.cypressLibStrings.h6, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("contains")
  def contains_h6(
    selector: cypressLib.cypressLibStrings.h6,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_head(selector: cypressLib.cypressLibStrings.head, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("contains")
  def contains_head(
    selector: cypressLib.cypressLibStrings.head,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("contains")
  def contains_head(selector: cypressLib.cypressLibStrings.head, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("contains")
  def contains_head(
    selector: cypressLib.cypressLibStrings.head,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("contains")
  def contains_head(selector: cypressLib.cypressLibStrings.head, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("contains")
  def contains_head(
    selector: cypressLib.cypressLibStrings.head,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_header(selector: cypressLib.cypressLibStrings.header, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_header(
    selector: cypressLib.cypressLibStrings.header,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_header(selector: cypressLib.cypressLibStrings.header, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_header(
    selector: cypressLib.cypressLibStrings.header,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_header(selector: cypressLib.cypressLibStrings.header, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_header(
    selector: cypressLib.cypressLibStrings.header,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_hgroup(selector: cypressLib.cypressLibStrings.hgroup, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_hgroup(
    selector: cypressLib.cypressLibStrings.hgroup,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_hgroup(selector: cypressLib.cypressLibStrings.hgroup, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_hgroup(
    selector: cypressLib.cypressLibStrings.hgroup,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_hgroup(selector: cypressLib.cypressLibStrings.hgroup, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_hgroup(
    selector: cypressLib.cypressLibStrings.hgroup,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_hr(selector: cypressLib.cypressLibStrings.hr, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("contains")
  def contains_hr(
    selector: cypressLib.cypressLibStrings.hr,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("contains")
  def contains_hr(selector: cypressLib.cypressLibStrings.hr, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("contains")
  def contains_hr(
    selector: cypressLib.cypressLibStrings.hr,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("contains")
  def contains_hr(selector: cypressLib.cypressLibStrings.hr, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("contains")
  def contains_hr(
    selector: cypressLib.cypressLibStrings.hr,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_html(selector: cypressLib.cypressLibStrings.html, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("contains")
  def contains_html(
    selector: cypressLib.cypressLibStrings.html,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("contains")
  def contains_html(selector: cypressLib.cypressLibStrings.html, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("contains")
  def contains_html(
    selector: cypressLib.cypressLibStrings.html,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("contains")
  def contains_html(selector: cypressLib.cypressLibStrings.html, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("contains")
  def contains_html(
    selector: cypressLib.cypressLibStrings.html,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_i(selector: cypressLib.cypressLibStrings.i, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_i(
    selector: cypressLib.cypressLibStrings.i,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_i(selector: cypressLib.cypressLibStrings.i, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_i(
    selector: cypressLib.cypressLibStrings.i,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_i(selector: cypressLib.cypressLibStrings.i, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_i(
    selector: cypressLib.cypressLibStrings.i,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_iframe(selector: cypressLib.cypressLibStrings.iframe, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("contains")
  def contains_iframe(
    selector: cypressLib.cypressLibStrings.iframe,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("contains")
  def contains_iframe(selector: cypressLib.cypressLibStrings.iframe, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("contains")
  def contains_iframe(
    selector: cypressLib.cypressLibStrings.iframe,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("contains")
  def contains_iframe(selector: cypressLib.cypressLibStrings.iframe, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("contains")
  def contains_iframe(
    selector: cypressLib.cypressLibStrings.iframe,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_img(selector: cypressLib.cypressLibStrings.img, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("contains")
  def contains_img(
    selector: cypressLib.cypressLibStrings.img,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("contains")
  def contains_img(selector: cypressLib.cypressLibStrings.img, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("contains")
  def contains_img(
    selector: cypressLib.cypressLibStrings.img,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("contains")
  def contains_img(selector: cypressLib.cypressLibStrings.img, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("contains")
  def contains_img(
    selector: cypressLib.cypressLibStrings.img,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_input(selector: cypressLib.cypressLibStrings.input, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("contains")
  def contains_input(
    selector: cypressLib.cypressLibStrings.input,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("contains")
  def contains_input(selector: cypressLib.cypressLibStrings.input, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("contains")
  def contains_input(
    selector: cypressLib.cypressLibStrings.input,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("contains")
  def contains_input(selector: cypressLib.cypressLibStrings.input, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("contains")
  def contains_input(
    selector: cypressLib.cypressLibStrings.input,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_ins(selector: cypressLib.cypressLibStrings.ins, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("contains")
  def contains_ins(
    selector: cypressLib.cypressLibStrings.ins,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("contains")
  def contains_ins(selector: cypressLib.cypressLibStrings.ins, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("contains")
  def contains_ins(
    selector: cypressLib.cypressLibStrings.ins,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("contains")
  def contains_ins(selector: cypressLib.cypressLibStrings.ins, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("contains")
  def contains_ins(
    selector: cypressLib.cypressLibStrings.ins,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_kbd(selector: cypressLib.cypressLibStrings.kbd, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_kbd(
    selector: cypressLib.cypressLibStrings.kbd,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_kbd(selector: cypressLib.cypressLibStrings.kbd, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_kbd(
    selector: cypressLib.cypressLibStrings.kbd,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_kbd(selector: cypressLib.cypressLibStrings.kbd, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_kbd(
    selector: cypressLib.cypressLibStrings.kbd,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_label(selector: cypressLib.cypressLibStrings.label, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("contains")
  def contains_label(
    selector: cypressLib.cypressLibStrings.label,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("contains")
  def contains_label(selector: cypressLib.cypressLibStrings.label, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("contains")
  def contains_label(
    selector: cypressLib.cypressLibStrings.label,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("contains")
  def contains_label(selector: cypressLib.cypressLibStrings.label, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("contains")
  def contains_label(
    selector: cypressLib.cypressLibStrings.label,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_legend(selector: cypressLib.cypressLibStrings.legend, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("contains")
  def contains_legend(
    selector: cypressLib.cypressLibStrings.legend,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("contains")
  def contains_legend(selector: cypressLib.cypressLibStrings.legend, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("contains")
  def contains_legend(
    selector: cypressLib.cypressLibStrings.legend,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("contains")
  def contains_legend(selector: cypressLib.cypressLibStrings.legend, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("contains")
  def contains_legend(
    selector: cypressLib.cypressLibStrings.legend,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_li(selector: cypressLib.cypressLibStrings.li, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("contains")
  def contains_li(
    selector: cypressLib.cypressLibStrings.li,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("contains")
  def contains_li(selector: cypressLib.cypressLibStrings.li, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("contains")
  def contains_li(
    selector: cypressLib.cypressLibStrings.li,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("contains")
  def contains_li(selector: cypressLib.cypressLibStrings.li, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("contains")
  def contains_li(
    selector: cypressLib.cypressLibStrings.li,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_link(selector: cypressLib.cypressLibStrings.link, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("contains")
  def contains_link(
    selector: cypressLib.cypressLibStrings.link,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("contains")
  def contains_link(selector: cypressLib.cypressLibStrings.link, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("contains")
  def contains_link(
    selector: cypressLib.cypressLibStrings.link,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("contains")
  def contains_link(selector: cypressLib.cypressLibStrings.link, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("contains")
  def contains_link(
    selector: cypressLib.cypressLibStrings.link,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_map(selector: cypressLib.cypressLibStrings.map, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("contains")
  def contains_map(
    selector: cypressLib.cypressLibStrings.map,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("contains")
  def contains_map(selector: cypressLib.cypressLibStrings.map, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("contains")
  def contains_map(
    selector: cypressLib.cypressLibStrings.map,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("contains")
  def contains_map(selector: cypressLib.cypressLibStrings.map, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("contains")
  def contains_map(
    selector: cypressLib.cypressLibStrings.map,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_mark(selector: cypressLib.cypressLibStrings.mark, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_mark(
    selector: cypressLib.cypressLibStrings.mark,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_mark(selector: cypressLib.cypressLibStrings.mark, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_mark(
    selector: cypressLib.cypressLibStrings.mark,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_mark(selector: cypressLib.cypressLibStrings.mark, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_mark(
    selector: cypressLib.cypressLibStrings.mark,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_marquee(selector: cypressLib.cypressLibStrings.marquee, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("contains")
  def contains_marquee(
    selector: cypressLib.cypressLibStrings.marquee,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("contains")
  def contains_marquee(selector: cypressLib.cypressLibStrings.marquee, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("contains")
  def contains_marquee(
    selector: cypressLib.cypressLibStrings.marquee,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("contains")
  def contains_marquee(selector: cypressLib.cypressLibStrings.marquee, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("contains")
  def contains_marquee(
    selector: cypressLib.cypressLibStrings.marquee,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_menu(selector: cypressLib.cypressLibStrings.menu, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("contains")
  def contains_menu(
    selector: cypressLib.cypressLibStrings.menu,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("contains")
  def contains_menu(selector: cypressLib.cypressLibStrings.menu, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("contains")
  def contains_menu(
    selector: cypressLib.cypressLibStrings.menu,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("contains")
  def contains_menu(selector: cypressLib.cypressLibStrings.menu, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("contains")
  def contains_menu(
    selector: cypressLib.cypressLibStrings.menu,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_meta(selector: cypressLib.cypressLibStrings.meta, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("contains")
  def contains_meta(
    selector: cypressLib.cypressLibStrings.meta,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("contains")
  def contains_meta(selector: cypressLib.cypressLibStrings.meta, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("contains")
  def contains_meta(
    selector: cypressLib.cypressLibStrings.meta,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("contains")
  def contains_meta(selector: cypressLib.cypressLibStrings.meta, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("contains")
  def contains_meta(
    selector: cypressLib.cypressLibStrings.meta,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_meter(selector: cypressLib.cypressLibStrings.meter, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("contains")
  def contains_meter(
    selector: cypressLib.cypressLibStrings.meter,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("contains")
  def contains_meter(selector: cypressLib.cypressLibStrings.meter, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("contains")
  def contains_meter(
    selector: cypressLib.cypressLibStrings.meter,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("contains")
  def contains_meter(selector: cypressLib.cypressLibStrings.meter, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("contains")
  def contains_meter(
    selector: cypressLib.cypressLibStrings.meter,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_nav(selector: cypressLib.cypressLibStrings.nav, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_nav(
    selector: cypressLib.cypressLibStrings.nav,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_nav(selector: cypressLib.cypressLibStrings.nav, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_nav(
    selector: cypressLib.cypressLibStrings.nav,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_nav(selector: cypressLib.cypressLibStrings.nav, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_nav(
    selector: cypressLib.cypressLibStrings.nav,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_noscript(selector: cypressLib.cypressLibStrings.noscript, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_noscript(selector: cypressLib.cypressLibStrings.noscript, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_noscript(selector: cypressLib.cypressLibStrings.noscript, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_object(selector: cypressLib.cypressLibStrings.`object`, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("contains")
  def contains_object(
    selector: cypressLib.cypressLibStrings.`object`,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("contains")
  def contains_object(selector: cypressLib.cypressLibStrings.`object`, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("contains")
  def contains_object(
    selector: cypressLib.cypressLibStrings.`object`,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("contains")
  def contains_object(selector: cypressLib.cypressLibStrings.`object`, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("contains")
  def contains_object(
    selector: cypressLib.cypressLibStrings.`object`,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_ol(selector: cypressLib.cypressLibStrings.ol, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("contains")
  def contains_ol(
    selector: cypressLib.cypressLibStrings.ol,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("contains")
  def contains_ol(selector: cypressLib.cypressLibStrings.ol, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("contains")
  def contains_ol(
    selector: cypressLib.cypressLibStrings.ol,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("contains")
  def contains_ol(selector: cypressLib.cypressLibStrings.ol, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("contains")
  def contains_ol(
    selector: cypressLib.cypressLibStrings.ol,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_optgroup(selector: cypressLib.cypressLibStrings.optgroup, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("contains")
  def contains_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("contains")
  def contains_optgroup(selector: cypressLib.cypressLibStrings.optgroup, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("contains")
  def contains_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("contains")
  def contains_optgroup(selector: cypressLib.cypressLibStrings.optgroup, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("contains")
  def contains_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_option(selector: cypressLib.cypressLibStrings.option, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("contains")
  def contains_option(
    selector: cypressLib.cypressLibStrings.option,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("contains")
  def contains_option(selector: cypressLib.cypressLibStrings.option, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("contains")
  def contains_option(
    selector: cypressLib.cypressLibStrings.option,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("contains")
  def contains_option(selector: cypressLib.cypressLibStrings.option, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("contains")
  def contains_option(
    selector: cypressLib.cypressLibStrings.option,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_output(selector: cypressLib.cypressLibStrings.output, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("contains")
  def contains_output(
    selector: cypressLib.cypressLibStrings.output,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("contains")
  def contains_output(selector: cypressLib.cypressLibStrings.output, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("contains")
  def contains_output(
    selector: cypressLib.cypressLibStrings.output,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("contains")
  def contains_output(selector: cypressLib.cypressLibStrings.output, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("contains")
  def contains_output(
    selector: cypressLib.cypressLibStrings.output,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_p(selector: cypressLib.cypressLibStrings.p, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("contains")
  def contains_p(
    selector: cypressLib.cypressLibStrings.p,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("contains")
  def contains_p(selector: cypressLib.cypressLibStrings.p, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("contains")
  def contains_p(
    selector: cypressLib.cypressLibStrings.p,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("contains")
  def contains_p(selector: cypressLib.cypressLibStrings.p, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("contains")
  def contains_p(
    selector: cypressLib.cypressLibStrings.p,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_param(selector: cypressLib.cypressLibStrings.param, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("contains")
  def contains_param(
    selector: cypressLib.cypressLibStrings.param,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("contains")
  def contains_param(selector: cypressLib.cypressLibStrings.param, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("contains")
  def contains_param(
    selector: cypressLib.cypressLibStrings.param,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("contains")
  def contains_param(selector: cypressLib.cypressLibStrings.param, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("contains")
  def contains_param(
    selector: cypressLib.cypressLibStrings.param,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_picture(selector: cypressLib.cypressLibStrings.picture, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("contains")
  def contains_picture(
    selector: cypressLib.cypressLibStrings.picture,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("contains")
  def contains_picture(selector: cypressLib.cypressLibStrings.picture, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("contains")
  def contains_picture(
    selector: cypressLib.cypressLibStrings.picture,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("contains")
  def contains_picture(selector: cypressLib.cypressLibStrings.picture, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("contains")
  def contains_picture(
    selector: cypressLib.cypressLibStrings.picture,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_pre(selector: cypressLib.cypressLibStrings.pre, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("contains")
  def contains_pre(
    selector: cypressLib.cypressLibStrings.pre,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("contains")
  def contains_pre(selector: cypressLib.cypressLibStrings.pre, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("contains")
  def contains_pre(
    selector: cypressLib.cypressLibStrings.pre,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("contains")
  def contains_pre(selector: cypressLib.cypressLibStrings.pre, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("contains")
  def contains_pre(
    selector: cypressLib.cypressLibStrings.pre,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_progress(selector: cypressLib.cypressLibStrings.progress, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("contains")
  def contains_progress(
    selector: cypressLib.cypressLibStrings.progress,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("contains")
  def contains_progress(selector: cypressLib.cypressLibStrings.progress, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("contains")
  def contains_progress(
    selector: cypressLib.cypressLibStrings.progress,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("contains")
  def contains_progress(selector: cypressLib.cypressLibStrings.progress, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("contains")
  def contains_progress(
    selector: cypressLib.cypressLibStrings.progress,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_q(selector: cypressLib.cypressLibStrings.q, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_q(
    selector: cypressLib.cypressLibStrings.q,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_q(selector: cypressLib.cypressLibStrings.q, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_q(
    selector: cypressLib.cypressLibStrings.q,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_q(selector: cypressLib.cypressLibStrings.q, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("contains")
  def contains_q(
    selector: cypressLib.cypressLibStrings.q,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_rt(selector: cypressLib.cypressLibStrings.rt, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_rt(
    selector: cypressLib.cypressLibStrings.rt,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_rt(selector: cypressLib.cypressLibStrings.rt, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_rt(
    selector: cypressLib.cypressLibStrings.rt,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_rt(selector: cypressLib.cypressLibStrings.rt, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_rt(
    selector: cypressLib.cypressLibStrings.rt,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_ruby(selector: cypressLib.cypressLibStrings.ruby, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_ruby(
    selector: cypressLib.cypressLibStrings.ruby,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_ruby(selector: cypressLib.cypressLibStrings.ruby, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_ruby(
    selector: cypressLib.cypressLibStrings.ruby,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_ruby(selector: cypressLib.cypressLibStrings.ruby, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_ruby(
    selector: cypressLib.cypressLibStrings.ruby,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_s(selector: cypressLib.cypressLibStrings.s, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_s(
    selector: cypressLib.cypressLibStrings.s,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_s(selector: cypressLib.cypressLibStrings.s, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_s(
    selector: cypressLib.cypressLibStrings.s,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_s(selector: cypressLib.cypressLibStrings.s, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_s(
    selector: cypressLib.cypressLibStrings.s,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_samp(selector: cypressLib.cypressLibStrings.samp, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_samp(
    selector: cypressLib.cypressLibStrings.samp,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_samp(selector: cypressLib.cypressLibStrings.samp, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_samp(
    selector: cypressLib.cypressLibStrings.samp,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_samp(selector: cypressLib.cypressLibStrings.samp, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_samp(
    selector: cypressLib.cypressLibStrings.samp,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_script(selector: cypressLib.cypressLibStrings.script, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("contains")
  def contains_script(
    selector: cypressLib.cypressLibStrings.script,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("contains")
  def contains_script(selector: cypressLib.cypressLibStrings.script, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("contains")
  def contains_script(
    selector: cypressLib.cypressLibStrings.script,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("contains")
  def contains_script(selector: cypressLib.cypressLibStrings.script, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("contains")
  def contains_script(
    selector: cypressLib.cypressLibStrings.script,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_section(selector: cypressLib.cypressLibStrings.section, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_section(
    selector: cypressLib.cypressLibStrings.section,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_section(selector: cypressLib.cypressLibStrings.section, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_section(
    selector: cypressLib.cypressLibStrings.section,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_section(selector: cypressLib.cypressLibStrings.section, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_section(
    selector: cypressLib.cypressLibStrings.section,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_select(selector: cypressLib.cypressLibStrings.select, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("contains")
  def contains_select(
    selector: cypressLib.cypressLibStrings.select,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("contains")
  def contains_select(selector: cypressLib.cypressLibStrings.select, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("contains")
  def contains_select(
    selector: cypressLib.cypressLibStrings.select,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("contains")
  def contains_select(selector: cypressLib.cypressLibStrings.select, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("contains")
  def contains_select(
    selector: cypressLib.cypressLibStrings.select,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_slot(selector: cypressLib.cypressLibStrings.slot, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("contains")
  def contains_slot(
    selector: cypressLib.cypressLibStrings.slot,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("contains")
  def contains_slot(selector: cypressLib.cypressLibStrings.slot, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("contains")
  def contains_slot(
    selector: cypressLib.cypressLibStrings.slot,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("contains")
  def contains_slot(selector: cypressLib.cypressLibStrings.slot, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("contains")
  def contains_slot(
    selector: cypressLib.cypressLibStrings.slot,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_small(selector: cypressLib.cypressLibStrings.small, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_small(
    selector: cypressLib.cypressLibStrings.small,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_small(selector: cypressLib.cypressLibStrings.small, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_small(
    selector: cypressLib.cypressLibStrings.small,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_small(selector: cypressLib.cypressLibStrings.small, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_small(
    selector: cypressLib.cypressLibStrings.small,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_source(selector: cypressLib.cypressLibStrings.source, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("contains")
  def contains_source(
    selector: cypressLib.cypressLibStrings.source,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("contains")
  def contains_source(selector: cypressLib.cypressLibStrings.source, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("contains")
  def contains_source(
    selector: cypressLib.cypressLibStrings.source,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("contains")
  def contains_source(selector: cypressLib.cypressLibStrings.source, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("contains")
  def contains_source(
    selector: cypressLib.cypressLibStrings.source,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_span(selector: cypressLib.cypressLibStrings.span, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("contains")
  def contains_span(
    selector: cypressLib.cypressLibStrings.span,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("contains")
  def contains_span(selector: cypressLib.cypressLibStrings.span, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("contains")
  def contains_span(
    selector: cypressLib.cypressLibStrings.span,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("contains")
  def contains_span(selector: cypressLib.cypressLibStrings.span, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("contains")
  def contains_span(
    selector: cypressLib.cypressLibStrings.span,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_strong(selector: cypressLib.cypressLibStrings.strong, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_strong(
    selector: cypressLib.cypressLibStrings.strong,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_strong(selector: cypressLib.cypressLibStrings.strong, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_strong(
    selector: cypressLib.cypressLibStrings.strong,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_strong(selector: cypressLib.cypressLibStrings.strong, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_strong(
    selector: cypressLib.cypressLibStrings.strong,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_style(selector: cypressLib.cypressLibStrings.style, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("contains")
  def contains_style(
    selector: cypressLib.cypressLibStrings.style,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("contains")
  def contains_style(selector: cypressLib.cypressLibStrings.style, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("contains")
  def contains_style(
    selector: cypressLib.cypressLibStrings.style,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("contains")
  def contains_style(selector: cypressLib.cypressLibStrings.style, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("contains")
  def contains_style(
    selector: cypressLib.cypressLibStrings.style,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_sub(selector: cypressLib.cypressLibStrings.sub, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_sub(
    selector: cypressLib.cypressLibStrings.sub,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_sub(selector: cypressLib.cypressLibStrings.sub, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_sub(
    selector: cypressLib.cypressLibStrings.sub,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_sub(selector: cypressLib.cypressLibStrings.sub, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_sub(
    selector: cypressLib.cypressLibStrings.sub,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_sup(selector: cypressLib.cypressLibStrings.sup, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_sup(
    selector: cypressLib.cypressLibStrings.sup,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_sup(selector: cypressLib.cypressLibStrings.sup, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_sup(
    selector: cypressLib.cypressLibStrings.sup,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_sup(selector: cypressLib.cypressLibStrings.sup, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_sup(
    selector: cypressLib.cypressLibStrings.sup,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_table(selector: cypressLib.cypressLibStrings.table, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("contains")
  def contains_table(
    selector: cypressLib.cypressLibStrings.table,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("contains")
  def contains_table(selector: cypressLib.cypressLibStrings.table, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("contains")
  def contains_table(
    selector: cypressLib.cypressLibStrings.table,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("contains")
  def contains_table(selector: cypressLib.cypressLibStrings.table, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("contains")
  def contains_table(
    selector: cypressLib.cypressLibStrings.table,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_tbody(selector: cypressLib.cypressLibStrings.tbody, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tbody(
    selector: cypressLib.cypressLibStrings.tbody,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tbody(selector: cypressLib.cypressLibStrings.tbody, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tbody(
    selector: cypressLib.cypressLibStrings.tbody,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tbody(selector: cypressLib.cypressLibStrings.tbody, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tbody(
    selector: cypressLib.cypressLibStrings.tbody,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_td(selector: cypressLib.cypressLibStrings.td, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("contains")
  def contains_td(
    selector: cypressLib.cypressLibStrings.td,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("contains")
  def contains_td(selector: cypressLib.cypressLibStrings.td, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("contains")
  def contains_td(
    selector: cypressLib.cypressLibStrings.td,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("contains")
  def contains_td(selector: cypressLib.cypressLibStrings.td, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("contains")
  def contains_td(
    selector: cypressLib.cypressLibStrings.td,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_template(selector: cypressLib.cypressLibStrings.template, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("contains")
  def contains_template(
    selector: cypressLib.cypressLibStrings.template,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("contains")
  def contains_template(selector: cypressLib.cypressLibStrings.template, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("contains")
  def contains_template(
    selector: cypressLib.cypressLibStrings.template,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("contains")
  def contains_template(selector: cypressLib.cypressLibStrings.template, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("contains")
  def contains_template(
    selector: cypressLib.cypressLibStrings.template,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_textarea(selector: cypressLib.cypressLibStrings.textarea, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("contains")
  def contains_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("contains")
  def contains_textarea(selector: cypressLib.cypressLibStrings.textarea, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("contains")
  def contains_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("contains")
  def contains_textarea(selector: cypressLib.cypressLibStrings.textarea, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("contains")
  def contains_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_tfoot(selector: cypressLib.cypressLibStrings.tfoot, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tfoot(
    selector: cypressLib.cypressLibStrings.tfoot,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tfoot(selector: cypressLib.cypressLibStrings.tfoot, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tfoot(
    selector: cypressLib.cypressLibStrings.tfoot,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tfoot(selector: cypressLib.cypressLibStrings.tfoot, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_tfoot(
    selector: cypressLib.cypressLibStrings.tfoot,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_th(selector: cypressLib.cypressLibStrings.th, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("contains")
  def contains_th(
    selector: cypressLib.cypressLibStrings.th,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("contains")
  def contains_th(selector: cypressLib.cypressLibStrings.th, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("contains")
  def contains_th(
    selector: cypressLib.cypressLibStrings.th,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("contains")
  def contains_th(selector: cypressLib.cypressLibStrings.th, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("contains")
  def contains_th(
    selector: cypressLib.cypressLibStrings.th,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_thead(selector: cypressLib.cypressLibStrings.thead, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_thead(
    selector: cypressLib.cypressLibStrings.thead,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_thead(selector: cypressLib.cypressLibStrings.thead, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_thead(
    selector: cypressLib.cypressLibStrings.thead,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_thead(selector: cypressLib.cypressLibStrings.thead, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("contains")
  def contains_thead(
    selector: cypressLib.cypressLibStrings.thead,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_time(selector: cypressLib.cypressLibStrings.time, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("contains")
  def contains_time(
    selector: cypressLib.cypressLibStrings.time,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("contains")
  def contains_time(selector: cypressLib.cypressLibStrings.time, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("contains")
  def contains_time(
    selector: cypressLib.cypressLibStrings.time,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("contains")
  def contains_time(selector: cypressLib.cypressLibStrings.time, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("contains")
  def contains_time(
    selector: cypressLib.cypressLibStrings.time,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_title(selector: cypressLib.cypressLibStrings.title, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("contains")
  def contains_title(
    selector: cypressLib.cypressLibStrings.title,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("contains")
  def contains_title(selector: cypressLib.cypressLibStrings.title, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("contains")
  def contains_title(
    selector: cypressLib.cypressLibStrings.title,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("contains")
  def contains_title(selector: cypressLib.cypressLibStrings.title, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("contains")
  def contains_title(
    selector: cypressLib.cypressLibStrings.title,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_tr(selector: cypressLib.cypressLibStrings.tr, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("contains")
  def contains_tr(
    selector: cypressLib.cypressLibStrings.tr,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("contains")
  def contains_tr(selector: cypressLib.cypressLibStrings.tr, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("contains")
  def contains_tr(
    selector: cypressLib.cypressLibStrings.tr,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("contains")
  def contains_tr(selector: cypressLib.cypressLibStrings.tr, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("contains")
  def contains_tr(
    selector: cypressLib.cypressLibStrings.tr,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_track(selector: cypressLib.cypressLibStrings.track, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("contains")
  def contains_track(
    selector: cypressLib.cypressLibStrings.track,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("contains")
  def contains_track(selector: cypressLib.cypressLibStrings.track, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("contains")
  def contains_track(
    selector: cypressLib.cypressLibStrings.track,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("contains")
  def contains_track(selector: cypressLib.cypressLibStrings.track, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("contains")
  def contains_track(
    selector: cypressLib.cypressLibStrings.track,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_u(selector: cypressLib.cypressLibStrings.u, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_u(
    selector: cypressLib.cypressLibStrings.u,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_u(selector: cypressLib.cypressLibStrings.u, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_u(
    selector: cypressLib.cypressLibStrings.u,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_u(selector: cypressLib.cypressLibStrings.u, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_u(
    selector: cypressLib.cypressLibStrings.u,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_ul(selector: cypressLib.cypressLibStrings.ul, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("contains")
  def contains_ul(
    selector: cypressLib.cypressLibStrings.ul,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("contains")
  def contains_ul(selector: cypressLib.cypressLibStrings.ul, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("contains")
  def contains_ul(
    selector: cypressLib.cypressLibStrings.ul,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("contains")
  def contains_ul(selector: cypressLib.cypressLibStrings.ul, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("contains")
  def contains_ul(
    selector: cypressLib.cypressLibStrings.ul,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_var(selector: cypressLib.cypressLibStrings.`var`, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_var(
    selector: cypressLib.cypressLibStrings.`var`,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_var(selector: cypressLib.cypressLibStrings.`var`, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_var(
    selector: cypressLib.cypressLibStrings.`var`,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_var(selector: cypressLib.cypressLibStrings.`var`, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_var(
    selector: cypressLib.cypressLibStrings.`var`,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_video(selector: cypressLib.cypressLibStrings.video, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("contains")
  def contains_video(
    selector: cypressLib.cypressLibStrings.video,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("contains")
  def contains_video(selector: cypressLib.cypressLibStrings.video, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("contains")
  def contains_video(
    selector: cypressLib.cypressLibStrings.video,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("contains")
  def contains_video(selector: cypressLib.cypressLibStrings.video, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("contains")
  def contains_video(
    selector: cypressLib.cypressLibStrings.video,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get the DOM element with name "selector" containing the text or regular expression.
    *
    * @see https://on.cypress.io/contains
    * @example
    *    // yields <ul>...</ul>
    *    cy.contains('ul', 'apples')
    */
  @JSName("contains")
  def contains_wbr(selector: cypressLib.cypressLibStrings.wbr, text: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_wbr(
    selector: cypressLib.cypressLibStrings.wbr,
    text: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_wbr(selector: cypressLib.cypressLibStrings.wbr, text: scala.Double): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_wbr(
    selector: cypressLib.cypressLibStrings.wbr,
    text: scala.Double,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_wbr(selector: cypressLib.cypressLibStrings.wbr, text: stdLib.RegExp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("contains")
  def contains_wbr(
    selector: cypressLib.cypressLibStrings.wbr,
    text: stdLib.RegExp,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Double-click a DOM element.
    *
    * @see https://on.cypress.io/dblclick
    */
  def dblclick(): Chainable[_] = js.native
  def dblclick(options: stdLib.Partial[Loggable]): Chainable[_] = js.native
  /**
    * Set a debugger and log what the previous command yields.
    *
    * @see https://on.cypress.io/debug
    */
  def debug(): Chainable[Subject] = js.native
  def debug(options: stdLib.Partial[Loggable]): Chainable[Subject] = js.native
  /**
    * Get the window.document of the page that is currently active.
    *
    * @see https://on.cypress.io/document
    * @example
    *    cy.document()
    *      .its('contentType')
    *      .should('eq', 'text/html')
    */
  def document(): Chainable[stdLib.Document] = js.native
  def document(options: stdLib.Partial[Loggable]): Chainable[stdLib.Document] = js.native
  // Can't properly infer type without breaking down Chainable
  def each(fn: js.Function3[/* item */ js.Any, /* index */ scala.Double, /* $list */ js.Array[_], scala.Unit]): Chainable[Subject] = js.native
  /**
    * Iterate through an array like structure (arrays or objects with a length property).
    *
    * @see https://on.cypress.io/each
    */
  @JSName("each")
  def each_ENode[E /* <: stdLib.Node */](
    fn: js.Function3[
      /* element */ jqueryLib.JQuery[E], 
      /* index */ scala.Double, 
      /* $list */ js.Array[E], 
      scala.Unit
    ]
  ): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * End a chain of commands
    *
    * @see https://on.cypress.io/end
    */
  def end(): Chainable[scala.Null] = js.native
  /**
    * Get A DOM element at a specific index in an array of elements.
    *
    * @see https://on.cypress.io/eq
    * @param {Number} index A number indicating the index to find the element at within an array of elements. A negative number counts index from the end of the list.
    * @example
    *    cy.get('tbody>tr').eq(0)    // Yield first 'tr' in 'tbody'
    *    cy.get('ul>li').eq('4')     // Yield fifth 'li' in 'ul'
    *    cy.get('li').eq(-2) // Yields second from last 'li' element
    */
  def eq[E /* <: stdLib.Node */](index: scala.Double): Chainable[jqueryLib.JQuery[E]] = js.native
  def eq[E /* <: stdLib.Node */](index: scala.Double, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Execute a system command.
    * @see https://on.cypress.io/exec
    */
  def exec(command: java.lang.String): Chainable[Exec] = js.native
  def exec(command: java.lang.String, options: stdLib.Partial[ExecOptions]): Chainable[Exec] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  def filter[E /* <: stdLib.Node */](fn: js.Function2[/* index */ scala.Double, /* element */ E, scala.Boolean]): Chainable[jqueryLib.JQuery[E]] = js.native
  def filter[E /* <: stdLib.Node */](
    fn: js.Function2[/* index */ scala.Double, /* element */ E, scala.Boolean],
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[E]] = js.native
  // automatically returns the correct HTMLElement type
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  def filter[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def filter[E /* <: stdLib.Node */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("filter")
  def filter_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("filter")
  def filter_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("filter")
  def filter_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("filter")
  def filter_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("filter")
  def filter_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("filter")
  def filter_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("filter")
  def filter_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("filter")
  def filter_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("filter")
  def filter_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("filter")
  def filter_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("filter")
  def filter_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("filter")
  def filter_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("filter")
  def filter_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("filter")
  def filter_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("filter")
  def filter_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("filter")
  def filter_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("filter")
  def filter_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("filter")
  def filter_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("filter")
  def filter_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("filter")
  def filter_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("filter")
  def filter_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("filter")
  def filter_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("filter")
  def filter_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("filter")
  def filter_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("filter")
  def filter_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("filter")
  def filter_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("filter")
  def filter_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("filter")
  def filter_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("filter")
  def filter_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("filter")
  def filter_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("filter")
  def filter_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("filter")
  def filter_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("filter")
  def filter_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("filter")
  def filter_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("filter")
  def filter_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("filter")
  def filter_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("filter")
  def filter_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("filter")
  def filter_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("filter")
  def filter_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("filter")
  def filter_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("filter")
  def filter_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("filter")
  def filter_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("filter")
  def filter_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("filter")
  def filter_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("filter")
  def filter_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("filter")
  def filter_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("filter")
  def filter_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("filter")
  def filter_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("filter")
  def filter_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("filter")
  def filter_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("filter")
  def filter_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("filter")
  def filter_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("filter")
  def filter_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("filter")
  def filter_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("filter")
  def filter_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("filter")
  def filter_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("filter")
  def filter_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("filter")
  def filter_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("filter")
  def filter_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("filter")
  def filter_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("filter")
  def filter_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("filter")
  def filter_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("filter")
  def filter_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("filter")
  def filter_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("filter")
  def filter_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("filter")
  def filter_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("filter")
  def filter_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("filter")
  def filter_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("filter")
  def filter_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("filter")
  def filter_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("filter")
  def filter_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("filter")
  def filter_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("filter")
  def filter_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("filter")
  def filter_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("filter")
  def filter_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("filter")
  def filter_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get the DOM elements that match a specific selector. Opposite of `.not()`
    *
    * @see https://on.cypress.io/filter
    */
  @JSName("filter")
  def filter_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("filter")
  def filter_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Finds the descendent DOM elements with the given selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    // Find the li’s within the nav
    *    cy.get('.left-nav>.nav').find('>li')
    */
  def find[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def find[E /* <: stdLib.Node */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("find")
  def find_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("find")
  def find_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("find")
  def find_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("find")
  def find_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("find")
  def find_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("find")
  def find_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("find")
  def find_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("find")
  def find_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("find")
  def find_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("find")
  def find_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("find")
  def find_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("find")
  def find_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("find")
  def find_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("find")
  def find_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("find")
  def find_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("find")
  def find_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("find")
  def find_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("find")
  def find_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("find")
  def find_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("find")
  def find_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("find")
  def find_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("find")
  def find_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("find")
  def find_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("find")
  def find_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("find")
  def find_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("find")
  def find_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("find")
  def find_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("find")
  def find_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("find")
  def find_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("find")
  def find_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("find")
  def find_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("find")
  def find_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("find")
  def find_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("find")
  def find_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("find")
  def find_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("find")
  def find_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("find")
  def find_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("find")
  def find_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("find")
  def find_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("find")
  def find_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("find")
  def find_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("find")
  def find_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("find")
  def find_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("find")
  def find_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("find")
  def find_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("find")
  def find_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("find")
  def find_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("find")
  def find_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("find")
  def find_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("find")
  def find_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("find")
  def find_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("find")
  def find_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("find")
  def find_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("find")
  def find_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("find")
  def find_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("find")
  def find_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("find")
  def find_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("find")
  def find_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("find")
  def find_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("find")
  def find_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("find")
  def find_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("find")
  def find_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("find")
  def find_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("find")
  def find_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("find")
  def find_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("find")
  def find_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("find")
  def find_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("find")
  def find_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("find")
  def find_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("find")
  def find_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("find")
  def find_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("find")
  def find_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("find")
  def find_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("find")
  def find_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("find")
  def find_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("find")
  def find_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get the descendent DOM elements of a specific selector.
    *
    * @see https://on.cypress.io/find
    * @example
    *    cy.get('.article').find('footer') // Yield 'footer' within '.article'
    */
  @JSName("find")
  def find_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("find")
  def find_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the first DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/first
    */
  def first(): Chainable[Subject] = js.native
  def first(options: stdLib.Partial[Loggable with Timeoutable]): Chainable[Subject] = js.native
  /**
    * Load a fixed set of data located in a file.
    *
    * @see https://on.cypress.io/fixture
    */
  def fixture[Contents](path: java.lang.String): Chainable[Contents] = js.native
  // no log?
  /**
    * Load a fixed set of data located in a file with given encoding.
    *
    * @see https://on.cypress.io/fixture
    */
  def fixture[Contents](path: java.lang.String, encoding: Encodings): Chainable[Contents] = js.native
  def fixture[Contents](path: java.lang.String, encoding: Encodings, options: stdLib.Partial[Timeoutable]): Chainable[Contents] = js.native
  def fixture[Contents](path: java.lang.String, options: stdLib.Partial[Timeoutable]): Chainable[Contents] = js.native
  // no log?
  /**
    * Get the DOM element that is currently focused.
    *
    * @see https://on.cypress.io/focus
    */
  def focus(): Chainable[Subject] = js.native
  def focus(options: stdLib.Partial[Loggable with Timeoutable]): Chainable[Subject] = js.native
  /**
    * Get the DOM element that is currently focused.
    *
    * @see https://on.cypress.io/focused
    * @example
    *    // Get the element that is focused
    *    cy.focused().then(function($el) {
    *       // do something with $el
    *    })
    *    // Blur the element with focus
    *    cy.focused().blur()
    *    // Make an assertion on the focused element
    *    cy.focused().should('have.attr', 'name', 'username')
    */
  def focused(): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  def focused(options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by alias.
    * @see https://on.cypress.io/get#Alias
    * @example
    *    // Get the aliased ‘todos’ elements
    *    cy.get('ul#todos').as('todos')
    *    //...hack hack hack...
    *    //later retrieve the todos
    *    cy.get('@todos')
    */
  def get[S](alias: java.lang.String): Chainable[S] = js.native
  def get[S](alias: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[S] = js.native
  /**
    * Get a browser cookie by its name.
    *
    * @see https://on.cypress.io/getcookie
    */
  def getCookie(name: java.lang.String): Chainable[Cookie | scala.Null] = js.native
  def getCookie(name: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[Cookie | scala.Null] = js.native
  /**
    * Get all of the browser cookies.
    *
    * @see https://on.cypress.io/getcookies
    */
  def getCookies(): Chainable[js.Array[Cookie]] = js.native
  def getCookies(options: stdLib.Partial[Loggable with Timeoutable]): Chainable[js.Array[Cookie]] = js.native
  /**
    * Get one or more DOM elements by selector.
    * The querying behavior of this command matches exactly how $(…) works in jQuery.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('.list>li')    // Yield the <li>'s in <.list>
    *    cy.get('ul li:first').should('have.class', 'active')
    *    cy.get('.dropdown-menu').click()
    */
  @JSName("get")
  def get_ENode[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  @JSName("get")
  def get_ENode[E /* <: stdLib.Node */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("get")
  def get_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("get")
  def get_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("get")
  def get_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("get")
  def get_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("get")
  def get_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("get")
  def get_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("get")
  def get_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("get")
  def get_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("get")
  def get_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("get")
  def get_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("get")
  def get_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("get")
  def get_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("get")
  def get_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("get")
  def get_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("get")
  def get_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("get")
  def get_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("get")
  def get_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("get")
  def get_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("get")
  def get_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("get")
  def get_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("get")
  def get_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("get")
  def get_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("get")
  def get_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("get")
  def get_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("get")
  def get_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("get")
  def get_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("get")
  def get_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("get")
  def get_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("get")
  def get_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("get")
  def get_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("get")
  def get_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("get")
  def get_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("get")
  def get_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("get")
  def get_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("get")
  def get_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("get")
  def get_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("get")
  def get_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("get")
  def get_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("get")
  def get_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("get")
  def get_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("get")
  def get_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("get")
  def get_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("get")
  def get_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("get")
  def get_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("get")
  def get_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("get")
  def get_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("get")
  def get_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("get")
  def get_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("get")
  def get_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("get")
  def get_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("get")
  def get_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("get")
  def get_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("get")
  def get_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("get")
  def get_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("get")
  def get_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("get")
  def get_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("get")
  def get_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("get")
  def get_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("get")
  def get_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("get")
  def get_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("get")
  def get_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("get")
  def get_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("get")
  def get_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("get")
  def get_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("get")
  def get_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("get")
  def get_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("get")
  def get_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("get")
  def get_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("get")
  def get_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("get")
  def get_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("get")
  def get_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("get")
  def get_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("get")
  def get_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("get")
  def get_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("get")
  def get_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("get")
  def get_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get one or more DOM elements by node name: input, button, etc.
    * @see https://on.cypress.io/get
    * @example
    *    cy.get('input').should('be.disabled')
    *    cy.get('button').should('be.visible')
    */
  @JSName("get")
  def get_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("get")
  def get_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Navigate back or forward to the previous or next URL in the browser’s history.
    *
    * @see https://on.cypress.io/go
    */
  def go(direction: HistoryDirection): Chainable[mochaLib.Window with stdLib.Window] = js.native
  def go(direction: HistoryDirection, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[mochaLib.Window with stdLib.Window] = js.native
  def go(direction: scala.Double): Chainable[mochaLib.Window with stdLib.Window] = js.native
  def go(direction: scala.Double, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[mochaLib.Window with stdLib.Window] = js.native
  /**
    * Get the current URL hash of the page that is currently active.
    *
    * @see https://on.cypress.io/hash
    */
  def hash(): Chainable[java.lang.String] = js.native
  def hash(options: stdLib.Partial[Loggable]): Chainable[java.lang.String] = js.native
  /**
    * Invoke a function on the previously yielded subject.
    * This isn't possible to strongly type without generic override yet.
    * If called on an object you can do this instead: `.then(s => s.show())`.
    * If called on an array you can do this instead: `.each(s => s.show())`.
    * From there the subject will be properly typed.
    *
    * @see https://on.cypress.io/invoke
    */
  def invoke(functionName: java.lang.String, args: js.Any*): Chainable[Subject] = js.native
  // don't have a way to express return types yet
  /**
    * Get a property’s value on the previously yielded subject.
    *
    * @see https://on.cypress.io/its
    * @example
    *    // Get the 'width' property
    *    cy.wrap({width: '50'}).its('width')
    *    // Drill into nested properties by using dot notation
    *    cy.wrap({foo: {bar: {baz: 1}}}).its('foo.bar.baz')
    */
  def its[K /* <: java.lang.String */](propertyName: K): Chainable[/* import warning: ImportType.apply Failed type conversion: Subject[K] */ js.Any] = js.native
  /**
    * Get the last DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/last
    */
  def last[E /* <: stdLib.Node */](): Chainable[jqueryLib.JQuery[E]] = js.native
  def last[E /* <: stdLib.Node */](options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get the global `window.location` object of the page that is currently active.
    *
    * @see https://on.cypress.io/location
    * @example
    *    cy.location() // Get location object
    */
  def location(): Chainable[stdLib.Location] = js.native
  /**
    * Get a part of the global `window.location` object of the page that is currently active.
    *
    * @see https://on.cypress.io/location
    * @example
    *    cy.location('host') // Get the host of the location object
    *    cy.location('port') // Get the port of the location object
    */
  def location(key: java.lang.String): Chainable[stdLib.Location] = js.native
  def location(key: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[stdLib.Location] = js.native
  def location(options: stdLib.Partial[Loggable with Timeoutable]): Chainable[stdLib.Location] = js.native
  /**
    * Print a message to the Cypress Command Log.
    *
    * @see https://on.cypress.io/log
    */
  def log(message: java.lang.String, args: js.Any*): Chainable[scala.Null] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    * @example
    *    cy.get('nav a:first').next()
    */
  def next[E /* <: stdLib.Node */](): Chainable[jqueryLib.JQuery[E]] = js.native
  def next[E /* <: stdLib.Node */](options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements that match selector
    *
    * @see https://on.cypress.io/next
    * @example
    *    cy.get('nav a:first').next('.menu-item)
    */
  def next[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def next[E /* <: stdLib.Node */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  def nextAll[E /* <: stdLib.HTMLElement */](): Chainable[jqueryLib.JQuery[E]] = js.native
  def nextAll[E /* <: stdLib.HTMLElement */](options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  def nextAll[E /* <: stdLib.HTMLElement */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def nextAll[E /* <: stdLib.HTMLElement */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("nextAll")
  def nextAll_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("nextAll")
  def nextAll_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("nextAll")
  def nextAll_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("nextAll")
  def nextAll_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("nextAll")
  def nextAll_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("nextAll")
  def nextAll_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("nextAll")
  def nextAll_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("nextAll")
  def nextAll_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("nextAll")
  def nextAll_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("nextAll")
  def nextAll_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("nextAll")
  def nextAll_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("nextAll")
  def nextAll_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("nextAll")
  def nextAll_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("nextAll")
  def nextAll_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("nextAll")
  def nextAll_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("nextAll")
  def nextAll_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("nextAll")
  def nextAll_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("nextAll")
  def nextAll_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("nextAll")
  def nextAll_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("nextAll")
  def nextAll_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("nextAll")
  def nextAll_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("nextAll")
  def nextAll_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("nextAll")
  def nextAll_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("nextAll")
  def nextAll_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("nextAll")
  def nextAll_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("nextAll")
  def nextAll_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("nextAll")
  def nextAll_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("nextAll")
  def nextAll_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("nextAll")
  def nextAll_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("nextAll")
  def nextAll_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("nextAll")
  def nextAll_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("nextAll")
  def nextAll_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("nextAll")
  def nextAll_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("nextAll")
  def nextAll_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("nextAll")
  def nextAll_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("nextAll")
  def nextAll_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("nextAll")
  def nextAll_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("nextAll")
  def nextAll_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("nextAll")
  def nextAll_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("nextAll")
  def nextAll_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("nextAll")
  def nextAll_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("nextAll")
  def nextAll_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("nextAll")
  def nextAll_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("nextAll")
  def nextAll_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("nextAll")
  def nextAll_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("nextAll")
  def nextAll_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("nextAll")
  def nextAll_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("nextAll")
  def nextAll_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("nextAll")
  def nextAll_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("nextAll")
  def nextAll_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("nextAll")
  def nextAll_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("nextAll")
  def nextAll_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("nextAll")
  def nextAll_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("nextAll")
  def nextAll_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("nextAll")
  def nextAll_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("nextAll")
  def nextAll_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("nextAll")
  def nextAll_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("nextAll")
  def nextAll_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("nextAll")
  def nextAll_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("nextAll")
  def nextAll_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("nextAll")
  def nextAll_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("nextAll")
  def nextAll_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("nextAll")
  def nextAll_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("nextAll")
  def nextAll_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("nextAll")
  def nextAll_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("nextAll")
  def nextAll_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("nextAll")
  def nextAll_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("nextAll")
  def nextAll_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("nextAll")
  def nextAll_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("nextAll")
  def nextAll_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("nextAll")
  def nextAll_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("nextAll")
  def nextAll_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("nextAll")
  def nextAll_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("nextAll")
  def nextAll_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("nextAll")
  def nextAll_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("nextAll")
  def nextAll_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements.
    *
    * @see https://on.cypress.io/nextall
    */
  @JSName("nextAll")
  def nextAll_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextAll")
  def nextAll_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  def nextUntil[E /* <: stdLib.HTMLElement */](): Chainable[jqueryLib.JQuery[E]] = js.native
  def nextUntil[E /* <: stdLib.HTMLElement */](options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  def nextUntil[E /* <: stdLib.HTMLElement */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def nextUntil[E /* <: stdLib.HTMLElement */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/nextuntil
    */
  @JSName("nextUntil")
  def nextUntil_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("nextUntil")
  def nextUntil_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("next")
  def next_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("next")
  def next_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("next")
  def next_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("next")
  def next_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("next")
  def next_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("next")
  def next_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("next")
  def next_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("next")
  def next_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("next")
  def next_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("next")
  def next_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("next")
  def next_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("next")
  def next_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("next")
  def next_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("next")
  def next_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("next")
  def next_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("next")
  def next_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("next")
  def next_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("next")
  def next_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("next")
  def next_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("next")
  def next_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("next")
  def next_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("next")
  def next_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("next")
  def next_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("next")
  def next_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("next")
  def next_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("next")
  def next_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("next")
  def next_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("next")
  def next_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("next")
  def next_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("next")
  def next_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("next")
  def next_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("next")
  def next_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("next")
  def next_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("next")
  def next_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("next")
  def next_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("next")
  def next_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("next")
  def next_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("next")
  def next_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("next")
  def next_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("next")
  def next_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("next")
  def next_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("next")
  def next_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("next")
  def next_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("next")
  def next_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("next")
  def next_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("next")
  def next_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("next")
  def next_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("next")
  def next_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("next")
  def next_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("next")
  def next_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("next")
  def next_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("next")
  def next_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("next")
  def next_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("next")
  def next_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("next")
  def next_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("next")
  def next_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("next")
  def next_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("next")
  def next_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("next")
  def next_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("next")
  def next_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("next")
  def next_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("next")
  def next_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("next")
  def next_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("next")
  def next_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("next")
  def next_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("next")
  def next_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("next")
  def next_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("next")
  def next_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("next")
  def next_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("next")
  def next_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("next")
  def next_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("next")
  def next_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("next")
  def next_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("next")
  def next_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("next")
  def next_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("next")
  def next_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get the immediately following sibling of each DOM element within a set of DOM elements.
    *
    * @see https://on.cypress.io/next
    */
  @JSName("next")
  def next_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("next")
  def next_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Filter DOM element(s) from a set of DOM elements. Opposite of `.filter()`
    *
    * @see https://on.cypress.io/not
    */
  def not(selector: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  def not(selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Fires when cy finishes running and executing your command. Useful for debugging and understanding how commands are handled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_command:end`(
    action: cypressLib.cypressLibStrings.`command:end`,
    fn: js.Function1[/* command */ CommandQueue, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when a cy command is first invoked and enqueued to be run later. Useful for debugging purposes if you're confused about the order in which commands will execute.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_command:enqueued`(
    action: cypressLib.cypressLibStrings.`command:enqueued`,
    fn: js.Function1[/* command */ EnqueuedCommand, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires whenever a command begins its retrying routines. This is called on the trailing edge after Cypress has internally waited for the retry interval. Useful to understand **why** a command is retrying, and generally includes the actual error causing the retry to happen. When commands fail the final error is the one that actually bubbles up to fail the test. This event is essentially to debug why Cypress is failing.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_command:retry`(
    action: cypressLib.cypressLibStrings.`command:retry`,
    fn: js.Function1[/* command */ CommandQueue, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when cy begins actually running and executing your command. Useful for debugging and understanding how the command queue is async.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_command:start`(
    action: cypressLib.cypressLibStrings.`command:start`,
    fn: js.Function1[/* command */ CommandQueue, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when the test has failed. It is technically possible to prevent the test from actually failing by binding to this event and invoking an async `done` callback. However this is **strongly discouraged**. Tests should never legitimately fail. This event exists because it's extremely useful for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_fail(
    action: cypressLib.cypressLibStrings.fail,
    fn: js.Function2[
      /* error */ nodeLib.Error with stdLib.Error, 
      /* mocha */ mochaLib.MochaNs.IRunnable, 
      scala.Unit
    ]
  ): scala.Unit = js.native
  /**
    * Fires whenever a command emits this event so it can be displayed in the Command Log. Useful to see how internal cypress commands utilize the {% url 'Cypress.log()' cypress-log %} API.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_log:added`(
    action: cypressLib.cypressLibStrings.`log:added`,
    fn: js.Function2[/* log */ js.Any, /* interactive */ scala.Boolean, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires whenever a command's attributes changes. This event is debounced to prevent it from firing too quickly and too often. Useful to see how internal cypress commands utilize the {% url 'Cypress.log()' cypress-log %} API.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_log:changed`(
    action: cypressLib.cypressLibStrings.`log:changed`,
    fn: js.Function2[/* log */ js.Any, /* interactive */ scala.Boolean, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires whenever **Cypress** is scrolling your application. This event is fired when Cypress is {% url 'waiting for and calculating actionability' interacting-with-elements %}. It will scroll to 'uncover' elements currently being covered. This event is extremely useful to debug why Cypress may think an element is not interactive.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def off_scrolled(
    action: cypressLib.cypressLibStrings.scrolled,
    fn: js.Function1[/* $el */ jqueryLib.JQuery[stdLib.HTMLElement], scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires after the test and all **afterEach** and **after** hooks run.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_test:after:run`(
    action: cypressLib.cypressLibStrings.`test:after:run`,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ mochaLib.MochaNs.ITest, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires before the test and all **before** and **beforeEach** hooks run.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_test:before:run`(
    action: cypressLib.cypressLibStrings.`test:before:run`,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ mochaLib.MochaNs.ITest, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when an uncaught exception occurs in your application.
    * Cypress will fail the test when this fires.
    * Return `false` from this event and Cypress will not fail the test. Also useful for debugging purposes because the actual `error` instance is provided to you.
    * @example
    * // likely want to do this in a support file
    * // so it's applied to all spec files
    * // cypress/support/index.js
    *
    * Cypress.on('uncaught:exception', (err, runnable) => {
    *   // returning false here prevents Cypress from
    *   // failing the test
    *   return false
    * })
    * // stub "window.alert" in a single test
    * it('shows alert', () => {
    *    const stub = cy.stub()
    *    cy.on('window:alert', stub)
    *    // trigger application code that calls alert(...)
    *    .then(() => {
    *      expect(stub).to.have.been.calledOnce
    *    })
    * })
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_uncaught:exception`(
    action: cypressLib.cypressLibStrings.`uncaught:exception`,
    fn: js.Function2[
      /* error */ nodeLib.Error with stdLib.Error, 
      /* runnable */ mochaLib.MochaNs.IRunnable, 
      cypressLib.cypressLibNumbers.`false` | scala.Unit
    ]
  ): scala.Unit = js.native
  /**
    * Fires whenever Cypress detects that your application's URL has changed.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_url:changed`(
    action: cypressLib.cypressLibStrings.`url:changed`,
    fn: js.Function1[/* url */ java.lang.String, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires whenever the viewport changes via a `cy.viewport()` or naturally when Cypress resets the viewport to the default between tests. Useful for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_viewport:changed`(
    action: cypressLib.cypressLibStrings.`viewport:changed`,
    fn: js.Function1[/* viewport */ Viewport, scala.Unit]
  ): scala.Unit = js.native
  @JSName("off")
  def `off_window:alert`(action: cypressLib.cypressLibStrings.`window:alert`, fn: Agent[sinonLib.sinonMod.SinonNs.SinonSpy]): scala.Unit = js.native
  /**
    * Fires when your app calls the global `window.alert()` method.
    * Cypress will auto accept alerts. You cannot change this behavior.
    * @example
    *    const stub = cy.stub()
    *    cy.on('window:alert', stub)
    *    // assume the button calls window.alert()
    *    cy.get('.my-button').click()
    *    .then(() => {
    *      expect(stub).to.have.been.calledOnce
    *    })
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_window:alert`(
    action: cypressLib.cypressLibStrings.`window:alert`,
    fn: js.Function1[/* text */ java.lang.String, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires as the page begins to load, but before any of your applications JavaScript has executed. This fires at the exact same time as `cy.visit()` `onBeforeLoad` callback. Useful to modify the window on a page transition.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_window:before:load`(
    action: cypressLib.cypressLibStrings.`window:before:load`,
    fn: js.Function1[/* win */ mochaLib.Window with stdLib.Window, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when your application is about to navigate away. The real event object is provided to you. Your app may have set a `returnValue` on the event, which is useful to assert on.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_window:before:unload`(
    action: cypressLib.cypressLibStrings.`window:before:unload`,
    fn: js.Function1[/* event */ stdLib.BeforeUnloadEvent, scala.Unit]
  ): scala.Unit = js.native
  @JSName("off")
  def `off_window:confirm`(
    action: cypressLib.cypressLibStrings.`window:confirm`,
    fn: Agent[sinonLib.sinonMod.SinonNs.SinonSpy]
  ): scala.Unit = js.native
  /**
    * Fires when your app calls the global `window.confirm()` method.
    * Cypress will auto accept confirmations. Return `false` from this event and the confirmation will be cancelled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    * @example
    *    cy.on('window:confirm', (str) => {
    *      console.log(str)
    *      return false // simulate "Cancel"
    *    })
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_window:confirm`(
    action: cypressLib.cypressLibStrings.`window:confirm`,
    fn: js.Function1[/* text */ java.lang.String, cypressLib.cypressLibNumbers.`false` | scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires after all your resources have finished loading after a page transition. This fires at the exact same time as a `cy.visit()` `onLoad` callback.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_window:load`(
    action: cypressLib.cypressLibStrings.`window:load`,
    fn: js.Function1[/* win */ mochaLib.Window with stdLib.Window, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when your application is has unloaded and is navigating away. The real event object is provided to you. This event is not cancelable.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("off")
  def `off_window:unload`(
    action: cypressLib.cypressLibStrings.`window:unload`,
    fn: js.Function1[/* event */ stdLib.Event, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when cy finishes running and executing your command. Useful for debugging and understanding how commands are handled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_command:end`(
    action: cypressLib.cypressLibStrings.`command:end`,
    fn: js.Function1[/* command */ CommandQueue, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when a cy command is first invoked and enqueued to be run later. Useful for debugging purposes if you're confused about the order in which commands will execute.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_command:enqueued`(
    action: cypressLib.cypressLibStrings.`command:enqueued`,
    fn: js.Function1[/* command */ EnqueuedCommand, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires whenever a command begins its retrying routines. This is called on the trailing edge after Cypress has internally waited for the retry interval. Useful to understand **why** a command is retrying, and generally includes the actual error causing the retry to happen. When commands fail the final error is the one that actually bubbles up to fail the test. This event is essentially to debug why Cypress is failing.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_command:retry`(
    action: cypressLib.cypressLibStrings.`command:retry`,
    fn: js.Function1[/* command */ CommandQueue, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when cy begins actually running and executing your command. Useful for debugging and understanding how the command queue is async.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_command:start`(
    action: cypressLib.cypressLibStrings.`command:start`,
    fn: js.Function1[/* command */ CommandQueue, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when the test has failed. It is technically possible to prevent the test from actually failing by binding to this event and invoking an async `done` callback. However this is **strongly discouraged**. Tests should never legitimately fail. This event exists because it's extremely useful for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_fail(
    action: cypressLib.cypressLibStrings.fail,
    fn: js.Function2[
      /* error */ nodeLib.Error with stdLib.Error, 
      /* mocha */ mochaLib.MochaNs.IRunnable, 
      scala.Unit
    ]
  ): scala.Unit = js.native
  /**
    * Fires whenever a command emits this event so it can be displayed in the Command Log. Useful to see how internal cypress commands utilize the {% url 'Cypress.log()' cypress-log %} API.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_log:added`(
    action: cypressLib.cypressLibStrings.`log:added`,
    fn: js.Function2[/* log */ js.Any, /* interactive */ scala.Boolean, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires whenever a command's attributes changes. This event is debounced to prevent it from firing too quickly and too often. Useful to see how internal cypress commands utilize the {% url 'Cypress.log()' cypress-log %} API.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_log:changed`(
    action: cypressLib.cypressLibStrings.`log:changed`,
    fn: js.Function2[/* log */ js.Any, /* interactive */ scala.Boolean, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires whenever **Cypress** is scrolling your application. This event is fired when Cypress is {% url 'waiting for and calculating actionability' interacting-with-elements %}. It will scroll to 'uncover' elements currently being covered. This event is extremely useful to debug why Cypress may think an element is not interactive.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def on_scrolled(
    action: cypressLib.cypressLibStrings.scrolled,
    fn: js.Function1[/* $el */ jqueryLib.JQuery[stdLib.HTMLElement], scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires after the test and all **afterEach** and **after** hooks run.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_test:after:run`(
    action: cypressLib.cypressLibStrings.`test:after:run`,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ mochaLib.MochaNs.ITest, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires before the test and all **before** and **beforeEach** hooks run.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_test:before:run`(
    action: cypressLib.cypressLibStrings.`test:before:run`,
    fn: js.Function2[/* attributes */ ObjectLike, /* test */ mochaLib.MochaNs.ITest, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when an uncaught exception occurs in your application.
    * Cypress will fail the test when this fires.
    * Return `false` from this event and Cypress will not fail the test. Also useful for debugging purposes because the actual `error` instance is provided to you.
    * @example
    * // likely want to do this in a support file
    * // so it's applied to all spec files
    * // cypress/support/index.js
    *
    * Cypress.on('uncaught:exception', (err, runnable) => {
    *   // returning false here prevents Cypress from
    *   // failing the test
    *   return false
    * })
    * // stub "window.alert" in a single test
    * it('shows alert', () => {
    *    const stub = cy.stub()
    *    cy.on('window:alert', stub)
    *    // trigger application code that calls alert(...)
    *    .then(() => {
    *      expect(stub).to.have.been.calledOnce
    *    })
    * })
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_uncaught:exception`(
    action: cypressLib.cypressLibStrings.`uncaught:exception`,
    fn: js.Function2[
      /* error */ nodeLib.Error with stdLib.Error, 
      /* runnable */ mochaLib.MochaNs.IRunnable, 
      cypressLib.cypressLibNumbers.`false` | scala.Unit
    ]
  ): scala.Unit = js.native
  /**
    * Fires whenever Cypress detects that your application's URL has changed.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_url:changed`(
    action: cypressLib.cypressLibStrings.`url:changed`,
    fn: js.Function1[/* url */ java.lang.String, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires whenever the viewport changes via a `cy.viewport()` or naturally when Cypress resets the viewport to the default between tests. Useful for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_viewport:changed`(
    action: cypressLib.cypressLibStrings.`viewport:changed`,
    fn: js.Function1[/* viewport */ Viewport, scala.Unit]
  ): scala.Unit = js.native
  @JSName("on")
  def `on_window:alert`(action: cypressLib.cypressLibStrings.`window:alert`, fn: Agent[sinonLib.sinonMod.SinonNs.SinonSpy]): scala.Unit = js.native
  /**
    * Fires when your app calls the global `window.alert()` method.
    * Cypress will auto accept alerts. You cannot change this behavior.
    * @example
    *    const stub = cy.stub()
    *    cy.on('window:alert', stub)
    *    // assume the button calls window.alert()
    *    cy.get('.my-button').click()
    *    .then(() => {
    *      expect(stub).to.have.been.calledOnce
    *    })
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_window:alert`(
    action: cypressLib.cypressLibStrings.`window:alert`,
    fn: js.Function1[/* text */ java.lang.String, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires as the page begins to load, but before any of your applications JavaScript has executed. This fires at the exact same time as `cy.visit()` `onBeforeLoad` callback. Useful to modify the window on a page transition.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_window:before:load`(
    action: cypressLib.cypressLibStrings.`window:before:load`,
    fn: js.Function1[/* win */ mochaLib.Window with stdLib.Window, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when your application is about to navigate away. The real event object is provided to you. Your app may have set a `returnValue` on the event, which is useful to assert on.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_window:before:unload`(
    action: cypressLib.cypressLibStrings.`window:before:unload`,
    fn: js.Function1[/* event */ stdLib.BeforeUnloadEvent, scala.Unit]
  ): scala.Unit = js.native
  @JSName("on")
  def `on_window:confirm`(
    action: cypressLib.cypressLibStrings.`window:confirm`,
    fn: Agent[sinonLib.sinonMod.SinonNs.SinonSpy]
  ): scala.Unit = js.native
  /**
    * Fires when your app calls the global `window.confirm()` method.
    * Cypress will auto accept confirmations. Return `false` from this event and the confirmation will be cancelled.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    * @example
    *    cy.on('window:confirm', (str) => {
    *      console.log(str)
    *      return false // simulate "Cancel"
    *    })
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_window:confirm`(
    action: cypressLib.cypressLibStrings.`window:confirm`,
    fn: js.Function1[/* text */ java.lang.String, cypressLib.cypressLibNumbers.`false` | scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires after all your resources have finished loading after a page transition. This fires at the exact same time as a `cy.visit()` `onLoad` callback.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_window:load`(
    action: cypressLib.cypressLibStrings.`window:load`,
    fn: js.Function1[/* win */ mochaLib.Window with stdLib.Window, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Fires when your application is has unloaded and is navigating away. The real event object is provided to you. This event is not cancelable.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  /**
    * These events come from Cypress as it issues commands and reacts to their state. These are all useful to listen to for debugging purposes.
    * @see https://on.cypress.io/catalog-of-events#App-Events
    */
  @JSName("on")
  def `on_window:unload`(
    action: cypressLib.cypressLibStrings.`window:unload`,
    fn: js.Function1[/* event */ stdLib.Event, scala.Unit]
  ): scala.Unit = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  def parent[E /* <: stdLib.Node */](): Chainable[jqueryLib.JQuery[E]] = js.native
  def parent[E /* <: stdLib.Node */](options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  def parent[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def parent[E /* <: stdLib.Node */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("parent")
  def parent_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("parent")
  def parent_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("parent")
  def parent_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("parent")
  def parent_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("parent")
  def parent_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("parent")
  def parent_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("parent")
  def parent_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("parent")
  def parent_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("parent")
  def parent_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("parent")
  def parent_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("parent")
  def parent_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("parent")
  def parent_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("parent")
  def parent_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("parent")
  def parent_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("parent")
  def parent_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("parent")
  def parent_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("parent")
  def parent_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("parent")
  def parent_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("parent")
  def parent_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("parent")
  def parent_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("parent")
  def parent_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("parent")
  def parent_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("parent")
  def parent_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("parent")
  def parent_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("parent")
  def parent_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("parent")
  def parent_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("parent")
  def parent_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("parent")
  def parent_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parent")
  def parent_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("parent")
  def parent_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("parent")
  def parent_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("parent")
  def parent_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("parent")
  def parent_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("parent")
  def parent_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("parent")
  def parent_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("parent")
  def parent_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("parent")
  def parent_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("parent")
  def parent_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("parent")
  def parent_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("parent")
  def parent_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("parent")
  def parent_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("parent")
  def parent_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("parent")
  def parent_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("parent")
  def parent_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("parent")
  def parent_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("parent")
  def parent_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("parent")
  def parent_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("parent")
  def parent_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("parent")
  def parent_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("parent")
  def parent_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("parent")
  def parent_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("parent")
  def parent_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("parent")
  def parent_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("parent")
  def parent_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("parent")
  def parent_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("parent")
  def parent_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("parent")
  def parent_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("parent")
  def parent_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("parent")
  def parent_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("parent")
  def parent_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("parent")
  def parent_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("parent")
  def parent_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("parent")
  def parent_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("parent")
  def parent_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("parent")
  def parent_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("parent")
  def parent_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("parent")
  def parent_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("parent")
  def parent_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("parent")
  def parent_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("parent")
  def parent_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("parent")
  def parent_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("parent")
  def parent_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("parent")
  def parent_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("parent")
  def parent_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("parent")
  def parent_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("parent")
  def parent_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get the parent DOM element of a set of DOM elements.
    *
    * @see https://on.cypress.io/parent
    */
  @JSName("parent")
  def parent_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parent")
  def parent_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  def parents[E /* <: stdLib.Node */](): Chainable[jqueryLib.JQuery[E]] = js.native
  def parents[E /* <: stdLib.Node */](options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  def parents[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def parents[E /* <: stdLib.Node */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  def parentsUntil[E /* <: stdLib.Node */](element: E): Chainable[jqueryLib.JQuery[E]] = js.native
  def parentsUntil[E /* <: stdLib.Node */](element: E, filter: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def parentsUntil[E /* <: stdLib.Node */](element: E, filter: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  def parentsUntil[E /* <: stdLib.Node */](element: jqueryLib.JQuery[E]): Chainable[jqueryLib.JQuery[E]] = js.native
  def parentsUntil[E /* <: stdLib.Node */](element: jqueryLib.JQuery[E], filter: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def parentsUntil[E /* <: stdLib.Node */](
    element: jqueryLib.JQuery[E],
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  def parentsUntil[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def parentsUntil[E /* <: stdLib.Node */](selector: java.lang.String, filter: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def parentsUntil[E /* <: stdLib.Node */](
    selector: java.lang.String,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_a(selector: cypressLib.cypressLibStrings.a, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_a(
    selector: cypressLib.cypressLibStrings.a,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_abbr(selector: cypressLib.cypressLibStrings.abbr, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_abbr(
    selector: cypressLib.cypressLibStrings.abbr,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_address(selector: cypressLib.cypressLibStrings.address, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_address(
    selector: cypressLib.cypressLibStrings.address,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_applet(selector: cypressLib.cypressLibStrings.applet, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_applet(
    selector: cypressLib.cypressLibStrings.applet,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_area(selector: cypressLib.cypressLibStrings.area, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_area(
    selector: cypressLib.cypressLibStrings.area,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_article(selector: cypressLib.cypressLibStrings.article, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_article(
    selector: cypressLib.cypressLibStrings.article,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_aside(selector: cypressLib.cypressLibStrings.aside, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_aside(
    selector: cypressLib.cypressLibStrings.aside,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_audio(selector: cypressLib.cypressLibStrings.audio, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_audio(
    selector: cypressLib.cypressLibStrings.audio,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_b(selector: cypressLib.cypressLibStrings.b, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_b(
    selector: cypressLib.cypressLibStrings.b,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_base(selector: cypressLib.cypressLibStrings.base, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_base(
    selector: cypressLib.cypressLibStrings.base,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_basefont(selector: cypressLib.cypressLibStrings.basefont, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_bdo(selector: cypressLib.cypressLibStrings.bdo, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_bdo(
    selector: cypressLib.cypressLibStrings.bdo,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_blockquote(selector: cypressLib.cypressLibStrings.blockquote, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_body(selector: cypressLib.cypressLibStrings.body, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_body(
    selector: cypressLib.cypressLibStrings.body,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_br(selector: cypressLib.cypressLibStrings.br, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_br(
    selector: cypressLib.cypressLibStrings.br,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_button(selector: cypressLib.cypressLibStrings.button, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_button(
    selector: cypressLib.cypressLibStrings.button,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_canvas(selector: cypressLib.cypressLibStrings.canvas, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_canvas(
    selector: cypressLib.cypressLibStrings.canvas,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_caption(selector: cypressLib.cypressLibStrings.caption, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_caption(
    selector: cypressLib.cypressLibStrings.caption,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_cite(selector: cypressLib.cypressLibStrings.cite, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_cite(
    selector: cypressLib.cypressLibStrings.cite,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_code(selector: cypressLib.cypressLibStrings.code, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_code(
    selector: cypressLib.cypressLibStrings.code,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_col(selector: cypressLib.cypressLibStrings.col, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_col(
    selector: cypressLib.cypressLibStrings.col,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_colgroup(selector: cypressLib.cypressLibStrings.colgroup, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_data(selector: cypressLib.cypressLibStrings.data, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_data(
    selector: cypressLib.cypressLibStrings.data,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_datalist(selector: cypressLib.cypressLibStrings.datalist, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dd(selector: cypressLib.cypressLibStrings.dd, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dd(
    selector: cypressLib.cypressLibStrings.dd,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_del(selector: cypressLib.cypressLibStrings.del, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_del(
    selector: cypressLib.cypressLibStrings.del,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_details(selector: cypressLib.cypressLibStrings.details, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_details(
    selector: cypressLib.cypressLibStrings.details,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dfn(selector: cypressLib.cypressLibStrings.dfn, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dfn(
    selector: cypressLib.cypressLibStrings.dfn,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dialog(selector: cypressLib.cypressLibStrings.dialog, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dialog(
    selector: cypressLib.cypressLibStrings.dialog,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dir(selector: cypressLib.cypressLibStrings.dir, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dir(
    selector: cypressLib.cypressLibStrings.dir,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_div(selector: cypressLib.cypressLibStrings.div, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_div(
    selector: cypressLib.cypressLibStrings.div,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dl(selector: cypressLib.cypressLibStrings.dl, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dl(
    selector: cypressLib.cypressLibStrings.dl,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dt(selector: cypressLib.cypressLibStrings.dt, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_dt(
    selector: cypressLib.cypressLibStrings.dt,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_em(selector: cypressLib.cypressLibStrings.em, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_em(
    selector: cypressLib.cypressLibStrings.em,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_embed(selector: cypressLib.cypressLibStrings.embed, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_embed(
    selector: cypressLib.cypressLibStrings.embed,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_fieldset(selector: cypressLib.cypressLibStrings.fieldset, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_figcaption(selector: cypressLib.cypressLibStrings.figcaption, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_figure(selector: cypressLib.cypressLibStrings.figure, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_figure(
    selector: cypressLib.cypressLibStrings.figure,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_font(selector: cypressLib.cypressLibStrings.font, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_font(
    selector: cypressLib.cypressLibStrings.font,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_footer(selector: cypressLib.cypressLibStrings.footer, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_footer(
    selector: cypressLib.cypressLibStrings.footer,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_form(selector: cypressLib.cypressLibStrings.form, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_form(
    selector: cypressLib.cypressLibStrings.form,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_frame(selector: cypressLib.cypressLibStrings.frame, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_frame(
    selector: cypressLib.cypressLibStrings.frame,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_frameset(selector: cypressLib.cypressLibStrings.frameset, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h1(selector: cypressLib.cypressLibStrings.h1, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h1(
    selector: cypressLib.cypressLibStrings.h1,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h2(selector: cypressLib.cypressLibStrings.h2, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h2(
    selector: cypressLib.cypressLibStrings.h2,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h3(selector: cypressLib.cypressLibStrings.h3, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h3(
    selector: cypressLib.cypressLibStrings.h3,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h4(selector: cypressLib.cypressLibStrings.h4, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h4(
    selector: cypressLib.cypressLibStrings.h4,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h5(selector: cypressLib.cypressLibStrings.h5, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h5(
    selector: cypressLib.cypressLibStrings.h5,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h6(selector: cypressLib.cypressLibStrings.h6, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_h6(
    selector: cypressLib.cypressLibStrings.h6,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_head(selector: cypressLib.cypressLibStrings.head, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_head(
    selector: cypressLib.cypressLibStrings.head,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_header(selector: cypressLib.cypressLibStrings.header, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_header(
    selector: cypressLib.cypressLibStrings.header,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_hgroup(selector: cypressLib.cypressLibStrings.hgroup, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_hgroup(
    selector: cypressLib.cypressLibStrings.hgroup,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_hr(selector: cypressLib.cypressLibStrings.hr, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_hr(
    selector: cypressLib.cypressLibStrings.hr,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_html(selector: cypressLib.cypressLibStrings.html, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_html(
    selector: cypressLib.cypressLibStrings.html,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_i(selector: cypressLib.cypressLibStrings.i, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_i(
    selector: cypressLib.cypressLibStrings.i,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_iframe(selector: cypressLib.cypressLibStrings.iframe, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_iframe(
    selector: cypressLib.cypressLibStrings.iframe,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_img(selector: cypressLib.cypressLibStrings.img, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_img(
    selector: cypressLib.cypressLibStrings.img,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_input(selector: cypressLib.cypressLibStrings.input, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_input(
    selector: cypressLib.cypressLibStrings.input,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ins(selector: cypressLib.cypressLibStrings.ins, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ins(
    selector: cypressLib.cypressLibStrings.ins,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_kbd(selector: cypressLib.cypressLibStrings.kbd, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_kbd(
    selector: cypressLib.cypressLibStrings.kbd,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_label(selector: cypressLib.cypressLibStrings.label, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_label(
    selector: cypressLib.cypressLibStrings.label,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_legend(selector: cypressLib.cypressLibStrings.legend, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_legend(
    selector: cypressLib.cypressLibStrings.legend,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_li(selector: cypressLib.cypressLibStrings.li, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_li(
    selector: cypressLib.cypressLibStrings.li,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_link(selector: cypressLib.cypressLibStrings.link, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_link(
    selector: cypressLib.cypressLibStrings.link,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_map(selector: cypressLib.cypressLibStrings.map, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_map(
    selector: cypressLib.cypressLibStrings.map,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_mark(selector: cypressLib.cypressLibStrings.mark, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_mark(
    selector: cypressLib.cypressLibStrings.mark,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_marquee(selector: cypressLib.cypressLibStrings.marquee, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_marquee(
    selector: cypressLib.cypressLibStrings.marquee,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_menu(selector: cypressLib.cypressLibStrings.menu, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_menu(
    selector: cypressLib.cypressLibStrings.menu,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_meta(selector: cypressLib.cypressLibStrings.meta, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_meta(
    selector: cypressLib.cypressLibStrings.meta,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_meter(selector: cypressLib.cypressLibStrings.meter, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_meter(
    selector: cypressLib.cypressLibStrings.meter,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_nav(selector: cypressLib.cypressLibStrings.nav, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_nav(
    selector: cypressLib.cypressLibStrings.nav,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_noscript(selector: cypressLib.cypressLibStrings.noscript, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_object(selector: cypressLib.cypressLibStrings.`object`, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_object(
    selector: cypressLib.cypressLibStrings.`object`,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ol(selector: cypressLib.cypressLibStrings.ol, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ol(
    selector: cypressLib.cypressLibStrings.ol,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_optgroup(selector: cypressLib.cypressLibStrings.optgroup, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_option(selector: cypressLib.cypressLibStrings.option, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_option(
    selector: cypressLib.cypressLibStrings.option,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_output(selector: cypressLib.cypressLibStrings.output, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_output(
    selector: cypressLib.cypressLibStrings.output,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_p(selector: cypressLib.cypressLibStrings.p, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_p(
    selector: cypressLib.cypressLibStrings.p,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_param(selector: cypressLib.cypressLibStrings.param, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_param(
    selector: cypressLib.cypressLibStrings.param,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_picture(selector: cypressLib.cypressLibStrings.picture, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_picture(
    selector: cypressLib.cypressLibStrings.picture,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_pre(selector: cypressLib.cypressLibStrings.pre, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_pre(
    selector: cypressLib.cypressLibStrings.pre,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_progress(selector: cypressLib.cypressLibStrings.progress, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_progress(
    selector: cypressLib.cypressLibStrings.progress,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_q(selector: cypressLib.cypressLibStrings.q, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_q(
    selector: cypressLib.cypressLibStrings.q,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_rt(selector: cypressLib.cypressLibStrings.rt, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_rt(
    selector: cypressLib.cypressLibStrings.rt,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ruby(selector: cypressLib.cypressLibStrings.ruby, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ruby(
    selector: cypressLib.cypressLibStrings.ruby,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_s(selector: cypressLib.cypressLibStrings.s, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_s(
    selector: cypressLib.cypressLibStrings.s,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_samp(selector: cypressLib.cypressLibStrings.samp, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_samp(
    selector: cypressLib.cypressLibStrings.samp,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_script(selector: cypressLib.cypressLibStrings.script, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_script(
    selector: cypressLib.cypressLibStrings.script,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_section(selector: cypressLib.cypressLibStrings.section, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_section(
    selector: cypressLib.cypressLibStrings.section,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_select(selector: cypressLib.cypressLibStrings.select, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_select(
    selector: cypressLib.cypressLibStrings.select,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_slot(selector: cypressLib.cypressLibStrings.slot, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_slot(
    selector: cypressLib.cypressLibStrings.slot,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_small(selector: cypressLib.cypressLibStrings.small, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_small(
    selector: cypressLib.cypressLibStrings.small,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_source(selector: cypressLib.cypressLibStrings.source, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_source(
    selector: cypressLib.cypressLibStrings.source,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_span(selector: cypressLib.cypressLibStrings.span, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_span(
    selector: cypressLib.cypressLibStrings.span,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_strong(selector: cypressLib.cypressLibStrings.strong, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_strong(
    selector: cypressLib.cypressLibStrings.strong,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_style(selector: cypressLib.cypressLibStrings.style, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_style(
    selector: cypressLib.cypressLibStrings.style,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_sub(selector: cypressLib.cypressLibStrings.sub, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_sub(
    selector: cypressLib.cypressLibStrings.sub,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_sup(selector: cypressLib.cypressLibStrings.sup, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_sup(
    selector: cypressLib.cypressLibStrings.sup,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_table(selector: cypressLib.cypressLibStrings.table, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_table(
    selector: cypressLib.cypressLibStrings.table,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tbody(selector: cypressLib.cypressLibStrings.tbody, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tbody(
    selector: cypressLib.cypressLibStrings.tbody,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_td(selector: cypressLib.cypressLibStrings.td, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_td(
    selector: cypressLib.cypressLibStrings.td,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_template(selector: cypressLib.cypressLibStrings.template, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_template(
    selector: cypressLib.cypressLibStrings.template,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_textarea(selector: cypressLib.cypressLibStrings.textarea, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tfoot(selector: cypressLib.cypressLibStrings.tfoot, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tfoot(
    selector: cypressLib.cypressLibStrings.tfoot,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_th(selector: cypressLib.cypressLibStrings.th, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_th(
    selector: cypressLib.cypressLibStrings.th,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_thead(selector: cypressLib.cypressLibStrings.thead, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_thead(
    selector: cypressLib.cypressLibStrings.thead,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_time(selector: cypressLib.cypressLibStrings.time, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_time(
    selector: cypressLib.cypressLibStrings.time,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_title(selector: cypressLib.cypressLibStrings.title, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_title(
    selector: cypressLib.cypressLibStrings.title,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tr(selector: cypressLib.cypressLibStrings.tr, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_tr(
    selector: cypressLib.cypressLibStrings.tr,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_track(selector: cypressLib.cypressLibStrings.track, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_track(
    selector: cypressLib.cypressLibStrings.track,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_u(selector: cypressLib.cypressLibStrings.u, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_u(
    selector: cypressLib.cypressLibStrings.u,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ul(selector: cypressLib.cypressLibStrings.ul, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_ul(
    selector: cypressLib.cypressLibStrings.ul,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_var(selector: cypressLib.cypressLibStrings.`var`, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_var(
    selector: cypressLib.cypressLibStrings.`var`,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_video(selector: cypressLib.cypressLibStrings.video, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_video(
    selector: cypressLib.cypressLibStrings.video,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get all ancestors of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    *
    * @see https://on.cypress.io/parentsuntil
    */
  @JSName("parentsUntil")
  def parentsUntil_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_wbr(selector: cypressLib.cypressLibStrings.wbr, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parentsUntil")
  def parentsUntil_wbr(
    selector: cypressLib.cypressLibStrings.wbr,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("parents")
  def parents_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("parents")
  def parents_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("parents")
  def parents_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("parents")
  def parents_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("parents")
  def parents_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("parents")
  def parents_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("parents")
  def parents_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("parents")
  def parents_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("parents")
  def parents_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("parents")
  def parents_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("parents")
  def parents_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("parents")
  def parents_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("parents")
  def parents_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("parents")
  def parents_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("parents")
  def parents_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("parents")
  def parents_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("parents")
  def parents_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("parents")
  def parents_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("parents")
  def parents_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("parents")
  def parents_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("parents")
  def parents_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("parents")
  def parents_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("parents")
  def parents_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("parents")
  def parents_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("parents")
  def parents_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("parents")
  def parents_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("parents")
  def parents_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("parents")
  def parents_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("parents")
  def parents_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("parents")
  def parents_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("parents")
  def parents_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("parents")
  def parents_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("parents")
  def parents_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("parents")
  def parents_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("parents")
  def parents_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("parents")
  def parents_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("parents")
  def parents_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("parents")
  def parents_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("parents")
  def parents_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("parents")
  def parents_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("parents")
  def parents_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("parents")
  def parents_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("parents")
  def parents_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("parents")
  def parents_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("parents")
  def parents_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("parents")
  def parents_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("parents")
  def parents_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("parents")
  def parents_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("parents")
  def parents_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("parents")
  def parents_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("parents")
  def parents_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("parents")
  def parents_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("parents")
  def parents_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("parents")
  def parents_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("parents")
  def parents_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("parents")
  def parents_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("parents")
  def parents_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("parents")
  def parents_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("parents")
  def parents_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("parents")
  def parents_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("parents")
  def parents_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("parents")
  def parents_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("parents")
  def parents_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("parents")
  def parents_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("parents")
  def parents_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("parents")
  def parents_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("parents")
  def parents_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("parents")
  def parents_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("parents")
  def parents_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("parents")
  def parents_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("parents")
  def parents_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("parents")
  def parents_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("parents")
  def parents_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("parents")
  def parents_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("parents")
  def parents_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("parents")
  def parents_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get the parent DOM elements of a set of DOM elements.
    *
    * @see https://on.cypress.io/parents
    */
  @JSName("parents")
  def parents_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("parents")
  def parents_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Stop cy commands from running and allow interaction with the application under test. You can then “resume” running all commands or choose to step through the “next” commands from the Command Log.
    * This does not set a `debugger` in your code, unlike `.debug()`
    *
    * @see https://on.cypress.io/pause
    */
  def pause(): Chainable[Subject] = js.native
  def pause(options: stdLib.Partial[Loggable]): Chainable[Subject] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('li').prev() // Yield previous 'li'
    * @see https://on.cypress.io/prev
    */
  def prev[E /* <: stdLib.Node */](): Chainable[jqueryLib.JQuery[E]] = js.native
  def prev[E /* <: stdLib.Node */](options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements that match selector.
    *
    * @example
    *    cy.get('nav').prev('.menu-item') // Yield previous '.menu-item'
    * @see https://on.cypress.io/prev
    */
  def prev[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def prev[E /* <: stdLib.Node */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  def prevAll[E /* <: stdLib.Node */](): Chainable[jqueryLib.JQuery[E]] = js.native
  def prevAll[E /* <: stdLib.Node */](options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  def prevAll[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def prevAll[E /* <: stdLib.Node */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("prevAll")
  def prevAll_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("prevAll")
  def prevAll_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("prevAll")
  def prevAll_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("prevAll")
  def prevAll_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("prevAll")
  def prevAll_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("prevAll")
  def prevAll_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("prevAll")
  def prevAll_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("prevAll")
  def prevAll_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("prevAll")
  def prevAll_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("prevAll")
  def prevAll_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("prevAll")
  def prevAll_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("prevAll")
  def prevAll_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("prevAll")
  def prevAll_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("prevAll")
  def prevAll_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("prevAll")
  def prevAll_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("prevAll")
  def prevAll_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("prevAll")
  def prevAll_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("prevAll")
  def prevAll_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("prevAll")
  def prevAll_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("prevAll")
  def prevAll_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("prevAll")
  def prevAll_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("prevAll")
  def prevAll_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("prevAll")
  def prevAll_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("prevAll")
  def prevAll_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("prevAll")
  def prevAll_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("prevAll")
  def prevAll_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("prevAll")
  def prevAll_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("prevAll")
  def prevAll_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevAll")
  def prevAll_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("prevAll")
  def prevAll_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("prevAll")
  def prevAll_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("prevAll")
  def prevAll_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("prevAll")
  def prevAll_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("prevAll")
  def prevAll_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("prevAll")
  def prevAll_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("prevAll")
  def prevAll_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("prevAll")
  def prevAll_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("prevAll")
  def prevAll_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("prevAll")
  def prevAll_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("prevAll")
  def prevAll_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("prevAll")
  def prevAll_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("prevAll")
  def prevAll_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("prevAll")
  def prevAll_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("prevAll")
  def prevAll_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("prevAll")
  def prevAll_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("prevAll")
  def prevAll_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("prevAll")
  def prevAll_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("prevAll")
  def prevAll_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("prevAll")
  def prevAll_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("prevAll")
  def prevAll_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("prevAll")
  def prevAll_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("prevAll")
  def prevAll_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("prevAll")
  def prevAll_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("prevAll")
  def prevAll_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("prevAll")
  def prevAll_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("prevAll")
  def prevAll_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("prevAll")
  def prevAll_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("prevAll")
  def prevAll_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("prevAll")
  def prevAll_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("prevAll")
  def prevAll_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("prevAll")
  def prevAll_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("prevAll")
  def prevAll_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("prevAll")
  def prevAll_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("prevAll")
  def prevAll_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("prevAll")
  def prevAll_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("prevAll")
  def prevAll_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("prevAll")
  def prevAll_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("prevAll")
  def prevAll_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("prevAll")
  def prevAll_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("prevAll")
  def prevAll_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("prevAll")
  def prevAll_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("prevAll")
  def prevAll_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("prevAll")
  def prevAll_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("prevAll")
  def prevAll_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("prevAll")
  def prevAll_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("prevAll")
  def prevAll_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements.
    * > The querying behavior of this command matches exactly how [.prevAll()](http://api.jquery.com/prevAll) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevAll")
  def prevAll_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevAll")
  def prevAll_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  def prevUntil[E /* <: stdLib.Node */](element: E): Chainable[jqueryLib.JQuery[E]] = js.native
  def prevUntil[E /* <: stdLib.Node */](element: E, filter: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def prevUntil[E /* <: stdLib.Node */](element: E, filter: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  def prevUntil[E /* <: stdLib.Node */](element: jqueryLib.JQuery[E]): Chainable[jqueryLib.JQuery[E]] = js.native
  def prevUntil[E /* <: stdLib.Node */](element: jqueryLib.JQuery[E], filter: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def prevUntil[E /* <: stdLib.Node */](
    element: jqueryLib.JQuery[E],
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  def prevUntil[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def prevUntil[E /* <: stdLib.Node */](selector: java.lang.String, filter: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def prevUntil[E /* <: stdLib.Node */](
    selector: java.lang.String,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_a(selector: cypressLib.cypressLibStrings.a, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_a(
    selector: cypressLib.cypressLibStrings.a,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_abbr(selector: cypressLib.cypressLibStrings.abbr, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_abbr(
    selector: cypressLib.cypressLibStrings.abbr,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_address(selector: cypressLib.cypressLibStrings.address, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_address(
    selector: cypressLib.cypressLibStrings.address,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_applet(selector: cypressLib.cypressLibStrings.applet, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_applet(
    selector: cypressLib.cypressLibStrings.applet,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_area(selector: cypressLib.cypressLibStrings.area, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_area(
    selector: cypressLib.cypressLibStrings.area,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_article(selector: cypressLib.cypressLibStrings.article, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_article(
    selector: cypressLib.cypressLibStrings.article,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_aside(selector: cypressLib.cypressLibStrings.aside, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_aside(
    selector: cypressLib.cypressLibStrings.aside,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_audio(selector: cypressLib.cypressLibStrings.audio, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_audio(
    selector: cypressLib.cypressLibStrings.audio,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_b(selector: cypressLib.cypressLibStrings.b, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_b(
    selector: cypressLib.cypressLibStrings.b,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_base(selector: cypressLib.cypressLibStrings.base, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_base(
    selector: cypressLib.cypressLibStrings.base,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_basefont(selector: cypressLib.cypressLibStrings.basefont, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_bdo(selector: cypressLib.cypressLibStrings.bdo, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_bdo(
    selector: cypressLib.cypressLibStrings.bdo,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_blockquote(selector: cypressLib.cypressLibStrings.blockquote, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_body(selector: cypressLib.cypressLibStrings.body, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_body(
    selector: cypressLib.cypressLibStrings.body,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_br(selector: cypressLib.cypressLibStrings.br, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_br(
    selector: cypressLib.cypressLibStrings.br,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_button(selector: cypressLib.cypressLibStrings.button, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_button(
    selector: cypressLib.cypressLibStrings.button,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_canvas(selector: cypressLib.cypressLibStrings.canvas, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_canvas(
    selector: cypressLib.cypressLibStrings.canvas,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_caption(selector: cypressLib.cypressLibStrings.caption, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_caption(
    selector: cypressLib.cypressLibStrings.caption,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_cite(selector: cypressLib.cypressLibStrings.cite, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_cite(
    selector: cypressLib.cypressLibStrings.cite,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_code(selector: cypressLib.cypressLibStrings.code, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_code(
    selector: cypressLib.cypressLibStrings.code,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_col(selector: cypressLib.cypressLibStrings.col, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_col(
    selector: cypressLib.cypressLibStrings.col,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_colgroup(selector: cypressLib.cypressLibStrings.colgroup, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_data(selector: cypressLib.cypressLibStrings.data, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_data(
    selector: cypressLib.cypressLibStrings.data,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_datalist(selector: cypressLib.cypressLibStrings.datalist, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dd(selector: cypressLib.cypressLibStrings.dd, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dd(
    selector: cypressLib.cypressLibStrings.dd,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_del(selector: cypressLib.cypressLibStrings.del, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_del(
    selector: cypressLib.cypressLibStrings.del,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_details(selector: cypressLib.cypressLibStrings.details, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_details(
    selector: cypressLib.cypressLibStrings.details,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dfn(selector: cypressLib.cypressLibStrings.dfn, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dfn(
    selector: cypressLib.cypressLibStrings.dfn,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dialog(selector: cypressLib.cypressLibStrings.dialog, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dialog(
    selector: cypressLib.cypressLibStrings.dialog,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dir(selector: cypressLib.cypressLibStrings.dir, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dir(
    selector: cypressLib.cypressLibStrings.dir,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_div(selector: cypressLib.cypressLibStrings.div, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_div(
    selector: cypressLib.cypressLibStrings.div,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dl(selector: cypressLib.cypressLibStrings.dl, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dl(
    selector: cypressLib.cypressLibStrings.dl,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dt(selector: cypressLib.cypressLibStrings.dt, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_dt(
    selector: cypressLib.cypressLibStrings.dt,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_em(selector: cypressLib.cypressLibStrings.em, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_em(
    selector: cypressLib.cypressLibStrings.em,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_embed(selector: cypressLib.cypressLibStrings.embed, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_embed(
    selector: cypressLib.cypressLibStrings.embed,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_fieldset(selector: cypressLib.cypressLibStrings.fieldset, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_figcaption(selector: cypressLib.cypressLibStrings.figcaption, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_figure(selector: cypressLib.cypressLibStrings.figure, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_figure(
    selector: cypressLib.cypressLibStrings.figure,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_font(selector: cypressLib.cypressLibStrings.font, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_font(
    selector: cypressLib.cypressLibStrings.font,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_footer(selector: cypressLib.cypressLibStrings.footer, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_footer(
    selector: cypressLib.cypressLibStrings.footer,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_form(selector: cypressLib.cypressLibStrings.form, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_form(
    selector: cypressLib.cypressLibStrings.form,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_frame(selector: cypressLib.cypressLibStrings.frame, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_frame(
    selector: cypressLib.cypressLibStrings.frame,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_frameset(selector: cypressLib.cypressLibStrings.frameset, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h1(selector: cypressLib.cypressLibStrings.h1, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h1(
    selector: cypressLib.cypressLibStrings.h1,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h2(selector: cypressLib.cypressLibStrings.h2, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h2(
    selector: cypressLib.cypressLibStrings.h2,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h3(selector: cypressLib.cypressLibStrings.h3, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h3(
    selector: cypressLib.cypressLibStrings.h3,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h4(selector: cypressLib.cypressLibStrings.h4, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h4(
    selector: cypressLib.cypressLibStrings.h4,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h5(selector: cypressLib.cypressLibStrings.h5, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h5(
    selector: cypressLib.cypressLibStrings.h5,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h6(selector: cypressLib.cypressLibStrings.h6, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_h6(
    selector: cypressLib.cypressLibStrings.h6,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_head(selector: cypressLib.cypressLibStrings.head, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_head(
    selector: cypressLib.cypressLibStrings.head,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_header(selector: cypressLib.cypressLibStrings.header, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_header(
    selector: cypressLib.cypressLibStrings.header,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_hgroup(selector: cypressLib.cypressLibStrings.hgroup, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_hgroup(
    selector: cypressLib.cypressLibStrings.hgroup,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_hr(selector: cypressLib.cypressLibStrings.hr, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_hr(
    selector: cypressLib.cypressLibStrings.hr,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_html(selector: cypressLib.cypressLibStrings.html, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_html(
    selector: cypressLib.cypressLibStrings.html,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_i(selector: cypressLib.cypressLibStrings.i, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_i(
    selector: cypressLib.cypressLibStrings.i,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_iframe(selector: cypressLib.cypressLibStrings.iframe, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_iframe(
    selector: cypressLib.cypressLibStrings.iframe,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_img(selector: cypressLib.cypressLibStrings.img, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_img(
    selector: cypressLib.cypressLibStrings.img,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_input(selector: cypressLib.cypressLibStrings.input, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_input(
    selector: cypressLib.cypressLibStrings.input,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ins(selector: cypressLib.cypressLibStrings.ins, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ins(
    selector: cypressLib.cypressLibStrings.ins,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_kbd(selector: cypressLib.cypressLibStrings.kbd, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_kbd(
    selector: cypressLib.cypressLibStrings.kbd,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_label(selector: cypressLib.cypressLibStrings.label, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_label(
    selector: cypressLib.cypressLibStrings.label,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_legend(selector: cypressLib.cypressLibStrings.legend, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_legend(
    selector: cypressLib.cypressLibStrings.legend,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_li(selector: cypressLib.cypressLibStrings.li, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_li(
    selector: cypressLib.cypressLibStrings.li,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_link(selector: cypressLib.cypressLibStrings.link, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_link(
    selector: cypressLib.cypressLibStrings.link,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_map(selector: cypressLib.cypressLibStrings.map, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_map(
    selector: cypressLib.cypressLibStrings.map,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_mark(selector: cypressLib.cypressLibStrings.mark, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_mark(
    selector: cypressLib.cypressLibStrings.mark,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_marquee(selector: cypressLib.cypressLibStrings.marquee, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_marquee(
    selector: cypressLib.cypressLibStrings.marquee,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_menu(selector: cypressLib.cypressLibStrings.menu, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_menu(
    selector: cypressLib.cypressLibStrings.menu,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_meta(selector: cypressLib.cypressLibStrings.meta, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_meta(
    selector: cypressLib.cypressLibStrings.meta,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_meter(selector: cypressLib.cypressLibStrings.meter, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_meter(
    selector: cypressLib.cypressLibStrings.meter,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_nav(selector: cypressLib.cypressLibStrings.nav, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_nav(
    selector: cypressLib.cypressLibStrings.nav,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_noscript(selector: cypressLib.cypressLibStrings.noscript, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_object(selector: cypressLib.cypressLibStrings.`object`, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_object(
    selector: cypressLib.cypressLibStrings.`object`,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ol(selector: cypressLib.cypressLibStrings.ol, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ol(
    selector: cypressLib.cypressLibStrings.ol,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_optgroup(selector: cypressLib.cypressLibStrings.optgroup, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_option(selector: cypressLib.cypressLibStrings.option, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_option(
    selector: cypressLib.cypressLibStrings.option,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_output(selector: cypressLib.cypressLibStrings.output, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_output(
    selector: cypressLib.cypressLibStrings.output,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_p(selector: cypressLib.cypressLibStrings.p, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_p(
    selector: cypressLib.cypressLibStrings.p,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_param(selector: cypressLib.cypressLibStrings.param, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_param(
    selector: cypressLib.cypressLibStrings.param,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_picture(selector: cypressLib.cypressLibStrings.picture, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_picture(
    selector: cypressLib.cypressLibStrings.picture,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_pre(selector: cypressLib.cypressLibStrings.pre, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_pre(
    selector: cypressLib.cypressLibStrings.pre,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_progress(selector: cypressLib.cypressLibStrings.progress, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_progress(
    selector: cypressLib.cypressLibStrings.progress,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_q(selector: cypressLib.cypressLibStrings.q, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_q(
    selector: cypressLib.cypressLibStrings.q,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_rt(selector: cypressLib.cypressLibStrings.rt, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_rt(
    selector: cypressLib.cypressLibStrings.rt,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ruby(selector: cypressLib.cypressLibStrings.ruby, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ruby(
    selector: cypressLib.cypressLibStrings.ruby,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_s(selector: cypressLib.cypressLibStrings.s, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_s(
    selector: cypressLib.cypressLibStrings.s,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_samp(selector: cypressLib.cypressLibStrings.samp, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_samp(
    selector: cypressLib.cypressLibStrings.samp,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_script(selector: cypressLib.cypressLibStrings.script, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_script(
    selector: cypressLib.cypressLibStrings.script,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_section(selector: cypressLib.cypressLibStrings.section, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_section(
    selector: cypressLib.cypressLibStrings.section,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_select(selector: cypressLib.cypressLibStrings.select, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_select(
    selector: cypressLib.cypressLibStrings.select,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_slot(selector: cypressLib.cypressLibStrings.slot, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_slot(
    selector: cypressLib.cypressLibStrings.slot,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_small(selector: cypressLib.cypressLibStrings.small, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_small(
    selector: cypressLib.cypressLibStrings.small,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_source(selector: cypressLib.cypressLibStrings.source, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_source(
    selector: cypressLib.cypressLibStrings.source,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_span(selector: cypressLib.cypressLibStrings.span, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_span(
    selector: cypressLib.cypressLibStrings.span,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_strong(selector: cypressLib.cypressLibStrings.strong, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_strong(
    selector: cypressLib.cypressLibStrings.strong,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_style(selector: cypressLib.cypressLibStrings.style, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_style(
    selector: cypressLib.cypressLibStrings.style,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_sub(selector: cypressLib.cypressLibStrings.sub, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_sub(
    selector: cypressLib.cypressLibStrings.sub,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_sup(selector: cypressLib.cypressLibStrings.sup, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_sup(
    selector: cypressLib.cypressLibStrings.sup,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_table(selector: cypressLib.cypressLibStrings.table, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_table(
    selector: cypressLib.cypressLibStrings.table,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tbody(selector: cypressLib.cypressLibStrings.tbody, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tbody(
    selector: cypressLib.cypressLibStrings.tbody,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_td(selector: cypressLib.cypressLibStrings.td, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_td(
    selector: cypressLib.cypressLibStrings.td,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_template(selector: cypressLib.cypressLibStrings.template, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_template(
    selector: cypressLib.cypressLibStrings.template,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_textarea(selector: cypressLib.cypressLibStrings.textarea, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tfoot(selector: cypressLib.cypressLibStrings.tfoot, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tfoot(
    selector: cypressLib.cypressLibStrings.tfoot,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_th(selector: cypressLib.cypressLibStrings.th, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_th(
    selector: cypressLib.cypressLibStrings.th,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_thead(selector: cypressLib.cypressLibStrings.thead, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_thead(
    selector: cypressLib.cypressLibStrings.thead,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_time(selector: cypressLib.cypressLibStrings.time, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_time(
    selector: cypressLib.cypressLibStrings.time,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_title(selector: cypressLib.cypressLibStrings.title, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_title(
    selector: cypressLib.cypressLibStrings.title,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tr(selector: cypressLib.cypressLibStrings.tr, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_tr(
    selector: cypressLib.cypressLibStrings.tr,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_track(selector: cypressLib.cypressLibStrings.track, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_track(
    selector: cypressLib.cypressLibStrings.track,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_u(selector: cypressLib.cypressLibStrings.u, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_u(
    selector: cypressLib.cypressLibStrings.u,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ul(selector: cypressLib.cypressLibStrings.ul, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_ul(
    selector: cypressLib.cypressLibStrings.ul,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_var(selector: cypressLib.cypressLibStrings.`var`, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_var(
    selector: cypressLib.cypressLibStrings.`var`,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_video(selector: cypressLib.cypressLibStrings.video, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_video(
    selector: cypressLib.cypressLibStrings.video,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get all previous siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided.
    * > The querying behavior of this command matches exactly how [.prevUntil()](http://api.jquery.com/prevUntil) works in jQuery.
    *
    * @see https://on.cypress.io/prevall
    */
  @JSName("prevUntil")
  def prevUntil_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_wbr(selector: cypressLib.cypressLibStrings.wbr, filter: java.lang.String): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prevUntil")
  def prevUntil_wbr(
    selector: cypressLib.cypressLibStrings.wbr,
    filter: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("prev")
  def prev_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("prev")
  def prev_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("prev")
  def prev_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("prev")
  def prev_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("prev")
  def prev_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("prev")
  def prev_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("prev")
  def prev_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("prev")
  def prev_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("prev")
  def prev_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("prev")
  def prev_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("prev")
  def prev_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("prev")
  def prev_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("prev")
  def prev_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("prev")
  def prev_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("prev")
  def prev_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("prev")
  def prev_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("prev")
  def prev_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("prev")
  def prev_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("prev")
  def prev_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("prev")
  def prev_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("prev")
  def prev_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("prev")
  def prev_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("prev")
  def prev_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("prev")
  def prev_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("prev")
  def prev_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("prev")
  def prev_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("prev")
  def prev_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("prev")
  def prev_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("prev")
  def prev_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("prev")
  def prev_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("prev")
  def prev_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("prev")
  def prev_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("prev")
  def prev_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("prev")
  def prev_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("prev")
  def prev_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("prev")
  def prev_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("prev")
  def prev_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("prev")
  def prev_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("prev")
  def prev_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("prev")
  def prev_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("prev")
  def prev_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("prev")
  def prev_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("prev")
  def prev_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("prev")
  def prev_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("prev")
  def prev_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("prev")
  def prev_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("prev")
  def prev_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("prev")
  def prev_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("prev")
  def prev_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("prev")
  def prev_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("prev")
  def prev_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("prev")
  def prev_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("prev")
  def prev_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("prev")
  def prev_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("prev")
  def prev_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("prev")
  def prev_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("prev")
  def prev_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("prev")
  def prev_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("prev")
  def prev_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("prev")
  def prev_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("prev")
  def prev_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("prev")
  def prev_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("prev")
  def prev_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("prev")
  def prev_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("prev")
  def prev_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("prev")
  def prev_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("prev")
  def prev_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("prev")
  def prev_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("prev")
  def prev_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("prev")
  def prev_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("prev")
  def prev_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("prev")
  def prev_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("prev")
  def prev_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("prev")
  def prev_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("prev")
  def prev_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("prev")
  def prev_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get the immediately preceding sibling of each element in a set of the elements.
    *
    * @example
    *    cy.get('nav').prev('a') // Yield previous 'a'
    * @see https://on.cypress.io/prev
    */
  @JSName("prev")
  def prev_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("prev")
  def prev_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Read a file and yield its contents.
    *
    * @see https://on.cypress.io/readfile
    */
  def readFile[Contents](filePath: java.lang.String): Chainable[Contents] = js.native
  /**
    * Read a file with given encoding and yield its contents.
    *
    * @see https://on.cypress.io/readfile
    * @example
    *    cy.readFile('foo.json', 'utf8')
    */
  def readFile[Contents](filePath: java.lang.String, encoding: Encodings): Chainable[Contents] = js.native
  def readFile[Contents](
    filePath: java.lang.String,
    encoding: Encodings,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[Contents] = js.native
  def readFile[Contents](filePath: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[Contents] = js.native
  /**
    * Reload the page.
    *
    * @see https://on.cypress.io/reload
    * @example
    *    cy.reload()
    */
  def reload(): Chainable[mochaLib.Window with stdLib.Window] = js.native
  /**
    * Reload the page without cache
    *
    * @see https://on.cypress.io/reload
    * @param {Boolean} forceReload Whether to reload the current page without using the cache. true forces the reload without cache.
    * @example
    *    // Reload the page without using the cache
    *    cy.visit('http://localhost:3000/admin')
    *    cy.reload(true)
    */
  def reload(forceReload: scala.Boolean): Chainable[mochaLib.Window with stdLib.Window] = js.native
  def reload(options: stdLib.Partial[Loggable with Timeoutable]): Chainable[mochaLib.Window with stdLib.Window] = js.native
  /**
    * Make an HTTP request with specific method.
    *
    * @see https://on.cypress.io/request
    * @example
    *    cy.request('POST', 'http://localhost:8888/users', {name: 'Jane'})
    */
  def request(method: HttpMethod, url: java.lang.String): Chainable[Response] = js.native
  def request(method: HttpMethod, url: java.lang.String, body: RequestBody): Chainable[Response] = js.native
  /**
    * Make an HTTP request with specific behavior.
    *
    * @see https://on.cypress.io/request
    * @example
    *    cy.request({
    *      url: '/dashboard',
    *      followRedirect: false // turn off following redirects
    *    })
    */
  def request(options: stdLib.Partial[RequestOptions]): Chainable[Response] = js.native
  /**
    * Make an HTTP GET request.
    *
    * @see https://on.cypress.io/request
    * @example
    *    cy.request('http://dev.local/seed')
    */
  def request(url: java.lang.String): Chainable[Response] = js.native
  def request(url: java.lang.String, body: RequestBody): Chainable[Response] = js.native
  /**
    * Get the root DOM element.
    * The root element yielded is `<html>` by default.
    * However, when calling `.root()` from a `.within()` command,
    * the root element will point to the element you are “within”.
    *
    * @see https://on.cypress.io/root
    */
  def root[E /* <: stdLib.Node */](): Chainable[jqueryLib.JQuery[E]] = js.native
  def root[E /* <: stdLib.Node */](options: stdLib.Partial[Loggable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Set a route by returning an object literal from a callback function.
    * Functions that return a Promise will automatically be awaited.
    *
    * @see https://on.cypress.io/route
    * @example
    *    cy.server()
    *    cy.route(() => {
    *      // your logic here
    *      // return an appropriate routing object here
    *      return {
    *        method: 'POST',
    *        url: '/comments',
    *        response: this.commentsFixture
    *      }
    *    })
    */
  def route(fn: js.Function0[RouteOptions]): Chainable[scala.Null] = js.native
  def route(method: java.lang.String, url: java.lang.String, response: java.lang.String): Chainable[scala.Null] = js.native
  def route(method: java.lang.String, url: java.lang.String, response: js.Object): Chainable[scala.Null] = js.native
  def route(method: java.lang.String, url: stdLib.RegExp): Chainable[scala.Null] = js.native
  def route(method: java.lang.String, url: stdLib.RegExp, response: java.lang.String): Chainable[scala.Null] = js.native
  def route(method: java.lang.String, url: stdLib.RegExp, response: js.Object): Chainable[scala.Null] = js.native
  /**
    * Spy or stub a given route.
    *
    * @see https://on.cypress.io/route
    * @example
    *    cy.server()
    *    cy.route({
    *      method: 'DELETE',
    *      url: '/users',
    *      status: 412,
    *      delay: 1000
    *      // and other options, see documentation
    *    })
    */
  def route(options: stdLib.Partial[RouteOptions]): Chainable[scala.Null] = js.native
  // can't do better typing unless we ignore the `.within()` case
  /**
    * Use `cy.route()` to manage the behavior of network requests.
    *
    * @see https://on.cypress.io/route
    * @example
    *    cy.server()
    *    cy.route('https://localhost:7777/users', [{id: 1, name: 'Pat'}])
    */
  def route(url: java.lang.String): Chainable[scala.Null] = js.native
  /**
    * Spy or stub request with specific method and url.
    *
    * @see https://on.cypress.io/route
    * @example
    *    cy.server()
    *    // spy on POST /todos requests
    *    cy.route('POST', '/todos').as('add-todo')
    */
  def route(url: java.lang.String, response: java.lang.String): Chainable[scala.Null] = js.native
  def route(url: java.lang.String, response: js.Object): Chainable[scala.Null] = js.native
  def route(url: stdLib.RegExp): Chainable[scala.Null] = js.native
  def route(url: stdLib.RegExp, response: java.lang.String): Chainable[scala.Null] = js.native
  def route(url: stdLib.RegExp, response: js.Object): Chainable[scala.Null] = js.native
  /**
    * Take a screenshot of the application under test and the Cypress Command Log.
    *
    * @see https://on.cypress.io/screenshot
    * @example
    *    cy.screenshot()
    *    cy.get(".post").screenshot()
    */
  def screenshot(): Chainable[scala.Null] = js.native
  /**
    * Take a screenshot of the application under test and the Cypress Command Log and save under given filename.
    *
    * @see https://on.cypress.io/screenshot
    * @example
    *    cy.get(".post").screenshot("post-element")
    */
  def screenshot(fileName: java.lang.String): Chainable[scala.Null] = js.native
  def screenshot(
    fileName: java.lang.String,
    options: stdLib.Partial[Loggable with Timeoutable with ScreenshotOptions]
  ): Chainable[scala.Null] = js.native
  def screenshot(options: stdLib.Partial[Loggable with Timeoutable with ScreenshotOptions]): Chainable[scala.Null] = js.native
  /**
    * Scroll an element into view.
    *
    * @see https://on.cypress.io/scrollintoview
    */
  def scrollIntoView(): Chainable[Subject] = js.native
  def scrollIntoView(options: stdLib.Partial[ScrollIntoViewOptions]): Chainable[Subject] = js.native
  /**
    * Scroll to a specific position.
    *
    * @see https://on.cypress.io/scrollto
    */
  def scrollTo(position: PositionType): Chainable[Subject] = js.native
  def scrollTo(position: PositionType, options: stdLib.Partial[ScrollToOptions]): Chainable[Subject] = js.native
  def scrollTo(x: java.lang.String, y: java.lang.String): Chainable[Subject] = js.native
  def scrollTo(x: java.lang.String, y: java.lang.String, options: stdLib.Partial[ScrollToOptions]): Chainable[Subject] = js.native
  def scrollTo(x: java.lang.String, y: scala.Double): Chainable[Subject] = js.native
  def scrollTo(x: java.lang.String, y: scala.Double, options: stdLib.Partial[ScrollToOptions]): Chainable[Subject] = js.native
  def scrollTo(x: scala.Double, y: java.lang.String): Chainable[Subject] = js.native
  def scrollTo(x: scala.Double, y: java.lang.String, options: stdLib.Partial[ScrollToOptions]): Chainable[Subject] = js.native
  /**
    * Scroll to a specific X,Y position.
    *
    * @see https://on.cypress.io/scrollto
    */
  def scrollTo(x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  def scrollTo(x: scala.Double, y: scala.Double, options: stdLib.Partial[ScrollToOptions]): Chainable[Subject] = js.native
  /**
    * Select an `<option>` with specific text within a `<select>`.
    *
    * @see https://on.cypress.io/select
    */
  def select(text: java.lang.String): Chainable[Subject] = js.native
  def select(text: java.lang.String, options: stdLib.Partial[SelectOptions]): Chainable[Subject] = js.native
  def select(text: js.Array[java.lang.String]): Chainable[Subject] = js.native
  def select(text: js.Array[java.lang.String], options: stdLib.Partial[SelectOptions]): Chainable[Subject] = js.native
  /**
    * Start a server to begin routing responses to `cy.route()` and `cy.request()`.
    *
    * @example
    *    // start server
    *    cy.server()
    *    // get default server options
    *    cy.server().should((server) => {
    *      expect(server.delay).to.eq(0)
    *      expect(server.method).to.eq('GET')
    *      expect(server.status).to.eq(200)
    *      // and many others options
    *    })
    *
    * @see https://on.cypress.io/server
    */
  def server(): Chainable[ServerOptions] = js.native
  def server(options: stdLib.Partial[ServerOptions]): Chainable[ServerOptions] = js.native
  /**
    * Set a browser cookie.
    *
    * @see https://on.cypress.io/setcookie
    */
  def setCookie(name: java.lang.String, value: java.lang.String): Chainable[Cookie] = js.native
  def setCookie(name: java.lang.String, value: java.lang.String, options: stdLib.Partial[SetCookieOptions]): Chainable[Cookie] = js.native
  // fallback
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    * Ctrl+Space will invoke auto-complete in most editors.
    * @see https://on.cypress.io/should
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  def should(chainers: java.lang.String): Chainable[Subject] = js.native
  def should(chainers: java.lang.String, value: js.Any): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  def should(chainers: java.lang.String, value: js.Any, `match`: js.Any): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    * Passing a function to `.should()` enables you to make multiple assertions on the yielded subject. This also gives you the opportunity to massage what you’d like to assert on.
    * Just be sure _not_ to include any code that has side effects in your callback function. The callback function will be retried over and over again until no assertions within it throw.
    * @example
    *    cy
    *      .get('p')
    *      .should(($p) => {
    *        // should have found 3 elements
    *        expect($p).to.have.length(3)
    *
    *        // make sure the first contains some text content
    *        expect($p.first()).to.contain('Hello World')
    *
    *        // use jquery's map to grab all of their classes
    *        // jquery's map returns a new jquery object
    *        const classes = $p.map((i, el) => {
    *          return Cypress.$(el).attr('class')
    *        })
    *
    *        // call classes.get() to make this a plain array
    *        expect(classes.get()).to.deep.eq([
    *          'text-primary',
    *          'text-danger',
    *          'text-default'
    *        ])
    *      })
    * @see https://on.cypress.io/should
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  def should(fn: js.Function1[/* currentSubject */ Subject, scala.Unit]): Chainable[Subject] = js.native
  /**
    * Assert spy always returned the provided value.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_alwaysreturned(chainer: cypressLib.cypressLibStrings.alwaysDOTreturned, value: js.Any): Chainable[Subject] = js.native
  // chai
  /**
    * Asserts that the target’s `type` is equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap('foo').should('be.a', 'string')
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_bea(chainer: cypressLib.cypressLibStrings.beDOTa, `type`: java.lang.String): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.above', 5)
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_beabove(chainer: cypressLib.cypressLibStrings.beDOTabove, value: scala.Double): Chainable[Subject] = js.native
  @JSName("should")
  def should_beabove(chainer: cypressLib.cypressLibStrings.beDOTabove, value: stdLib.Date): Chainable[Subject] = js.native
  /**
    * Assert if spy was always called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_bealwayscalledWithMatch(chainer: cypressLib.cypressLibStrings.beDOTalwaysDOTcalledWithMatch, args: js.Any*): Chainable[Subject] = js.native
  // sinon-chai
  /**
    * Assert spy/stub was called the `new` operator.
    * Beware that this is inferred based on the value of the this object and the spy function’s prototype, so it may give false positives if you actively return the right kind of object.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithnew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_bealwayscalledWithNew(chainer: cypressLib.cypressLibStrings.beDOTalwaysDOTcalledWithNew): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `type` is equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap({ foo: 'bar' }).should('be.an', 'object')
    * @alias a
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_bean(chainer: cypressLib.cypressLibStrings.beDOTan, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number that’s within a given +/- `delta` range of the given number `expected`. However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('be.approximately', 5, 0.5)
    * @alias closeTo
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_beapproximately(chainer: cypressLib.cypressLibStrings.beDOTapproximately, value: scala.Double, delta: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is an `arguments` object.
    * @example
    *    cy.wrap(arguments).should('be.arguments')
    * @see http://chaijs.com/api/bdd/#method_arguments
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_bearguments(chainer: cypressLib.cypressLibStrings.beDOTarguments): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date greater than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.at.least', 5)
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_beatleast(chainer: cypressLib.cypressLibStrings.beDOTatDOTleast, value: scala.Double): Chainable[Subject] = js.native
  @JSName("should")
  def should_beatleast(chainer: cypressLib.cypressLibStrings.beDOTatDOTleast, value: stdLib.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.below', 5)
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_bebelow(chainer: cypressLib.cypressLibStrings.beDOTbelow, value: scala.Double): Chainable[Subject] = js.native
  /**
    * `true` if the spy was called at least once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_becalled(chainer: cypressLib.cypressLibStrings.beDOTcalled): Chainable[Subject] = js.native
  /**
    * Assert spy was called after `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledafteranotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_becalledAfter(chainer: cypressLib.cypressLibStrings.beDOTcalledAfter, spy: sinonLib.sinonMod.SinonNs.SinonSpy): Chainable[Subject] = js.native
  /**
    * Assert spy was called before `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledbeforeanotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_becalledBefore(chainer: cypressLib.cypressLibStrings.beDOTcalledBefore, spy: sinonLib.sinonMod.SinonNs.SinonSpy): Chainable[Subject] = js.native
  /**
    * Assert spy was called at least once with `obj` as `this`. `calledOn` also accepts a matcher (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers)).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_becalledOn(chainer: cypressLib.cypressLibStrings.beDOTcalledOn, context: js.Any): Chainable[Subject] = js.native
  /**
    * Assert spy was called exactly once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonce
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_becalledOnce(chainer: cypressLib.cypressLibStrings.beDOTcalledOnce): Chainable[Subject] = js.native
  /**
    * Assert spy was called exactly three times
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledthrice
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_becalledThrice(chainer: cypressLib.cypressLibStrings.beDOTcalledThrice): Chainable[Subject] = js.native
  /**
    * Assert spy was called exactly twice
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledtwice
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_becalledTwice(chainer: cypressLib.cypressLibStrings.beDOTcalledTwice): Chainable[Subject] = js.native
  /**
    * Assert spy was called at least once with the provided arguments and no others.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithexactlyarg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_becalledWithExactly(chainer: cypressLib.cypressLibStrings.beDOTcalledWithExactly, args: js.Any*): Chainable[Subject] = js.native
  /**
    * Assert spy was called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_becalledWithMatch(chainer: cypressLib.cypressLibStrings.beDOTcalledWithMatch, args: js.Any*): Chainable[Subject] = js.native
  /**
    * Assert spy/stub was called the `new` operator.
    * Beware that this is inferred based on the value of the this object and the spy function’s prototype, so it may give false positives if you actively return the right kind of object.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithnew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_becalledWithNew(chainer: cypressLib.cypressLibStrings.beDOTcalledWithNew): Chainable[Subject] = js.native
  // jquery-chai
  /**
    * Assert that at least one element of the selection is checked, using `.is(':checked')`.
    * @example
    *    cy.get('#result').should('be.checked')
    * @see http://chaijs.com/plugins/chai-jquery/#checked
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_bechecked(chainer: cypressLib.cypressLibStrings.beDOTchecked): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number that’s within a given +/- `delta` range of the given number `expected`. However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('be.closeTo', 5, 0.5)
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_becloseTo(chainer: cypressLib.cypressLibStrings.beDOTcloseTo, value: scala.Double, delta: scala.Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is disabled, using `.is(':disabled')`.
    * @example
    *    cy.get('#result').should('be.disabled')
    * @see http://chaijs.com/plugins/chai-jquery/#disabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_bedisabled(chainer: cypressLib.cypressLibStrings.beDOTdisabled): Chainable[Subject] = js.native
  /**
    * When the target is a string or array, .empty asserts that the target’s length property is strictly (===) equal to 0
    * @example
    *    cy.wrap([]).should('be.empty')
    *    cy.wrap('').should('be.empty')
    * @see http://chaijs.com/api/bdd/#method_empty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_beempty(chainer: cypressLib.cypressLibStrings.beDOTempty): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is enabled, using `.is(':enabled')`.
    * @example
    *    cy.get('#result').should('be.enabled')
    * @see http://chaijs.com/plugins/chai-jquery/#enabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_beenabled(chainer: cypressLib.cypressLibStrings.beDOTenabled): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to `false`.
    * @example
    *    cy.wrap(false).should('be.false')
    * @see http://chaijs.com/api/bdd/#method_false
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_befalse(chainer: cypressLib.cypressLibStrings.beDOTfalse): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.greaterThan', 5)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_begreaterThan(chainer: cypressLib.cypressLibStrings.beDOTgreaterThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.gt', 5)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_begt(chainer: cypressLib.cypressLibStrings.beDOTgt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date greater than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.gte', 5)
    * @alias least
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_begte(chainer: cypressLib.cypressLibStrings.beDOTgte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is hidden, using `.is(':hidden')`.
    * @example
    *    cy.get('#result').should('be.hidden')
    * @see http://chaijs.com/plugins/chai-jquery/#hidden
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_behidden(chainer: cypressLib.cypressLibStrings.beDOThidden): Chainable[Subject] = js.native
  /**
    * Asserts that the target is an instance of the given `constructor`.
    * @example
    *    cy.wrap([1, 2]).should('be.instanceOf', Array)
    * @see http://chaijs.com/api/bdd/#method_instanceof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_beinstanceOf(chainer: cypressLib.cypressLibStrings.beDOTinstanceOf, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.lessThan', 5)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_belessThan(chainer: cypressLib.cypressLibStrings.beDOTlessThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.lt', 5)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_belt(chainer: cypressLib.cypressLibStrings.beDOTlt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('be.lte', 5)
    * @alias most
    * @see http://chaijs.com/api/bdd/#method_most
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_belte(chainer: cypressLib.cypressLibStrings.beDOTlte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is loosely (`==`) equal to `true`. However, it’s often best to assert that the target is strictly (`===`) or deeply equal to its expected value.
    * @example
    *    cy.wrap(1).should('be.ok')
    * @see http://chaijs.com/api/bdd/#method_ok
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_beok(chainer: cypressLib.cypressLibStrings.beDOTok): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is selected, using `.is(':selected')`.
    * @example
    *    cy.get('#result').should('be.selected')
    * @see http://chaijs.com/plugins/chai-jquery/#selected
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_beselected(chainer: cypressLib.cypressLibStrings.beDOTselected): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to true.
    * @example
    *    cy.wrap(true).should('be.true')
    * @see http://chaijs.com/api/bdd/#method_true
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_betrue(chainer: cypressLib.cypressLibStrings.beDOTtrue): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to undefined.
    * @example
    *    cy.wrap(undefined).should('be.undefined')
    * @see http://chaijs.com/api/bdd/#method_undefined
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_beundefined(chainer: cypressLib.cypressLibStrings.beDOTundefined): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is visible, using `.is(':visible')`.
    * @example
    *    cy.get('#result').should('be.visible')
    * @see http://chaijs.com/plugins/chai-jquery/#visible
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_bevisible(chainer: cypressLib.cypressLibStrings.beDOTvisible): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a number or a date greater than or equal to the given number or date `start`, and less than or equal to the given number or date `finish` respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.within', 5, 10)
    * @see http://chaijs.com/api/bdd/#method_within
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_bewithin(chainer: cypressLib.cypressLibStrings.beDOTwithin, start: scala.Double, end: scala.Double): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_bewithin(chainer: cypressLib.cypressLibStrings.beDOTwithin, start: stdLib.Date, end: stdLib.Date): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.change` asserts that the given function `subject` returns a different value when it’s invoked before the target function compared to when it’s invoked afterward.
    * However, it’s often best to assert that `subject` is equal to its expected value.
    * @example
    *    let dots = ''
    *    function addDot() { dots += '.' }
    *    function getDots() { return dots }
    *    cy.wrap(addDot).should('change', getDots)
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_change(chainer: cypressLib.cypressLibStrings.change, fn: js.Function1[/* repeated */ js.Any, _]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.change` asserts that the value of the given object `subject`'s `prop` property is different before invoking the target function compared to afterward.
    * @example
    *    const myObj = { dots: '' }
    *    function addDot() { myObj.dots += '.' }
    *    cy.wrap(addDot).should('change', myObj, 'dots')
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_change(chainer: cypressLib.cypressLibStrings.change, obj: js.Object, prop: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the selection contains the given text, using `:contains()`. If the object asserted against is not a jQuery object, or if `contain` is not called as a function, the original implementation will be called.
    * @example
    *    cy.get('#result').should('contain', 'text')
    * @see http://chaijs.com/plugins/chai-jquery/#containtext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_contain(chainer: cypressLib.cypressLibStrings.contain, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string val is a substring of the target.
    * @example
    *    cy.wrap('tester').should('contain', 'test')
    * @alias include
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_contain(chainer: cypressLib.cypressLibStrings.contain, value: js.Any): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.decrease` asserts that the given function `subject` returns a lesser number when it’s invoked after invoking the target function compared to when it’s invoked beforehand.
    * `.decrease` also causes all `.by` assertions that follow in the chain to assert how much lesser of a number is returned. It’s often best to assert that the return value decreased by the expected amount, rather than asserting it decreased by any amount.
    * @example
    *    let val = 1
    *    function subtractTwo() { val -= 2 }
    *    function getVal() { return val }
    *    cy.wrap(subtractTwo).should('decrease', getVal)
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_decrease(chainer: cypressLib.cypressLibStrings.decrease, fn: js.Function1[/* repeated */ js.Any, _]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.decrease` asserts that the value of the given object `subject`'s `prop` property is lesser after invoking the target function compared to beforehand.
    * @example
    *    let val = 1
    *    function subtractTwo() { val -= 2 }
    *    function getVal() { return val }
    *    cy.wrap(subtractTwo).should('decrease', getVal)
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_decrease(chainer: cypressLib.cypressLibStrings.decrease, obj: js.Object, prop: java.lang.String): Chainable[Subject] = js.native
  /**
    * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property` assertions that follow in the chain to use deep equality instead of strict (`===`) equality. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ a: 1 }).should('deep.equal', { a: 1 })
    * @see http://chaijs.com/api/bdd/#method_deep
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_deepequal(chainer: cypressLib.cypressLibStrings.deepDOTequal, value: Subject): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('eq', 1)
    * @alias equal
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_eq(chainer: cypressLib.cypressLibStrings.eq, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is deeply equal to the given `obj`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({a: 1}).should('eql', {a: 1}).and('not.equal', {a: 1})
    * @see http://chaijs.com/api/bdd/#method_eql
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_eql(chainer: cypressLib.cypressLibStrings.eql, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('equal', 1)
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_equal(chainer: cypressLib.cypressLibStrings.equal, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to either `null` or `undefined`. However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(1).should('exist')
    * @see http://chaijs.com/api/bdd/#method_exist
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_exist(chainer: cypressLib.cypressLibStrings.exist): Chainable[Subject] = js.native
  /**
    * Causes all `.keys` assertions that follow in the chain to require that the target have all of the given keys. This is the opposite of `.any`, which only requires that the target have at least one of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('have.all.keys', 'a', 'b')
    * @see http://chaijs.com/api/bdd/#method_all
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_haveallkeys(chainer: cypressLib.cypressLibStrings.haveDOTallDOTkeys, value: java.lang.String*): Chainable[Subject] = js.native
  /**
    * Assert spy always threw an exception.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysthrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havealwaysthrown(chainer: cypressLib.cypressLibStrings.haveDOTalwaysDOTthrown): Chainable[Subject] = js.native
  @JSName("should")
  def should_havealwaysthrown(
    chainer: cypressLib.cypressLibStrings.haveDOTalwaysDOTthrown,
    value: nodeLib.Error with stdLib.Error
  ): Chainable[Subject] = js.native
  @JSName("should")
  def should_havealwaysthrown(chainer: cypressLib.cypressLibStrings.haveDOTalwaysDOTthrown, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_havealwaysthrown(chainer: cypressLib.cypressLibStrings.haveDOTalwaysDOTthrown, value: stdLib.ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Causes all `.keys` assertions that follow in the chain to only require that the target have at least one of the given keys. This is the opposite of `.all`, which requires that the target have all of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('have.any.keys', 'a')
    * @see http://chaijs.com/api/bdd/#method_any
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_haveanykeys(chainer: cypressLib.cypressLibStrings.haveDOTanyDOTkeys, value: java.lang.String*): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.attr', 'role')
    *    cy.get('#result').should('have.attr', 'role', 'menu')
    * @see http://chaijs.com/plugins/chai-jquery/#attrname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_haveattr(chainer: cypressLib.cypressLibStrings.haveDOTattr, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_haveattr(
    chainer: cypressLib.cypressLibStrings.haveDOTattr,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Assert the number of calls.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycallcount
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havecallCount(chainer: cypressLib.cypressLibStrings.haveDOTcallCount, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.class', 'success')
    * @see http://chaijs.com/plugins/chai-jquery/#classclassname
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_haveclass(chainer: cypressLib.cypressLibStrings.haveDOTclass, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given CSS property, using `.css()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.css', 'display', 'none')
    * @see http://chaijs.com/plugins/chai-jquery/#cssname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havecss(chainer: cypressLib.cypressLibStrings.haveDOTcss, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_havecss(
    chainer: cypressLib.cypressLibStrings.haveDOTcss,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given data value, using `.data()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.data', 'foo', 'bar')
    * @see http://chaijs.com/plugins/chai-jquery/#dataname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havedata(chainer: cypressLib.cypressLibStrings.haveDOTdata, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_havedata(
    chainer: cypressLib.cypressLibStrings.haveDOTdata,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target has a property with the given key `name`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ x: {a: 1 }}).should('have.deep.property', 'x', { a: 1 })
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havedeepproperty(
    chainer: cypressLib.cypressLibStrings.haveDOTdeepDOTproperty,
    value: java.lang.String,
    obj: js.Object
  ): Chainable[Subject] = js.native
  /**
    * Assert that the selection contains at least one element which has a descendant matching the given selector, using `.has()`.
    * @example
    *    cy.get('#result').should('have.descendants', 'h1')
    * @see http://chaijs.com/plugins/chai-jquery/#descendantsselector
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havedescendants(chainer: cypressLib.cypressLibStrings.haveDOTdescendants, selector: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection is equal to the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('have.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havehtml(chainer: cypressLib.cypressLibStrings.haveDOThtml, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given id, using `.attr('id')`.
    * @example
    *    cy.get('#result').should('have.id', 'result')
    * @see http://chaijs.com/plugins/chai-jquery/#idid
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_haveid(chainer: cypressLib.cypressLibStrings.haveDOTid, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_haveid(
    chainer: cypressLib.cypressLibStrings.haveDOTid,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length', 3)
    *    cy.wrap('foo').should('have.length', 3)
    * @alias lengthOf
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havelength(chainer: cypressLib.cypressLibStrings.haveDOTlength, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.greaterThan', 2)
    *    cy.wrap('foo').should('have.length.greaterThan', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havelengthgreaterThan(chainer: cypressLib.cypressLibStrings.haveDOTlengthDOTgreaterThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.gt', 2)
    *    cy.wrap('foo').should('have.length.gt', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havelengthgt(chainer: cypressLib.cypressLibStrings.haveDOTlengthDOTgt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is greater than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.gte', 2)
    *    cy.wrap('foo').should('have.length.gte', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havelengthgte(chainer: cypressLib.cypressLibStrings.haveDOTlengthDOTgte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lessThan', 4)
    *    cy.wrap('foo').should('have.length.lessThan', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havelengthlessThan(chainer: cypressLib.cypressLibStrings.haveDOTlengthDOTlessThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lt', 4)
    *    cy.wrap('foo').should('have.length.lt', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havelengthlt(chainer: cypressLib.cypressLibStrings.haveDOTlengthDOTlt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is less than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lte', 4)
    *    cy.wrap('foo').should('have.length.lte', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havelengthlte(chainer: cypressLib.cypressLibStrings.haveDOTlengthDOTlte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target array has the same members as the given array `set`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.members', [2, 1, 3])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havemembers(chainer: cypressLib.cypressLibStrings.haveDOTmembers, values: js.Array[_]): Chainable[Subject] = js.native
  /**
    * Asserts that the target array has the same members as the given array where order matters.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.ordered.members', [1, 2, 3])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_haveorderedmembers(chainer: cypressLib.cypressLibStrings.haveDOTorderedDOTmembers, values: js.Array[_]): Chainable[Subject] = js.native
  /**
    * Causes all `.property` and `.include` assertions that follow in the chain to ignore inherited properties.
    * @example
    *    Object.prototype.b = 2
    *    cy.wrap({ a: 1 }).should('have.property', 'a').and('not.have.ownProperty', 'b')
    * @see http://chaijs.com/api/bdd/#method_ownproperty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_haveownProperty(chainer: cypressLib.cypressLibStrings.haveDOTownProperty, property: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given property, using `.prop()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('have.prop', 'disabled')
    *    cy.get('#result').should('have.prop', 'disabled', false)
    * @see http://chaijs.com/plugins/chai-jquery/#propname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_haveprop(chainer: cypressLib.cypressLibStrings.haveDOTprop, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_haveprop(chainer: cypressLib.cypressLibStrings.haveDOTprop, value: java.lang.String, `match`: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target has a property with the given key `name`.
    * @example
    *    cy.wrap({ a: 1 }).should('have.property', 'a')
    *    cy.wrap({ a: 1 }).should('have.property', 'a', 1)
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_haveproperty(chainer: cypressLib.cypressLibStrings.haveDOTproperty, property: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_haveproperty(chainer: cypressLib.cypressLibStrings.haveDOTproperty, property: java.lang.String, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target string contains the given substring `str`.
    * @example
    *    cy.wrap('foobar').should('have.string', 'bar')
    * @see http://chaijs.com/api/bdd/#method_string
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havestring(chainer: cypressLib.cypressLibStrings.haveDOTstring, `match`: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_havestring(chainer: cypressLib.cypressLibStrings.haveDOTstring, `match`: stdLib.RegExp): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection is equal to the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('have.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havetext(chainer: cypressLib.cypressLibStrings.haveDOTtext, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert spy threw an exception at least once.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spythrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havethrown(chainer: cypressLib.cypressLibStrings.haveDOTthrown): Chainable[Subject] = js.native
  @JSName("should")
  def should_havethrown(chainer: cypressLib.cypressLibStrings.haveDOTthrown, value: nodeLib.Error with stdLib.Error): Chainable[Subject] = js.native
  @JSName("should")
  def should_havethrown(chainer: cypressLib.cypressLibStrings.haveDOTthrown, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_havethrown(chainer: cypressLib.cypressLibStrings.haveDOTthrown, value: stdLib.ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection has the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('have.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_havevalue(chainer: cypressLib.cypressLibStrings.haveDOTvalue, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string `val` is a substring of the target.
    * @example
    *    cy.wrap('foobar').should('include', 'foo')
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_include(chainer: cypressLib.cypressLibStrings.include, value: js.Any): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string `val` is a substring of the target.
    * @example
    *    cy.wrap([1, 2, 3]).should('include.members', [1, 2])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_includemembers(chainer: cypressLib.cypressLibStrings.includeDOTmembers, value: js.Array[_]): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.increase` asserts that the given function `subject` returns a greater number when it’s
    * invoked after invoking the target function compared to when it’s invoked beforehand.
    * `.increase` also causes all `.by` assertions that follow in the chain to assert how much greater of a number is returned.
    * It’s often best to assert that the return value increased by the expected amount, rather than asserting it increased by any amount.
    * @example
    *    let val = 1
    *    function addTwo() { val += 2 }
    *    function getVal() { return val }
    *    cy.wrap(addTwo).should('increase', getVal)
    * @see http://chaijs.com/api/bdd/#method_increase
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_increase(chainer: cypressLib.cypressLibStrings.increase, value: js.Object, property: java.lang.String): Chainable[Subject] = js.native
  /**
    * Asserts that the target matches the given regular expression `re`.
    * @example
    *    cy.wrap('foobar').should('match', /^foo/)
    * @see http://chaijs.com/api/bdd/#method_match
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_match(chainer: cypressLib.cypressLibStrings.`match`, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_match(chainer: cypressLib.cypressLibStrings.`match`, value: stdLib.RegExp): Chainable[Subject] = js.native
  /**
    * Assert spy not always returned the provided value.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notalwaysreturned(chainer: cypressLib.cypressLibStrings.notDOTalwaysDOTreturned, value: js.Any): Chainable[Subject] = js.native
  // chai.not
  /**
    * Asserts that the target’s `type` is not equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap('foo').should('not.be.a', 'number')
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbea(chainer: cypressLib.cypressLibStrings.notDOTbeDOTa, `type`: java.lang.String): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or not a date greater than the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.above', 10)
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbeabove(chainer: cypressLib.cypressLibStrings.notDOTbeDOTabove, value: scala.Double): Chainable[Subject] = js.native
  @JSName("should")
  def should_notbeabove(chainer: cypressLib.cypressLibStrings.notDOTbeDOTabove, value: stdLib.Date): Chainable[Subject] = js.native
  /**
    * Assert if spy was not always called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwayscalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbealwayscalledWithMatch(chainer: cypressLib.cypressLibStrings.notDOTbeDOTalwaysDOTcalledWithMatch, args: js.Any*): Chainable[Subject] = js.native
  // sinon-chai.not
  /**
    * Assert spy/stub was not called the `new` operator.
    * Beware that this is inferred based on the value of the this object and the spy function’s prototype, so it may give false positives if you actively return the right kind of object.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithnew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbealwayscalledWithNew(chainer: cypressLib.cypressLibStrings.notDOTbeDOTalwaysDOTcalledWithNew): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `type` is not equal to the given string type.
    * Types are case insensitive. See the `type-detect` project page for info on the type detection algorithm:
    * https://github.com/chaijs/type-detect.
    * @example
    *    cy.wrap('foo').should('not.be.an', 'object')
    * @alias a
    * @see http://chaijs.com/api/bdd/#method_a
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbean(chainer: cypressLib.cypressLibStrings.notDOTbeDOTan, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number that’s within a given +/- `delta` range of the given number `expected`. However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('not.be.approximately', 6, 0.5)
    * @alias closeTo
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbeapproximately(
    chainer: cypressLib.cypressLibStrings.notDOTbeDOTapproximately,
    value: scala.Double,
    delta: scala.Double
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not an `arguments` object.
    * @example
    *    cy.wrap(1).should('not.be.arguments')
    * @see http://chaijs.com/api/bdd/#method_arguments
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbearguments(chainer: cypressLib.cypressLibStrings.notDOTbeDOTarguments): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or not a `n` date greater than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.at.least', 10)
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbeatleast(chainer: cypressLib.cypressLibStrings.notDOTbeDOTatDOTleast, value: scala.Double): Chainable[Subject] = js.native
  @JSName("should")
  def should_notbeatleast(chainer: cypressLib.cypressLibStrings.notDOTbeDOTatDOTleast, value: stdLib.Date): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or not a `n` date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.below', 1)
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbebelow(chainer: cypressLib.cypressLibStrings.notDOTbeDOTbelow, value: scala.Double): Chainable[Subject] = js.native
  /**
    * `true` if the spy was not called at least once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbecalled(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalled): Chainable[Subject] = js.native
  /**
    * Assert spy was not.called after `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledafteranotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbecalledAfter(
    chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledAfter,
    spy: sinonLib.sinonMod.SinonNs.SinonSpy
  ): Chainable[Subject] = js.native
  /**
    * Assert spy was not called before `anotherSpy`
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledbeforeanotherspy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbecalledBefore(
    chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledBefore,
    spy: sinonLib.sinonMod.SinonNs.SinonSpy
  ): Chainable[Subject] = js.native
  /**
    * Assert spy was not called at least once with `obj` as `this`. `calledOn` also accepts a matcher (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers)).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbecalledOn(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledOn, context: js.Any): Chainable[Subject] = js.native
  /**
    * Assert spy was not called exactly once
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledonce
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbecalledOnce(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledOnce): Chainable[Subject] = js.native
  /**
    * Assert spy was not called exactly three times
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledthrice
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbecalledThrice(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledThrice): Chainable[Subject] = js.native
  /**
    * Assert spy was not called exactly twice
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledtwice
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbecalledTwice(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledTwice): Chainable[Subject] = js.native
  /**
    * Assert spy was not called at least once with the provided arguments and no others.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithexactlyarg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbecalledWithExactly(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledWithExactly, args: js.Any*): Chainable[Subject] = js.native
  /**
    * Assert spy was not called with matching arguments (and possibly others).
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithmatcharg1-arg2-
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbecalledWithMatch(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledWithMatch, args: js.Any*): Chainable[Subject] = js.native
  /**
    * Assert spy/stub was not called the `new` operator.
    * Beware that this is inferred based on the value of the this object and the spy function’s prototype, so it may give false positives if you actively return the right kind of object.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycalledwithnew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbecalledWithNew(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcalledWithNew): Chainable[Subject] = js.native
  // jquery-chai.not
  /**
    * Assert that at least one element of the selection is not checked, using `.is(':checked')`.
    * @example
    *    cy.get('#result').should('not.be.checked')
    * @see http://chaijs.com/plugins/chai-jquery/#checked
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbechecked(chainer: cypressLib.cypressLibStrings.notDOTbeDOTchecked): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number that’s within a given +/- `delta` range of the given number `expected`. However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(5.1).should('not.be.closeTo', 6, 0.5)
    * @see http://chaijs.com/api/bdd/#method_closeto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbecloseTo(chainer: cypressLib.cypressLibStrings.notDOTbeDOTcloseTo, value: scala.Double, delta: scala.Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not disabled, using `.is(':disabled')`.
    * @example
    *    cy.get('#result').should('not.be.disabled')
    * @see http://chaijs.com/plugins/chai-jquery/#disabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbedisabled(chainer: cypressLib.cypressLibStrings.notDOTbeDOTdisabled): Chainable[Subject] = js.native
  /**
    * When the target is a not string or array, .empty asserts that the target’s length property is strictly (===) equal to 0
    * @example
    *    cy.wrap([1]).should('not.be.empty')
    *    cy.wrap('foo').should('not.be.empty')
    * @see http://chaijs.com/api/bdd/#method_empty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbeempty(chainer: cypressLib.cypressLibStrings.notDOTbeDOTempty): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not enabled, using `.is(':enabled')`.
    * @example
    *    cy.get('#result').should('not.be.enabled')
    * @see http://chaijs.com/plugins/chai-jquery/#enabled
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbeenabled(chainer: cypressLib.cypressLibStrings.notDOTbeDOTenabled): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to `false`.
    * @example
    *    cy.wrap(true).should('not.be.false')
    * @see http://chaijs.com/api/bdd/#method_false
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbefalse(chainer: cypressLib.cypressLibStrings.notDOTbeDOTfalse): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or a date greater than the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('be.greaterThan', 7)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbegreaterThan(chainer: cypressLib.cypressLibStrings.notDOTbeDOTgreaterThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or a date greater than the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.gt', 7)
    * @alias above
    * @see http://chaijs.com/api/bdd/#method_above
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbegt(chainer: cypressLib.cypressLibStrings.notDOTbeDOTgt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is a not number or a `n` date greater than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(6).should('not.be.gte', 7)
    * @alias least
    * @see http://chaijs.com/api/bdd/#method_least
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbegte(chainer: cypressLib.cypressLibStrings.notDOTbeDOTgte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not hidden, using `.is(':hidden')`.
    * @example
    *    cy.get('#result').should('not.be.hidden')
    * @see http://chaijs.com/plugins/chai-jquery/#hidden
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbehidden(chainer: cypressLib.cypressLibStrings.notDOTbeDOThidden): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not an instance of the given `constructor`.
    * @example
    *    cy.wrap([1, 2]).should('not.be.instanceOf', String)
    * @see http://chaijs.com/api/bdd/#method_instanceof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbeinstanceOf(chainer: cypressLib.cypressLibStrings.notDOTbeDOTinstanceOf, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.lessThan', 3)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbelessThan(chainer: cypressLib.cypressLibStrings.notDOTbeDOTlessThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a `n` date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.lt', 3)
    * @alias below
    * @see http://chaijs.com/api/bdd/#method_below
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbelt(chainer: cypressLib.cypressLibStrings.notDOTbeDOTlt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a date less than or equal to the given number or date n respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(4).should('not.be.lte', 3)
    * @alias most
    * @see http://chaijs.com/api/bdd/#method_most
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbelte(chainer: cypressLib.cypressLibStrings.notDOTbeDOTlte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not loosely (`==`) equal to `true`. However, it’s often best to assert that the target is strictly (`===`) or deeply equal to its expected value.
    * @example
    *    cy.wrap(0).should('not.be.ok')
    * @see http://chaijs.com/api/bdd/#method_ok
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbeok(chainer: cypressLib.cypressLibStrings.notDOTbeDOTok): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not selected, using `.is(':selected')`.
    * @example
    *    cy.get('#result').should('not.be.selected')
    * @see http://chaijs.com/plugins/chai-jquery/#selected
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbeselected(chainer: cypressLib.cypressLibStrings.notDOTbeDOTselected): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to true.
    * @example
    *    cy.wrap(false).should('not.be.true')
    * @see http://chaijs.com/api/bdd/#method_true
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbetrue(chainer: cypressLib.cypressLibStrings.notDOTbeDOTtrue): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to undefined.
    * @example
    *    cy.wrap(true).should('not.be.undefined')
    * @see http://chaijs.com/api/bdd/#method_undefined
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbeundefined(chainer: cypressLib.cypressLibStrings.notDOTbeDOTundefined): Chainable[Subject] = js.native
  /**
    * Assert that at least one element of the selection is not visible, using `.is(':visible')`.
    * @example
    *    cy.get('#result').should('not.be.visible')
    * @see http://chaijs.com/plugins/chai-jquery/#visible
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbevisible(chainer: cypressLib.cypressLibStrings.notDOTbeDOTvisible): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not a number or a date greater than or equal to the given number or date `start`, and less than or equal to the given number or date `finish` respectively.
    * However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(3).should('not.be.within', 5, 10)
    * @see http://chaijs.com/api/bdd/#method_within
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbewithin(chainer: cypressLib.cypressLibStrings.notDOTbeDOTwithin, start: scala.Double, end: scala.Double): Chainable[Subject] = js.native
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notbewithin(chainer: cypressLib.cypressLibStrings.notDOTbeDOTwithin, start: stdLib.Date, end: stdLib.Date): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.change` asserts that the given function `subject` returns a different value when it’s invoked before the target function compared to when it’s invoked afterward.
    * However, it’s often best to assert that `subject` is equal to its expected value.
    * @example
    *    let dots = ''
    *    function addDot() { dots += '.' }
    *    function getDots() { return dots }
    *    cy.wrap(() => {}).should('not.change', getDots)
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notchange(chainer: cypressLib.cypressLibStrings.notDOTchange, fn: js.Function1[/* repeated */ js.Any, _]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.change` asserts that the value of the given object `subject`'s `prop` property is different before invoking the target function compared to afterward.
    * @example
    *    const myObj = { dots: '' }
    *    function addDot() { myObj.dots += '.' }
    *    cy.wrap(() => {}).should('not.change', myObj, 'dots')
    * @see http://chaijs.com/api/bdd/#method_change
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notchange(chainer: cypressLib.cypressLibStrings.notDOTchange, obj: js.Object, prop: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the selection does not contain the given text, using `:contains()`. If the object asserted against is not a jQuery object, or if `contain` is not called as a function, the original implementation will be called.
    * @example
    *    cy.get('#result').should('not.contain', 'text')
    * @see http://chaijs.com/plugins/chai-jquery/#containtext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notcontain(chainer: cypressLib.cypressLibStrings.notDOTcontain, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string val is a substring of the target.
    * @example
    *    cy.wrap('tester').should('not.contain', 'foo')
    * @alias include
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notcontain(chainer: cypressLib.cypressLibStrings.notDOTcontain, value: js.Any): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.decrease` asserts that the given function `subject` does not returns a lesser number when it’s invoked after invoking the target function compared to when it’s invoked beforehand.
    * `.decrease` also causes all `.by` assertions that follow in the chain to assert how much lesser of a number is returned. It’s often best to assert that the return value decreased by the expected amount, rather than asserting it decreased by any amount.
    * @example
    *    let val = 1
    *    function subtractTwo() { val -= 2 }
    *    function getVal() { return val }
    *    cy.wrap(() => {}).should('not.decrease', getVal)
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notdecrease(chainer: cypressLib.cypressLibStrings.notDOTdecrease, fn: js.Function1[/* repeated */ js.Any, _]): Chainable[Subject] = js.native
  /**
    * When two arguments are provided, `.decrease` asserts that the value of the given object `subject`'s `prop` property is not lesser after invoking the target function compared to beforehand.
    * @example
    *    const myObj = { val: 1 }
    *    function subtractTwo() { myObj.val -= 2 }
    *    cy.wrap(() => {}).should('not.decrease', myObj, 'val')
    * @see http://chaijs.com/api/bdd/#method_decrease
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notdecrease(chainer: cypressLib.cypressLibStrings.notDOTdecrease, obj: js.Object, prop: java.lang.String): Chainable[Subject] = js.native
  /**
    * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property` assertions that follow in the chain to not use deep equality instead of strict (`===`) equality. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ a: 1 }).should('not.deep.equal', { b: 1 })
    * @see http://chaijs.com/api/bdd/#method_deep
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notdeepequal(chainer: cypressLib.cypressLibStrings.notDOTdeepDOTequal, value: Subject): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('not.eq', 2)
    * @alias equal
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_noteq(chainer: cypressLib.cypressLibStrings.notDOTeq, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not deeply equal to the given `obj`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({a: 1}).should('not.eql', {c: 1}).and('not.equal', {a: 1})
    * @see http://chaijs.com/api/bdd/#method_eql
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_noteql(chainer: cypressLib.cypressLibStrings.notDOTeql, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to the given `val`.
    * @example
    *    cy.wrap(1).should('not.equal', 2)
    * @see http://chaijs.com/api/bdd/#method_equal
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notequal(chainer: cypressLib.cypressLibStrings.notDOTequal, value: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target is not strictly (`===`) equal to either `null` or `undefined`. However, it’s often best to assert that the target is equal to its expected value.
    * @example
    *    cy.wrap(null).should('not.exist')
    * @see http://chaijs.com/api/bdd/#method_exist
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notexist(chainer: cypressLib.cypressLibStrings.notDOTexist): Chainable[Subject] = js.native
  /**
    * Causes all `.keys` assertions that follow in the chain to not require that the target have all of the given keys. This is the opposite of `.any`, which only requires that the target have at least one of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('not.have.all.keys', 'c', 'd')
    * @see http://chaijs.com/api/bdd/#method_all
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothaveallkeys(chainer: cypressLib.cypressLibStrings.notDOThaveDOTallDOTkeys, value: java.lang.String*): Chainable[Subject] = js.native
  /**
    * Assert spy did not always throw an exception.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyalwaysthrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavealwaysthrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTalwaysDOTthrown): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavealwaysthrown(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTalwaysDOTthrown,
    value: nodeLib.Error with stdLib.Error
  ): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavealwaysthrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTalwaysDOTthrown, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavealwaysthrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTalwaysDOTthrown, value: stdLib.ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Causes all `.keys` assertions that follow in the chain to only require that the target not have at least one of the given keys. This is the opposite of `.all`, which requires that the target have all of the given keys.
    * @example
    *    cy.wrap({ a: 1, b: 2 }).should('not.have.any.keys', 'c')
    * @see http://chaijs.com/api/bdd/#method_any
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothaveanykeys(chainer: cypressLib.cypressLibStrings.notDOThaveDOTanyDOTkeys, value: java.lang.String*): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.attr', 'role')
    *    cy.get('#result').should('not.have.attr', 'role', 'menu')
    * @see http://chaijs.com/plugins/chai-jquery/#attrname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothaveattr(chainer: cypressLib.cypressLibStrings.notDOThaveDOTattr, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothaveattr(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTattr,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Assert not the number of calls.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spycallcount
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavecallCount(chainer: cypressLib.cypressLibStrings.notDOThaveDOTcallCount, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given attribute, using `.attr()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.class', 'success')
    * @see http://chaijs.com/plugins/chai-jquery/#classclassname
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothaveclass(chainer: cypressLib.cypressLibStrings.notDOThaveDOTclass, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given CSS property, using `.css()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.css', 'display', 'none')
    * @see http://chaijs.com/plugins/chai-jquery/#cssname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavecss(chainer: cypressLib.cypressLibStrings.notDOThaveDOTcss, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavecss(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTcss,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given data value, using `.data()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.data', 'foo', 'bar')
    * @see http://chaijs.com/plugins/chai-jquery/#dataname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavedata(chainer: cypressLib.cypressLibStrings.notDOThaveDOTdata, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavedata(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTdata,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target does not have a property with the given key `name`. See the `deep-eql` project page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
    * @example
    *    cy.wrap({ x: {a: 1 }}).should('not.have.deep.property', 'y', { a: 1 })
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavedeepproperty(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTdeepDOTproperty,
    value: java.lang.String,
    obj: js.Object
  ): Chainable[Subject] = js.native
  /**
    * Assert that the selection does not contain at least one element which has a descendant matching the given selector, using `.has()`.
    * @example
    *    cy.get('#result').should('not.have.descendants', 'h1')
    * @see http://chaijs.com/plugins/chai-jquery/#descendantsselector
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavedescendants(chainer: cypressLib.cypressLibStrings.notDOThaveDOTdescendants, selector: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the html of the first element of the selection is not equal to the given html, using `.html()`.
    * @example
    *    cy.get('#result').should('not.have.html', '<em>John Doe</em>')
    * @see http://chaijs.com/plugins/chai-jquery/#htmlhtml
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavehtml(chainer: cypressLib.cypressLibStrings.notDOThaveDOThtml, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given id, using `.attr('id')`.
    * @example
    *    cy.get('#result').should('not.have.id', 'result')
    * @see http://chaijs.com/plugins/chai-jquery/#idid
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothaveid(chainer: cypressLib.cypressLibStrings.notDOThaveDOTid, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothaveid(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTid,
    value: java.lang.String,
    `match`: java.lang.String
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is not equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length', 2)
    * cy.wrap('foo').should('not.have.length', 2)
    * @alias lengthOf
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavelength(chainer: cypressLib.cypressLibStrings.notDOThaveDOTlength, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is not greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.greaterThan', 4)
    *    cy.wrap('foo').should('not.have.length.greaterThan', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavelengthgreaterThan(chainer: cypressLib.cypressLibStrings.notDOThaveDOTlengthDOTgreaterThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is not greater than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.gt', 4)
    *    cy.wrap('foo').should('not.have.length.gt', 4)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavelengthgt(chainer: cypressLib.cypressLibStrings.notDOThaveDOTlengthDOTgt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('have.length.lessThan', 2)
    *    cy.wrap('foo').should('have.length.lessThan', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavelengthlessThan(chainer: cypressLib.cypressLibStrings.notDOThaveDOTlengthDOTlessThan, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is not less than to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.lt', 2)
    *    cy.wrap('foo').should('not.have.length.lt', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavelengthlt(chainer: cypressLib.cypressLibStrings.notDOThaveDOTlengthDOTlt, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target’s `length` property is not less than or equal to the given number `n`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.length.let', 2)
    *    cy.wrap('foo').should('not.have.length.lte', 2)
    * @see http://chaijs.com/api/bdd/#method_lengthof
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavelengthlte(chainer: cypressLib.cypressLibStrings.notDOThaveDOTlengthDOTlte, value: scala.Double): Chainable[Subject] = js.native
  /**
    * Asserts that the target array does not have the same members as the given array `set`.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.have.members', [4, 5, 6])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavemembers(chainer: cypressLib.cypressLibStrings.notDOThaveDOTmembers, values: js.Array[_]): Chainable[Subject] = js.native
  /**
    * Asserts that the target array does not have the same members as the given array where order matters.
    * @example
    *    cy.wrap([1, 2, 3]).should('not. have.ordered.members', [4, 5, 6])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothaveorderedmembers(chainer: cypressLib.cypressLibStrings.notDOThaveDOTorderedDOTmembers, values: js.Array[_]): Chainable[Subject] = js.native
  /**
    * Causes all `.property` and `.include` assertions that follow in the chain to ignore inherited properties.
    * @example
    *    Object.prototype.b = 2
    *    cy.wrap({ a: 1 }).should('have.property', 'a').and('not.have.ownProperty', 'b')
    * @see http://chaijs.com/api/bdd/#method_ownproperty
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothaveownProperty(chainer: cypressLib.cypressLibStrings.notDOThaveDOTownProperty, property: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given property, using `.prop()`. Optionally, assert a particular value as well. The return value is available for chaining.
    * @example
    *    cy.get('#result').should('not.have.prop', 'disabled')
    *    cy.get('#result').should('not.have.prop', 'disabled', false)
    * @see http://chaijs.com/plugins/chai-jquery/#propname-value
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothaveprop(chainer: cypressLib.cypressLibStrings.notDOThaveDOTprop, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothaveprop(chainer: cypressLib.cypressLibStrings.notDOThaveDOTprop, value: java.lang.String, `match`: js.Any): Chainable[Subject] = js.native
  /**
    * Asserts that the target has a property with the given key `name`.
    * @example
    *    cy.wrap({ a: 1 }).should('not.have.property', 'b')
    *    cy.wrap({ a: 1 }).should('not.have.property', 'b', 1)
    * @see http://chaijs.com/api/bdd/#method_property
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothaveproperty(chainer: cypressLib.cypressLibStrings.notDOThaveDOTproperty, property: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothaveproperty(
    chainer: cypressLib.cypressLibStrings.notDOThaveDOTproperty,
    property: java.lang.String,
    value: js.Any
  ): Chainable[Subject] = js.native
  /**
    * Asserts that the target string does not contains the given substring `str`.
    * @example
    *    cy.wrap('foobar').should('not.have.string', 'baz')
    * @see http://chaijs.com/api/bdd/#method_string
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavestring(chainer: cypressLib.cypressLibStrings.notDOThaveDOTstring, `match`: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavestring(chainer: cypressLib.cypressLibStrings.notDOThaveDOTstring, `match`: stdLib.RegExp): Chainable[Subject] = js.native
  /**
    * Assert that the text of the first element of the selection is not equal to the given text, using `.text()`.
    * @example
    *    cy.get('#result').should('not.have.text', 'John Doe')
    * @see http://chaijs.com/plugins/chai-jquery/#texttext
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavetext(chainer: cypressLib.cypressLibStrings.notDOThaveDOTtext, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert spy did not throw an exception at least once.
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spythrew
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavethrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTthrown): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavethrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTthrown, value: nodeLib.Error with stdLib.Error): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavethrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTthrown, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_nothavethrown(chainer: cypressLib.cypressLibStrings.notDOThaveDOTthrown, value: stdLib.ErrorConstructor): Chainable[Subject] = js.native
  /**
    * Assert that the first element of the selection does not have the given value, using `.val()`.
    * @example
    *    cy.get('textarea').should('not.have.value', 'foo bar baz')
    * @see http://chaijs.com/plugins/chai-jquery/#valuevalue
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_nothavevalue(chainer: cypressLib.cypressLibStrings.notDOThaveDOTvalue, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string `val` is not a substring of the target.
    * @example
    *    cy.wrap('foobar').should('not.include', 'baz')
    * @see http://chaijs.com/api/bdd/#method_include
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notinclude(chainer: cypressLib.cypressLibStrings.notDOTinclude, value: js.Any): Chainable[Subject] = js.native
  /**
    * When the target is a string, `.include` asserts that the given string `val` is not a substring of the target.
    * @example
    *    cy.wrap([1, 2, 3]).should('not.include.members', [4, 5])
    * @see http://chaijs.com/api/bdd/#method_members
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notincludemembers(chainer: cypressLib.cypressLibStrings.notDOTincludeDOTmembers, value: js.Array[_]): Chainable[Subject] = js.native
  /**
    * When one argument is provided, `.increase` asserts that the given function `subject` returns a greater number when it’s
    * invoked after invoking the target function compared to when it’s invoked beforehand.
    * `.increase` also causes all `.by` assertions that follow in the chain to assert how much greater of a number is returned.
    * It’s often best to assert that the return value increased by the expected amount, rather than asserting it increased by any amount.
    * @example
    *    let val = 1
    *    function addTwo() { val += 2 }
    *    function getVal() { return val }
    *    cy.wrap(() => {}).should('not.increase', getVal)
    * @see http://chaijs.com/api/bdd/#method_increase
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notincrease(chainer: cypressLib.cypressLibStrings.notDOTincrease, value: js.Object, property: java.lang.String): Chainable[Subject] = js.native
  /**
    * Asserts that the target does not match the given regular expression `re`.
    * @example
    *    cy.wrap('foobar').should('not.match', /baz$/)
    * @see http://chaijs.com/api/bdd/#method_match
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notmatch(chainer: cypressLib.cypressLibStrings.notDOTmatch, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_notmatch(chainer: cypressLib.cypressLibStrings.notDOTmatch, value: stdLib.RegExp): Chainable[Subject] = js.native
  /**
    * When the target is a non-function object, `.respondTo` asserts that the target does not have a `method` with the given name method. The method can be own or inherited, and it can be enumerable or non-enumerable.
    * @example
    *    class Cat {
    *      meow() {}
    *    }
    *    cy.wrap(new Cat()).should('not.respondTo', 'bark')
    * @see http://chaijs.com/api/bdd/#method_respondto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notrespondTo(chainer: cypressLib.cypressLibStrings.notDOTrespondTo, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert spy did not return the provided value at least once. (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers))
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notreturned(chainer: cypressLib.cypressLibStrings.notDOTreturned, value: js.Any): Chainable[Subject] = js.native
  /**
    * Invokes the given `matcher` function with the target being passed as the first argument, and asserts that the value returned is falsy.
    * @example
    *    cy.wrap(1).should('not.satisfy', (num) => num < 0)
    * @see http://chaijs.com/api/bdd/#method_satisfy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_notsatisfy(
    chainer: cypressLib.cypressLibStrings.notDOTsatisfy,
    fn: js.Function1[/* val */ js.Any, scala.Boolean]
  ): Chainable[Subject] = js.native
  /**
    * When the target is a non-function object, `.respondTo` asserts that the target has a `method` with the given name method. The method can be own or inherited, and it can be enumerable or non-enumerable.
    * @example
    *    class Cat {
    *      meow() {}
    *    }
    *    cy.wrap(new Cat()).should('respondTo', 'meow')
    * @see http://chaijs.com/api/bdd/#method_respondto
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_respondTo(chainer: cypressLib.cypressLibStrings.respondTo, value: java.lang.String): Chainable[Subject] = js.native
  /**
    * Assert spy returned the provided value at least once. (see [matchers](http://sinonjs.org/releases/v4.1.3/spies/#matchers))
    * @see http://sinonjs.org/releases/v4.1.3/spies/#spyreturnedobj
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_returned(chainer: cypressLib.cypressLibStrings.returned, value: js.Any): Chainable[Subject] = js.native
  /**
    * Invokes the given `matcher` function with the target being passed as the first argument, and asserts that the value returned is truthy.
    * @example
    *    cy.wrap(1).should('satisfy', (num) => num > 0)
    * @see http://chaijs.com/api/bdd/#method_satisfy
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_satisfy(chainer: cypressLib.cypressLibStrings.satisfy, fn: js.Function1[/* val */ js.Any, scala.Boolean]): Chainable[Subject] = js.native
  /**
    * When no arguments are provided, `.throw` invokes the target function and asserts that an error is thrown.
    * When one argument is provided, and it’s a string, `.throw` invokes the target function and asserts that an error is thrown with a message that contains that string.
    * @example
    *    function badFn() { throw new TypeError('Illegal salmon!') }
    *    cy.wrap(badFn).should('throw')
    *    cy.wrap(badFn).should('throw', 'salmon')
    *    cy.wrap(badFn).should('throw', /salmon/)
    * @see http://chaijs.com/api/bdd/#method_throw
    * @see https://on.cypress.io/assertions
    */
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_throw(chainer: cypressLib.cypressLibStrings.`throw`): Chainable[Subject] = js.native
  /**
    * When no arguments are provided, `.throw` invokes the target function and asserts that an error is thrown.
    * When one argument is provided, and it’s a string, `.throw` invokes the target function and asserts that an error is thrown with a message that contains that string.
    * @example
    *    function badFn() { throw new TypeError('Illegal salmon!') }
    *    cy.wrap(badFn).should('throw')
    *    cy.wrap(badFn).should('throw', 'salmon')
    *    cy.wrap(badFn).should('throw', /salmon/)
    * @see http://chaijs.com/api/bdd/#method_throw
    * @see https://on.cypress.io/assertions
    */
  // tslint:disable-next-line ban-types
  /**
    * Create an assertion. Assertions are automatically retried until they pass or time out.
    *
    * @see https://on.cypress.io/should
    */
  @JSName("should")
  def should_throw(chainer: cypressLib.cypressLibStrings.`throw`, error: nodeLib.Error with stdLib.Error): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(
    chainer: cypressLib.cypressLibStrings.`throw`,
    error: nodeLib.Error with stdLib.Error,
    expected: java.lang.String
  ): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(
    chainer: cypressLib.cypressLibStrings.`throw`,
    error: nodeLib.Error with stdLib.Error,
    expected: stdLib.RegExp
  ): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(chainer: cypressLib.cypressLibStrings.`throw`, error: js.Function): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(chainer: cypressLib.cypressLibStrings.`throw`, error: js.Function, expected: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(chainer: cypressLib.cypressLibStrings.`throw`, error: js.Function, expected: stdLib.RegExp): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(chainer: cypressLib.cypressLibStrings.`throw`, value: java.lang.String): Chainable[Subject] = js.native
  @JSName("should")
  def should_throw(chainer: cypressLib.cypressLibStrings.`throw`, value: stdLib.RegExp): Chainable[Subject] = js.native
  /**
    * Get all sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings() // Yield all siblings of "td"
    */
  def siblings[E /* <: stdLib.Node */](): Chainable[jqueryLib.JQuery[E]] = js.native
  def siblings[E /* <: stdLib.Node */](options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get all sibling DOM elements that match given selector.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    // Yield all elements with class "foo" that are siblings of "td"
    *    cy.get('td').siblings('.foo')
    */
  def siblings[E /* <: stdLib.Node */](selector: java.lang.String): Chainable[jqueryLib.JQuery[E]] = js.native
  def siblings[E /* <: stdLib.Node */](selector: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_a(selector: cypressLib.cypressLibStrings.a): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  @JSName("siblings")
  def siblings_a(selector: cypressLib.cypressLibStrings.a, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAnchorElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_abbr(selector: cypressLib.cypressLibStrings.abbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_abbr(selector: cypressLib.cypressLibStrings.abbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_address(selector: cypressLib.cypressLibStrings.address): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_address(selector: cypressLib.cypressLibStrings.address, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_applet(selector: cypressLib.cypressLibStrings.applet): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  @JSName("siblings")
  def siblings_applet(selector: cypressLib.cypressLibStrings.applet, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAppletElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_area(selector: cypressLib.cypressLibStrings.area): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  @JSName("siblings")
  def siblings_area(selector: cypressLib.cypressLibStrings.area, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAreaElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_article(selector: cypressLib.cypressLibStrings.article): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_article(selector: cypressLib.cypressLibStrings.article, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_aside(selector: cypressLib.cypressLibStrings.aside): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_aside(selector: cypressLib.cypressLibStrings.aside, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_audio(selector: cypressLib.cypressLibStrings.audio): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  @JSName("siblings")
  def siblings_audio(selector: cypressLib.cypressLibStrings.audio, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLAudioElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_b(selector: cypressLib.cypressLibStrings.b): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_b(selector: cypressLib.cypressLibStrings.b, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_base(selector: cypressLib.cypressLibStrings.base): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  @JSName("siblings")
  def siblings_base(selector: cypressLib.cypressLibStrings.base, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_basefont(selector: cypressLib.cypressLibStrings.basefont): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  @JSName("siblings")
  def siblings_basefont(
    selector: cypressLib.cypressLibStrings.basefont,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLBaseFontElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_bdo(selector: cypressLib.cypressLibStrings.bdo): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_bdo(selector: cypressLib.cypressLibStrings.bdo, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_blockquote(selector: cypressLib.cypressLibStrings.blockquote): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("siblings")
  def siblings_blockquote(
    selector: cypressLib.cypressLibStrings.blockquote,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_body(selector: cypressLib.cypressLibStrings.body): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  @JSName("siblings")
  def siblings_body(selector: cypressLib.cypressLibStrings.body, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBodyElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_br(selector: cypressLib.cypressLibStrings.br): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  @JSName("siblings")
  def siblings_br(selector: cypressLib.cypressLibStrings.br, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLBRElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_button(selector: cypressLib.cypressLibStrings.button): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  @JSName("siblings")
  def siblings_button(selector: cypressLib.cypressLibStrings.button, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLButtonElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_canvas(selector: cypressLib.cypressLibStrings.canvas): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  @JSName("siblings")
  def siblings_canvas(selector: cypressLib.cypressLibStrings.canvas, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLCanvasElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_caption(selector: cypressLib.cypressLibStrings.caption): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  @JSName("siblings")
  def siblings_caption(selector: cypressLib.cypressLibStrings.caption, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableCaptionElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_cite(selector: cypressLib.cypressLibStrings.cite): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_cite(selector: cypressLib.cypressLibStrings.cite, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_code(selector: cypressLib.cypressLibStrings.code): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_code(selector: cypressLib.cypressLibStrings.code, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_col(selector: cypressLib.cypressLibStrings.col): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("siblings")
  def siblings_col(selector: cypressLib.cypressLibStrings.col, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_colgroup(selector: cypressLib.cypressLibStrings.colgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  @JSName("siblings")
  def siblings_colgroup(
    selector: cypressLib.cypressLibStrings.colgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTableColElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_data(selector: cypressLib.cypressLibStrings.data): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  @JSName("siblings")
  def siblings_data(selector: cypressLib.cypressLibStrings.data, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDataElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_datalist(selector: cypressLib.cypressLibStrings.datalist): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  @JSName("siblings")
  def siblings_datalist(
    selector: cypressLib.cypressLibStrings.datalist,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLDataListElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_dd(selector: cypressLib.cypressLibStrings.dd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_dd(selector: cypressLib.cypressLibStrings.dd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_del(selector: cypressLib.cypressLibStrings.del): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("siblings")
  def siblings_del(selector: cypressLib.cypressLibStrings.del, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_details(selector: cypressLib.cypressLibStrings.details): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  @JSName("siblings")
  def siblings_details(selector: cypressLib.cypressLibStrings.details, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDetailsElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_dfn(selector: cypressLib.cypressLibStrings.dfn): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_dfn(selector: cypressLib.cypressLibStrings.dfn, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_dialog(selector: cypressLib.cypressLibStrings.dialog): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  @JSName("siblings")
  def siblings_dialog(selector: cypressLib.cypressLibStrings.dialog, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDialogElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_dir(selector: cypressLib.cypressLibStrings.dir): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  @JSName("siblings")
  def siblings_dir(selector: cypressLib.cypressLibStrings.dir, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDirectoryElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_div(selector: cypressLib.cypressLibStrings.div): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  @JSName("siblings")
  def siblings_div(selector: cypressLib.cypressLibStrings.div, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDivElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_dl(selector: cypressLib.cypressLibStrings.dl): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  @JSName("siblings")
  def siblings_dl(selector: cypressLib.cypressLibStrings.dl, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLDListElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_dt(selector: cypressLib.cypressLibStrings.dt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_dt(selector: cypressLib.cypressLibStrings.dt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_em(selector: cypressLib.cypressLibStrings.em): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_em(selector: cypressLib.cypressLibStrings.em, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_embed(selector: cypressLib.cypressLibStrings.embed): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  @JSName("siblings")
  def siblings_embed(selector: cypressLib.cypressLibStrings.embed, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLEmbedElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_fieldset(selector: cypressLib.cypressLibStrings.fieldset): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  @JSName("siblings")
  def siblings_fieldset(
    selector: cypressLib.cypressLibStrings.fieldset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFieldSetElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_figcaption(selector: cypressLib.cypressLibStrings.figcaption): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_figcaption(
    selector: cypressLib.cypressLibStrings.figcaption,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_figure(selector: cypressLib.cypressLibStrings.figure): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_figure(selector: cypressLib.cypressLibStrings.figure, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_font(selector: cypressLib.cypressLibStrings.font): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  @JSName("siblings")
  def siblings_font(selector: cypressLib.cypressLibStrings.font, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFontElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_footer(selector: cypressLib.cypressLibStrings.footer): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_footer(selector: cypressLib.cypressLibStrings.footer, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_form(selector: cypressLib.cypressLibStrings.form): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  @JSName("siblings")
  def siblings_form(selector: cypressLib.cypressLibStrings.form, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFormElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_frame(selector: cypressLib.cypressLibStrings.frame): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  @JSName("siblings")
  def siblings_frame(selector: cypressLib.cypressLibStrings.frame, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_frameset(selector: cypressLib.cypressLibStrings.frameset): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  @JSName("siblings")
  def siblings_frameset(
    selector: cypressLib.cypressLibStrings.frameset,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLFrameSetElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_h1(selector: cypressLib.cypressLibStrings.h1): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h1(selector: cypressLib.cypressLibStrings.h1, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_h2(selector: cypressLib.cypressLibStrings.h2): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h2(selector: cypressLib.cypressLibStrings.h2, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_h3(selector: cypressLib.cypressLibStrings.h3): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h3(selector: cypressLib.cypressLibStrings.h3, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_h4(selector: cypressLib.cypressLibStrings.h4): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h4(selector: cypressLib.cypressLibStrings.h4, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_h5(selector: cypressLib.cypressLibStrings.h5): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h5(selector: cypressLib.cypressLibStrings.h5, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_h6(selector: cypressLib.cypressLibStrings.h6): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  @JSName("siblings")
  def siblings_h6(selector: cypressLib.cypressLibStrings.h6, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadingElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_head(selector: cypressLib.cypressLibStrings.head): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  @JSName("siblings")
  def siblings_head(selector: cypressLib.cypressLibStrings.head, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHeadElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_header(selector: cypressLib.cypressLibStrings.header): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_header(selector: cypressLib.cypressLibStrings.header, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_hgroup(selector: cypressLib.cypressLibStrings.hgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_hgroup(selector: cypressLib.cypressLibStrings.hgroup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_hr(selector: cypressLib.cypressLibStrings.hr): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  @JSName("siblings")
  def siblings_hr(selector: cypressLib.cypressLibStrings.hr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHRElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_html(selector: cypressLib.cypressLibStrings.html): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  @JSName("siblings")
  def siblings_html(selector: cypressLib.cypressLibStrings.html, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLHtmlElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_i(selector: cypressLib.cypressLibStrings.i): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_i(selector: cypressLib.cypressLibStrings.i, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_iframe(selector: cypressLib.cypressLibStrings.iframe): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  @JSName("siblings")
  def siblings_iframe(selector: cypressLib.cypressLibStrings.iframe, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLIFrameElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_img(selector: cypressLib.cypressLibStrings.img): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  @JSName("siblings")
  def siblings_img(selector: cypressLib.cypressLibStrings.img, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLImageElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_input(selector: cypressLib.cypressLibStrings.input): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  @JSName("siblings")
  def siblings_input(selector: cypressLib.cypressLibStrings.input, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLInputElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_ins(selector: cypressLib.cypressLibStrings.ins): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  @JSName("siblings")
  def siblings_ins(selector: cypressLib.cypressLibStrings.ins, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLModElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_kbd(selector: cypressLib.cypressLibStrings.kbd): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_kbd(selector: cypressLib.cypressLibStrings.kbd, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_label(selector: cypressLib.cypressLibStrings.label): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  @JSName("siblings")
  def siblings_label(selector: cypressLib.cypressLibStrings.label, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLabelElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_legend(selector: cypressLib.cypressLibStrings.legend): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  @JSName("siblings")
  def siblings_legend(selector: cypressLib.cypressLibStrings.legend, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLegendElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_li(selector: cypressLib.cypressLibStrings.li): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  @JSName("siblings")
  def siblings_li(selector: cypressLib.cypressLibStrings.li, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLIElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_link(selector: cypressLib.cypressLibStrings.link): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  @JSName("siblings")
  def siblings_link(selector: cypressLib.cypressLibStrings.link, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLLinkElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_map(selector: cypressLib.cypressLibStrings.map): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  @JSName("siblings")
  def siblings_map(selector: cypressLib.cypressLibStrings.map, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMapElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_mark(selector: cypressLib.cypressLibStrings.mark): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_mark(selector: cypressLib.cypressLibStrings.mark, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_marquee(selector: cypressLib.cypressLibStrings.marquee): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  @JSName("siblings")
  def siblings_marquee(selector: cypressLib.cypressLibStrings.marquee, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMarqueeElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_menu(selector: cypressLib.cypressLibStrings.menu): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  @JSName("siblings")
  def siblings_menu(selector: cypressLib.cypressLibStrings.menu, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMenuElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_meta(selector: cypressLib.cypressLibStrings.meta): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  @JSName("siblings")
  def siblings_meta(selector: cypressLib.cypressLibStrings.meta, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMetaElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_meter(selector: cypressLib.cypressLibStrings.meter): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  @JSName("siblings")
  def siblings_meter(selector: cypressLib.cypressLibStrings.meter, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLMeterElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_nav(selector: cypressLib.cypressLibStrings.nav): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_nav(selector: cypressLib.cypressLibStrings.nav, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_noscript(selector: cypressLib.cypressLibStrings.noscript): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_noscript(
    selector: cypressLib.cypressLibStrings.noscript,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_object(selector: cypressLib.cypressLibStrings.`object`): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  @JSName("siblings")
  def siblings_object(
    selector: cypressLib.cypressLibStrings.`object`,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLObjectElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_ol(selector: cypressLib.cypressLibStrings.ol): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  @JSName("siblings")
  def siblings_ol(selector: cypressLib.cypressLibStrings.ol, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOListElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_optgroup(selector: cypressLib.cypressLibStrings.optgroup): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  @JSName("siblings")
  def siblings_optgroup(
    selector: cypressLib.cypressLibStrings.optgroup,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLOptGroupElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_option(selector: cypressLib.cypressLibStrings.option): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  @JSName("siblings")
  def siblings_option(selector: cypressLib.cypressLibStrings.option, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOptionElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_output(selector: cypressLib.cypressLibStrings.output): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  @JSName("siblings")
  def siblings_output(selector: cypressLib.cypressLibStrings.output, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLOutputElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_p(selector: cypressLib.cypressLibStrings.p): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  @JSName("siblings")
  def siblings_p(selector: cypressLib.cypressLibStrings.p, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParagraphElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_param(selector: cypressLib.cypressLibStrings.param): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  @JSName("siblings")
  def siblings_param(selector: cypressLib.cypressLibStrings.param, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLParamElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_picture(selector: cypressLib.cypressLibStrings.picture): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  @JSName("siblings")
  def siblings_picture(selector: cypressLib.cypressLibStrings.picture, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPictureElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_pre(selector: cypressLib.cypressLibStrings.pre): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  @JSName("siblings")
  def siblings_pre(selector: cypressLib.cypressLibStrings.pre, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLPreElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_progress(selector: cypressLib.cypressLibStrings.progress): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  @JSName("siblings")
  def siblings_progress(
    selector: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLProgressElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_q(selector: cypressLib.cypressLibStrings.q): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  @JSName("siblings")
  def siblings_q(selector: cypressLib.cypressLibStrings.q, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLQuoteElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_rt(selector: cypressLib.cypressLibStrings.rt): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_rt(selector: cypressLib.cypressLibStrings.rt, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_ruby(selector: cypressLib.cypressLibStrings.ruby): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_ruby(selector: cypressLib.cypressLibStrings.ruby, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_s(selector: cypressLib.cypressLibStrings.s): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_s(selector: cypressLib.cypressLibStrings.s, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_samp(selector: cypressLib.cypressLibStrings.samp): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_samp(selector: cypressLib.cypressLibStrings.samp, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_script(selector: cypressLib.cypressLibStrings.script): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  @JSName("siblings")
  def siblings_script(selector: cypressLib.cypressLibStrings.script, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLScriptElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_section(selector: cypressLib.cypressLibStrings.section): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_section(selector: cypressLib.cypressLibStrings.section, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_select(selector: cypressLib.cypressLibStrings.select): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  @JSName("siblings")
  def siblings_select(selector: cypressLib.cypressLibStrings.select, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSelectElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_slot(selector: cypressLib.cypressLibStrings.slot): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  @JSName("siblings")
  def siblings_slot(selector: cypressLib.cypressLibStrings.slot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSlotElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_small(selector: cypressLib.cypressLibStrings.small): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_small(selector: cypressLib.cypressLibStrings.small, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_source(selector: cypressLib.cypressLibStrings.source): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  @JSName("siblings")
  def siblings_source(selector: cypressLib.cypressLibStrings.source, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSourceElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_span(selector: cypressLib.cypressLibStrings.span): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  @JSName("siblings")
  def siblings_span(selector: cypressLib.cypressLibStrings.span, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLSpanElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_strong(selector: cypressLib.cypressLibStrings.strong): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_strong(selector: cypressLib.cypressLibStrings.strong, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_style(selector: cypressLib.cypressLibStrings.style): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  @JSName("siblings")
  def siblings_style(selector: cypressLib.cypressLibStrings.style, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLStyleElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_sub(selector: cypressLib.cypressLibStrings.sub): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_sub(selector: cypressLib.cypressLibStrings.sub, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_sup(selector: cypressLib.cypressLibStrings.sup): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_sup(selector: cypressLib.cypressLibStrings.sup, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_table(selector: cypressLib.cypressLibStrings.table): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  @JSName("siblings")
  def siblings_table(selector: cypressLib.cypressLibStrings.table, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_tbody(selector: cypressLib.cypressLibStrings.tbody): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("siblings")
  def siblings_tbody(selector: cypressLib.cypressLibStrings.tbody, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_td(selector: cypressLib.cypressLibStrings.td): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  @JSName("siblings")
  def siblings_td(selector: cypressLib.cypressLibStrings.td, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableDataCellElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_template(selector: cypressLib.cypressLibStrings.template): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  @JSName("siblings")
  def siblings_template(
    selector: cypressLib.cypressLibStrings.template,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTemplateElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_textarea(selector: cypressLib.cypressLibStrings.textarea): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  @JSName("siblings")
  def siblings_textarea(
    selector: cypressLib.cypressLibStrings.textarea,
    options: stdLib.Partial[Loggable with Timeoutable]
  ): Chainable[jqueryLib.JQuery[stdLib.HTMLTextAreaElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_tfoot(selector: cypressLib.cypressLibStrings.tfoot): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("siblings")
  def siblings_tfoot(selector: cypressLib.cypressLibStrings.tfoot, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_th(selector: cypressLib.cypressLibStrings.th): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  @JSName("siblings")
  def siblings_th(selector: cypressLib.cypressLibStrings.th, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableHeaderCellElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_thead(selector: cypressLib.cypressLibStrings.thead): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  @JSName("siblings")
  def siblings_thead(selector: cypressLib.cypressLibStrings.thead, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableSectionElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_time(selector: cypressLib.cypressLibStrings.time): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  @JSName("siblings")
  def siblings_time(selector: cypressLib.cypressLibStrings.time, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTimeElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_title(selector: cypressLib.cypressLibStrings.title): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  @JSName("siblings")
  def siblings_title(selector: cypressLib.cypressLibStrings.title, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTitleElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_tr(selector: cypressLib.cypressLibStrings.tr): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  @JSName("siblings")
  def siblings_tr(selector: cypressLib.cypressLibStrings.tr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTableRowElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_track(selector: cypressLib.cypressLibStrings.track): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  @JSName("siblings")
  def siblings_track(selector: cypressLib.cypressLibStrings.track, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLTrackElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_u(selector: cypressLib.cypressLibStrings.u): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_u(selector: cypressLib.cypressLibStrings.u, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_ul(selector: cypressLib.cypressLibStrings.ul): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  @JSName("siblings")
  def siblings_ul(selector: cypressLib.cypressLibStrings.ul, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLUListElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_var(selector: cypressLib.cypressLibStrings.`var`): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_var(selector: cypressLib.cypressLibStrings.`var`, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_video(selector: cypressLib.cypressLibStrings.video): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  @JSName("siblings")
  def siblings_video(selector: cypressLib.cypressLibStrings.video, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLVideoElement]] = js.native
  /**
    * Get sibling DOM elements.
    *
    * @see https://on.cypress.io/siblings
    * @example
    *    cy.get('td').siblings('a') // Yield all link siblings of "td"
    */
  @JSName("siblings")
  def siblings_wbr(selector: cypressLib.cypressLibStrings.wbr): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  @JSName("siblings")
  def siblings_wbr(selector: cypressLib.cypressLibStrings.wbr, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[stdLib.HTMLElement]] = js.native
  /**
    * Expand an array into multiple arguments.
    * @see https://on.cypress.io/spread
    * @example
    *    cy.getCookies().spread((cookie1, cookie2, cookie3) => {
    *      // each cookie is now an individual argument
    *    })
    */
  def spread(fn: js.Function1[/* repeated */ js.Any, scala.Unit]): Chainable[Subject] = js.native
  /**
    * Expand an array into multiple arguments.
    * @see https://on.cypress.io/spread
    * @example
    *    cy.getCookies().spread((cookie1, cookie2, cookie3) => {
    *      // each cookie is now an individual argument
    *    })
    */
  @JSName("spread")
  def `spread_S<union>`[S /* <: js.Object | js.Array[_] | java.lang.String | scala.Double | scala.Boolean */](fn: js.Function1[/* repeated */ js.Any, S]): Chainable[S] = js.native
  /**
    * Returns a new spy function.
    * > Note: `.spy()` assumes you are already familiar with our guide: [Stubs, Spies, and Clocks](https://on.cypress.io/stubs-spies-and-clocks)
    *
    * @see https://on.cypress.io/spy
    * @example
    *    const fn = cy.spy() // returns "dumb" spy function
    *    fn(42)
    *    expect(fn).to.have.been.calledOnce
    *    expect(fn).to.have.always.been.calledWithExactly(42)
    */
  def spy(): Agent[sinonLib.sinonMod.SinonNs.SinonSpy] = js.native
  /**
    * Wraps existing function and spies on it, while passing arguments and results.
    * @see https://on.cypress.io/spy
    * @example
    *    const add = (a, b) => a + b
    *    const spy = cy.spy(add)
    *    expect(spy(2, 3)).to.equal(5)
    *    expect(spy).to.have.been.calledWithExactly(2, 3)
    */
  def spy(func: js.Function1[/* repeated */ js.Any, _]): Agent[sinonLib.sinonMod.SinonNs.SinonSpy] = js.native
  /**
    * Spy on a method.
    * @see https://on.cypress.io/spy
    * @example
    *    // assume App.start calls util.addListeners
    *    cy.spy(util, 'addListeners')
    *    App.start()
    *    expect(util.addListeners).to.be.called
    */
  def spy[T](obj: T, method: java.lang.String): Agent[sinonLib.sinonMod.SinonNs.SinonSpy] = js.native
  /**
    * Replace a function, record its usage and control its behavior.
    * > Note: `.stub()` assumes you are already familiar with our guide:
    * [Stubs, Spies, and Clocks](https://on.cypress.io/stubs-spies-and-clocks)
    *
    * @see https://on.cypress.io/stub
    * @example
    *    const fn = cy.stub() // stub without any arguments acts like a spy
    *    fn(42)
    *    expect(fn).to.have.been.calledOnce
    *    expect(fn).to.have.always.been.calledWithExactly(42)
    */
  def stub(): Agent[sinonLib.sinonMod.SinonNs.SinonStub] = js.native
  /**
    * Stubs all the object’s methods.
    *
    * @see https://on.cypress.io/stub
    * @example
    * const o = {
    *  toString () {
    *    return 'foo'
    *  }
    * }
    * expect(o.toString()).to.equal('foo')
    * cy.stub(o)
    * // because stub does not call original function
    * expect(o.toString()).to.equal(undefined)
    * expect(o.toString).to.have.been.calledOnce
    */
  def stub(obj: js.Any): Agent[sinonLib.sinonMod.SinonNs.SinonStub] = js.native
  /**
    * Stubs single method of an object.
    *
    * @see https://on.cypress.io/stub
    * @example
    *    const o = {}
    *    expect(o.toString()).to.equal('[object Object]')
    *    cy.stub(o, 'toString').callsFake(() => 'foo')
    *    expect(o.toString()).to.equal('foo')
    *    expect(o.toString).to.have.been.calledOnce
    */
  def stub[T](obj: T, method: java.lang.String): Agent[sinonLib.sinonMod.SinonNs.SinonStub] = js.native
  /**
    * Stubs a method on an object
    *
    * @deprecated Use `cy.stub(object, name).callsFake(fn)` instead
    */
  def stub[T](obj: T, method: java.lang.String, func: js.Function1[/* repeated */ js.Any, _]): Agent[sinonLib.sinonMod.SinonNs.SinonStub] = js.native
  /**
    * Submit a form.
    *
    * @see https://on.cypress.io/submit
    */
  def submit(): Chainable[Subject] = js.native
  def submit(options: stdLib.Partial[Loggable with Timeoutable]): Chainable[Subject] = js.native
  /**
    * Run a task in Node via the plugins file.
    *
    * @see https://on.cypress.io/task
    */
  def task(event: java.lang.String): Chainable[Subject] = js.native
  def task(event: java.lang.String, arg: js.Any): Chainable[Subject] = js.native
  def task(event: java.lang.String, arg: js.Any, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[Subject] = js.native
  /**
    * Enables you to work with the subject yielded from the previous command.
    *
    * @see https://on.cypress.io/then
    * @example
    *    cy.get('.nav').then(($nav) => {})  // Yields .nav as first arg
    *    cy.location().then((loc) => {})   // Yields location object as first arg
    */
  def `then`(fn: js.ThisFunction1[/* this */ ObjectLike, /* currentSubject */ Subject, scala.Unit]): Chainable[Subject] = js.native
  def `then`(
    fn: js.ThisFunction1[/* this */ ObjectLike, /* currentSubject */ Subject, scala.Unit],
    options: stdLib.Partial[Timeoutable]
  ): Chainable[Subject] = js.native
  /**
    * Enables you to work with the subject yielded from the previous command.
    *
    * @see https://on.cypress.io/then
    */
  /**
    * Enables you to work with the subject yielded from the previous command / promise.
    *
    * @see https://on.cypress.io/then
    */
  @JSName("then")
  def then_S[S](
    fn: js.ThisFunction1[/* this */ ObjectLike, /* currentSubject */ Subject, Chainable[S] | js.Thenable[S]]
  ): Chainable[S] = js.native
  @JSName("then")
  def then_S[S](
    fn: js.ThisFunction1[/* this */ ObjectLike, /* currentSubject */ Subject, Chainable[S] | js.Thenable[S]],
    options: stdLib.Partial[Timeoutable]
  ): Chainable[S] = js.native
  /**
    * Enables you to work with the subject yielded from the previous command / promise.
    *
    * @see https://on.cypress.io/then
    */
  @JSName("then")
  def `then_S<union>`[S /* <: js.Object | js.Array[_] | java.lang.String | scala.Double | scala.Boolean */](fn: js.ThisFunction1[/* this */ ObjectLike, /* currentSubject */ Subject, S]): Chainable[S] = js.native
  @JSName("then")
  def `then_S<union>`[S /* <: js.Object | js.Array[_] | java.lang.String | scala.Double | scala.Boolean */](
    fn: js.ThisFunction1[/* this */ ObjectLike, /* currentSubject */ Subject, S],
    options: stdLib.Partial[Timeoutable]
  ): Chainable[S] = js.native
  /**
    * Move time after overriding a native time function with [cy.clock()](https://on.cypress.io/clock).
    * `cy.clock()` must be called before `cy.tick()`
    *
    * @see https://on.cypress.io/clock
    */
  def tick(milliseconds: scala.Double): Chainable[Clock] = js.native
  /**
    * Get the `document.title` property of the page that is currently active.
    *
    * @see https://on.cypress.io/title
    */
  def title(): Chainable[java.lang.String] = js.native
  def title(options: stdLib.Partial[Loggable]): Chainable[java.lang.String] = js.native
  /**
    * Trigger an event on a DOM element.
    * Custom events... If the following were `.triggerCustom`,
    * `.trigger` strongly typed with event data
    *
    * @see https://on.cypress.io/trigger
    * @example
    *    cy.get('a').trigger('mousedown')
    */
  def trigger(eventName: java.lang.String): Chainable[Subject] = js.native
  def trigger(eventName: java.lang.String, options: stdLib.Partial[TriggerOptions with ObjectLike]): Chainable[Subject] = js.native
  def trigger(eventName: java.lang.String, position: PositionType): Chainable[Subject] = js.native
  def trigger(eventName: java.lang.String, position: PositionType, options: stdLib.Partial[TriggerOptions]): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    * Custom events... If the following were `.triggerCustom`,
    * `.trigger` strongly typed with event data
    *
    * @see https://on.cypress.io/trigger
    * @example
    *    cy.get('a').trigger('mousedown')
    */
  def trigger(eventName: java.lang.String, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  def trigger(
    eventName: java.lang.String,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_abort(eventName: cypressLib.cypressLibStrings.abort): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_abort(
    eventName: cypressLib.cypressLibStrings.abort,
    options: stdLib.Partial[TriggerOptions with stdLib.UIEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_abort(eventName: cypressLib.cypressLibStrings.abort, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_abort(
    eventName: cypressLib.cypressLibStrings.abort,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.UIEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_abort(eventName: cypressLib.cypressLibStrings.abort, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_abort(
    eventName: cypressLib.cypressLibStrings.abort,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.UIEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_animationcancel(eventName: cypressLib.cypressLibStrings.animationcancel): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationcancel(
    eventName: cypressLib.cypressLibStrings.animationcancel,
    options: stdLib.Partial[TriggerOptions with stdLib.AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationcancel(eventName: cypressLib.cypressLibStrings.animationcancel, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationcancel(
    eventName: cypressLib.cypressLibStrings.animationcancel,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.AnimationEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_animationcancel(eventName: cypressLib.cypressLibStrings.animationcancel, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationcancel(
    eventName: cypressLib.cypressLibStrings.animationcancel,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.AnimationEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_animationend(eventName: cypressLib.cypressLibStrings.animationend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationend(
    eventName: cypressLib.cypressLibStrings.animationend,
    options: stdLib.Partial[TriggerOptions with stdLib.AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationend(eventName: cypressLib.cypressLibStrings.animationend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationend(
    eventName: cypressLib.cypressLibStrings.animationend,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.AnimationEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_animationend(eventName: cypressLib.cypressLibStrings.animationend, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationend(
    eventName: cypressLib.cypressLibStrings.animationend,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.AnimationEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_animationiteration(eventName: cypressLib.cypressLibStrings.animationiteration): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationiteration(
    eventName: cypressLib.cypressLibStrings.animationiteration,
    options: stdLib.Partial[TriggerOptions with stdLib.AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationiteration(eventName: cypressLib.cypressLibStrings.animationiteration, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationiteration(
    eventName: cypressLib.cypressLibStrings.animationiteration,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.AnimationEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_animationiteration(eventName: cypressLib.cypressLibStrings.animationiteration, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationiteration(
    eventName: cypressLib.cypressLibStrings.animationiteration,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.AnimationEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_animationstart(eventName: cypressLib.cypressLibStrings.animationstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationstart(
    eventName: cypressLib.cypressLibStrings.animationstart,
    options: stdLib.Partial[TriggerOptions with stdLib.AnimationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationstart(eventName: cypressLib.cypressLibStrings.animationstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationstart(
    eventName: cypressLib.cypressLibStrings.animationstart,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.AnimationEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_animationstart(eventName: cypressLib.cypressLibStrings.animationstart, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_animationstart(
    eventName: cypressLib.cypressLibStrings.animationstart,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.AnimationEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_auxclick(eventName: cypressLib.cypressLibStrings.auxclick): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_auxclick(
    eventName: cypressLib.cypressLibStrings.auxclick,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_auxclick(eventName: cypressLib.cypressLibStrings.auxclick, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_auxclick(
    eventName: cypressLib.cypressLibStrings.auxclick,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_auxclick(eventName: cypressLib.cypressLibStrings.auxclick, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_auxclick(
    eventName: cypressLib.cypressLibStrings.auxclick,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_blur(eventName: cypressLib.cypressLibStrings.blur): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_blur(
    eventName: cypressLib.cypressLibStrings.blur,
    options: stdLib.Partial[TriggerOptions with stdLib.FocusEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_blur(eventName: cypressLib.cypressLibStrings.blur, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_blur(
    eventName: cypressLib.cypressLibStrings.blur,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.FocusEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_blur(eventName: cypressLib.cypressLibStrings.blur, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_blur(
    eventName: cypressLib.cypressLibStrings.blur,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.FocusEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_cancel(eventName: cypressLib.cypressLibStrings.cancel): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cancel(
    eventName: cypressLib.cypressLibStrings.cancel,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cancel(eventName: cypressLib.cypressLibStrings.cancel, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cancel(
    eventName: cypressLib.cypressLibStrings.cancel,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_cancel(eventName: cypressLib.cypressLibStrings.cancel, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cancel(
    eventName: cypressLib.cypressLibStrings.cancel,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_canplay(eventName: cypressLib.cypressLibStrings.canplay): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplay(
    eventName: cypressLib.cypressLibStrings.canplay,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplay(eventName: cypressLib.cypressLibStrings.canplay, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplay(
    eventName: cypressLib.cypressLibStrings.canplay,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_canplay(eventName: cypressLib.cypressLibStrings.canplay, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplay(
    eventName: cypressLib.cypressLibStrings.canplay,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_canplaythrough(eventName: cypressLib.cypressLibStrings.canplaythrough): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplaythrough(
    eventName: cypressLib.cypressLibStrings.canplaythrough,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplaythrough(eventName: cypressLib.cypressLibStrings.canplaythrough, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplaythrough(
    eventName: cypressLib.cypressLibStrings.canplaythrough,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_canplaythrough(eventName: cypressLib.cypressLibStrings.canplaythrough, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_canplaythrough(
    eventName: cypressLib.cypressLibStrings.canplaythrough,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_change(eventName: cypressLib.cypressLibStrings.change): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_change(
    eventName: cypressLib.cypressLibStrings.change,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_change(eventName: cypressLib.cypressLibStrings.change, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_change(
    eventName: cypressLib.cypressLibStrings.change,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_change(eventName: cypressLib.cypressLibStrings.change, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_change(
    eventName: cypressLib.cypressLibStrings.change,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_click(eventName: cypressLib.cypressLibStrings.click): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_click(
    eventName: cypressLib.cypressLibStrings.click,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_click(eventName: cypressLib.cypressLibStrings.click, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_click(
    eventName: cypressLib.cypressLibStrings.click,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_click(eventName: cypressLib.cypressLibStrings.click, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_click(
    eventName: cypressLib.cypressLibStrings.click,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_close(eventName: cypressLib.cypressLibStrings.close): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_close(
    eventName: cypressLib.cypressLibStrings.close,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_close(eventName: cypressLib.cypressLibStrings.close, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_close(
    eventName: cypressLib.cypressLibStrings.close,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_close(eventName: cypressLib.cypressLibStrings.close, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_close(
    eventName: cypressLib.cypressLibStrings.close,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_contextmenu(eventName: cypressLib.cypressLibStrings.contextmenu): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_contextmenu(
    eventName: cypressLib.cypressLibStrings.contextmenu,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_contextmenu(eventName: cypressLib.cypressLibStrings.contextmenu, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_contextmenu(
    eventName: cypressLib.cypressLibStrings.contextmenu,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_contextmenu(eventName: cypressLib.cypressLibStrings.contextmenu, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_contextmenu(
    eventName: cypressLib.cypressLibStrings.contextmenu,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_copy(eventName: cypressLib.cypressLibStrings.copy): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_copy(
    eventName: cypressLib.cypressLibStrings.copy,
    options: stdLib.Partial[TriggerOptions with stdLib.ClipboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_copy(eventName: cypressLib.cypressLibStrings.copy, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_copy(
    eventName: cypressLib.cypressLibStrings.copy,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.ClipboardEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_copy(eventName: cypressLib.cypressLibStrings.copy, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_copy(
    eventName: cypressLib.cypressLibStrings.copy,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.ClipboardEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_cuechange(eventName: cypressLib.cypressLibStrings.cuechange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cuechange(
    eventName: cypressLib.cypressLibStrings.cuechange,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cuechange(eventName: cypressLib.cypressLibStrings.cuechange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cuechange(
    eventName: cypressLib.cypressLibStrings.cuechange,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_cuechange(eventName: cypressLib.cypressLibStrings.cuechange, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cuechange(
    eventName: cypressLib.cypressLibStrings.cuechange,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_cut(eventName: cypressLib.cypressLibStrings.cut): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cut(
    eventName: cypressLib.cypressLibStrings.cut,
    options: stdLib.Partial[TriggerOptions with stdLib.ClipboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cut(eventName: cypressLib.cypressLibStrings.cut, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cut(
    eventName: cypressLib.cypressLibStrings.cut,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.ClipboardEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_cut(eventName: cypressLib.cypressLibStrings.cut, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_cut(
    eventName: cypressLib.cypressLibStrings.cut,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.ClipboardEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dblclick(eventName: cypressLib.cypressLibStrings.dblclick): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dblclick(
    eventName: cypressLib.cypressLibStrings.dblclick,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dblclick(eventName: cypressLib.cypressLibStrings.dblclick, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dblclick(
    eventName: cypressLib.cypressLibStrings.dblclick,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dblclick(eventName: cypressLib.cypressLibStrings.dblclick, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dblclick(
    eventName: cypressLib.cypressLibStrings.dblclick,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_drag(eventName: cypressLib.cypressLibStrings.drag): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drag(
    eventName: cypressLib.cypressLibStrings.drag,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drag(eventName: cypressLib.cypressLibStrings.drag, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drag(
    eventName: cypressLib.cypressLibStrings.drag,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_drag(eventName: cypressLib.cypressLibStrings.drag, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drag(
    eventName: cypressLib.cypressLibStrings.drag,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dragend(eventName: cypressLib.cypressLibStrings.dragend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragend(
    eventName: cypressLib.cypressLibStrings.dragend,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragend(eventName: cypressLib.cypressLibStrings.dragend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragend(
    eventName: cypressLib.cypressLibStrings.dragend,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dragend(eventName: cypressLib.cypressLibStrings.dragend, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragend(
    eventName: cypressLib.cypressLibStrings.dragend,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dragenter(eventName: cypressLib.cypressLibStrings.dragenter): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragenter(
    eventName: cypressLib.cypressLibStrings.dragenter,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragenter(eventName: cypressLib.cypressLibStrings.dragenter, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragenter(
    eventName: cypressLib.cypressLibStrings.dragenter,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dragenter(eventName: cypressLib.cypressLibStrings.dragenter, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragenter(
    eventName: cypressLib.cypressLibStrings.dragenter,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dragexit(eventName: cypressLib.cypressLibStrings.dragexit): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragexit(
    eventName: cypressLib.cypressLibStrings.dragexit,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragexit(eventName: cypressLib.cypressLibStrings.dragexit, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragexit(
    eventName: cypressLib.cypressLibStrings.dragexit,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dragexit(eventName: cypressLib.cypressLibStrings.dragexit, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragexit(
    eventName: cypressLib.cypressLibStrings.dragexit,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dragleave(eventName: cypressLib.cypressLibStrings.dragleave): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragleave(
    eventName: cypressLib.cypressLibStrings.dragleave,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragleave(eventName: cypressLib.cypressLibStrings.dragleave, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragleave(
    eventName: cypressLib.cypressLibStrings.dragleave,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dragleave(eventName: cypressLib.cypressLibStrings.dragleave, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragleave(
    eventName: cypressLib.cypressLibStrings.dragleave,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dragover(eventName: cypressLib.cypressLibStrings.dragover): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragover(
    eventName: cypressLib.cypressLibStrings.dragover,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragover(eventName: cypressLib.cypressLibStrings.dragover, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragover(
    eventName: cypressLib.cypressLibStrings.dragover,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dragover(eventName: cypressLib.cypressLibStrings.dragover, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragover(
    eventName: cypressLib.cypressLibStrings.dragover,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dragstart(eventName: cypressLib.cypressLibStrings.dragstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragstart(
    eventName: cypressLib.cypressLibStrings.dragstart,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragstart(eventName: cypressLib.cypressLibStrings.dragstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragstart(
    eventName: cypressLib.cypressLibStrings.dragstart,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_dragstart(eventName: cypressLib.cypressLibStrings.dragstart, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_dragstart(
    eventName: cypressLib.cypressLibStrings.dragstart,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_drop(eventName: cypressLib.cypressLibStrings.drop): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drop(
    eventName: cypressLib.cypressLibStrings.drop,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drop(eventName: cypressLib.cypressLibStrings.drop, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drop(
    eventName: cypressLib.cypressLibStrings.drop,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_drop(eventName: cypressLib.cypressLibStrings.drop, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_drop(
    eventName: cypressLib.cypressLibStrings.drop,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.DragEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_durationchange(eventName: cypressLib.cypressLibStrings.durationchange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_durationchange(
    eventName: cypressLib.cypressLibStrings.durationchange,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_durationchange(eventName: cypressLib.cypressLibStrings.durationchange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_durationchange(
    eventName: cypressLib.cypressLibStrings.durationchange,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_durationchange(eventName: cypressLib.cypressLibStrings.durationchange, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_durationchange(
    eventName: cypressLib.cypressLibStrings.durationchange,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_emptied(eventName: cypressLib.cypressLibStrings.emptied): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_emptied(
    eventName: cypressLib.cypressLibStrings.emptied,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_emptied(eventName: cypressLib.cypressLibStrings.emptied, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_emptied(
    eventName: cypressLib.cypressLibStrings.emptied,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_emptied(eventName: cypressLib.cypressLibStrings.emptied, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_emptied(
    eventName: cypressLib.cypressLibStrings.emptied,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_ended(eventName: cypressLib.cypressLibStrings.ended): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ended(
    eventName: cypressLib.cypressLibStrings.ended,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ended(eventName: cypressLib.cypressLibStrings.ended, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ended(
    eventName: cypressLib.cypressLibStrings.ended,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_ended(eventName: cypressLib.cypressLibStrings.ended, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ended(
    eventName: cypressLib.cypressLibStrings.ended,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_error(eventName: cypressLib.cypressLibStrings.error): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_error(
    eventName: cypressLib.cypressLibStrings.error,
    options: stdLib.Partial[TriggerOptions with stdLib.ErrorEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_error(eventName: cypressLib.cypressLibStrings.error, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_error(
    eventName: cypressLib.cypressLibStrings.error,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.ErrorEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_error(eventName: cypressLib.cypressLibStrings.error, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_error(
    eventName: cypressLib.cypressLibStrings.error,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.ErrorEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_focus(eventName: cypressLib.cypressLibStrings.focus): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focus(
    eventName: cypressLib.cypressLibStrings.focus,
    options: stdLib.Partial[TriggerOptions with stdLib.FocusEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focus(eventName: cypressLib.cypressLibStrings.focus, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focus(
    eventName: cypressLib.cypressLibStrings.focus,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.FocusEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_focus(eventName: cypressLib.cypressLibStrings.focus, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_focus(
    eventName: cypressLib.cypressLibStrings.focus,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.FocusEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_fullscreenchange(eventName: cypressLib.cypressLibStrings.fullscreenchange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenchange(
    eventName: cypressLib.cypressLibStrings.fullscreenchange,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenchange(eventName: cypressLib.cypressLibStrings.fullscreenchange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenchange(
    eventName: cypressLib.cypressLibStrings.fullscreenchange,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_fullscreenchange(eventName: cypressLib.cypressLibStrings.fullscreenchange, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenchange(
    eventName: cypressLib.cypressLibStrings.fullscreenchange,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_fullscreenerror(eventName: cypressLib.cypressLibStrings.fullscreenerror): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenerror(
    eventName: cypressLib.cypressLibStrings.fullscreenerror,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenerror(eventName: cypressLib.cypressLibStrings.fullscreenerror, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenerror(
    eventName: cypressLib.cypressLibStrings.fullscreenerror,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_fullscreenerror(eventName: cypressLib.cypressLibStrings.fullscreenerror, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_fullscreenerror(
    eventName: cypressLib.cypressLibStrings.fullscreenerror,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_gotpointercapture(eventName: cypressLib.cypressLibStrings.gotpointercapture): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_gotpointercapture(
    eventName: cypressLib.cypressLibStrings.gotpointercapture,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_gotpointercapture(eventName: cypressLib.cypressLibStrings.gotpointercapture, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_gotpointercapture(
    eventName: cypressLib.cypressLibStrings.gotpointercapture,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_gotpointercapture(eventName: cypressLib.cypressLibStrings.gotpointercapture, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_gotpointercapture(
    eventName: cypressLib.cypressLibStrings.gotpointercapture,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_input(eventName: cypressLib.cypressLibStrings.input): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_input(
    eventName: cypressLib.cypressLibStrings.input,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_input(eventName: cypressLib.cypressLibStrings.input, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_input(
    eventName: cypressLib.cypressLibStrings.input,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_input(eventName: cypressLib.cypressLibStrings.input, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_input(
    eventName: cypressLib.cypressLibStrings.input,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_invalid(eventName: cypressLib.cypressLibStrings.invalid): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_invalid(
    eventName: cypressLib.cypressLibStrings.invalid,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_invalid(eventName: cypressLib.cypressLibStrings.invalid, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_invalid(
    eventName: cypressLib.cypressLibStrings.invalid,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_invalid(eventName: cypressLib.cypressLibStrings.invalid, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_invalid(
    eventName: cypressLib.cypressLibStrings.invalid,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_keydown(eventName: cypressLib.cypressLibStrings.keydown): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keydown(
    eventName: cypressLib.cypressLibStrings.keydown,
    options: stdLib.Partial[TriggerOptions with stdLib.KeyboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keydown(eventName: cypressLib.cypressLibStrings.keydown, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keydown(
    eventName: cypressLib.cypressLibStrings.keydown,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.KeyboardEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_keydown(eventName: cypressLib.cypressLibStrings.keydown, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keydown(
    eventName: cypressLib.cypressLibStrings.keydown,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.KeyboardEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_keypress(eventName: cypressLib.cypressLibStrings.keypress): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keypress(
    eventName: cypressLib.cypressLibStrings.keypress,
    options: stdLib.Partial[TriggerOptions with stdLib.KeyboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keypress(eventName: cypressLib.cypressLibStrings.keypress, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keypress(
    eventName: cypressLib.cypressLibStrings.keypress,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.KeyboardEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_keypress(eventName: cypressLib.cypressLibStrings.keypress, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keypress(
    eventName: cypressLib.cypressLibStrings.keypress,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.KeyboardEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_keyup(eventName: cypressLib.cypressLibStrings.keyup): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keyup(
    eventName: cypressLib.cypressLibStrings.keyup,
    options: stdLib.Partial[TriggerOptions with stdLib.KeyboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keyup(eventName: cypressLib.cypressLibStrings.keyup, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keyup(
    eventName: cypressLib.cypressLibStrings.keyup,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.KeyboardEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_keyup(eventName: cypressLib.cypressLibStrings.keyup, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_keyup(
    eventName: cypressLib.cypressLibStrings.keyup,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.KeyboardEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_load(eventName: cypressLib.cypressLibStrings.load): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_load(
    eventName: cypressLib.cypressLibStrings.load,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_load(eventName: cypressLib.cypressLibStrings.load, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_load(
    eventName: cypressLib.cypressLibStrings.load,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_load(eventName: cypressLib.cypressLibStrings.load, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_load(
    eventName: cypressLib.cypressLibStrings.load,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_loadeddata(eventName: cypressLib.cypressLibStrings.loadeddata): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadeddata(
    eventName: cypressLib.cypressLibStrings.loadeddata,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadeddata(eventName: cypressLib.cypressLibStrings.loadeddata, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadeddata(
    eventName: cypressLib.cypressLibStrings.loadeddata,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_loadeddata(eventName: cypressLib.cypressLibStrings.loadeddata, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadeddata(
    eventName: cypressLib.cypressLibStrings.loadeddata,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_loadedmetadata(eventName: cypressLib.cypressLibStrings.loadedmetadata): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadedmetadata(
    eventName: cypressLib.cypressLibStrings.loadedmetadata,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadedmetadata(eventName: cypressLib.cypressLibStrings.loadedmetadata, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadedmetadata(
    eventName: cypressLib.cypressLibStrings.loadedmetadata,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_loadedmetadata(eventName: cypressLib.cypressLibStrings.loadedmetadata, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadedmetadata(
    eventName: cypressLib.cypressLibStrings.loadedmetadata,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_loadend(eventName: cypressLib.cypressLibStrings.loadend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadend(
    eventName: cypressLib.cypressLibStrings.loadend,
    options: stdLib.Partial[TriggerOptions with stdLib.ProgressEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadend(eventName: cypressLib.cypressLibStrings.loadend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadend(
    eventName: cypressLib.cypressLibStrings.loadend,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.ProgressEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_loadend(eventName: cypressLib.cypressLibStrings.loadend, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadend(
    eventName: cypressLib.cypressLibStrings.loadend,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.ProgressEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_loadstart(eventName: cypressLib.cypressLibStrings.loadstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadstart(
    eventName: cypressLib.cypressLibStrings.loadstart,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadstart(eventName: cypressLib.cypressLibStrings.loadstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadstart(
    eventName: cypressLib.cypressLibStrings.loadstart,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_loadstart(eventName: cypressLib.cypressLibStrings.loadstart, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_loadstart(
    eventName: cypressLib.cypressLibStrings.loadstart,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_lostpointercapture(eventName: cypressLib.cypressLibStrings.lostpointercapture): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_lostpointercapture(
    eventName: cypressLib.cypressLibStrings.lostpointercapture,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_lostpointercapture(eventName: cypressLib.cypressLibStrings.lostpointercapture, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_lostpointercapture(
    eventName: cypressLib.cypressLibStrings.lostpointercapture,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_lostpointercapture(eventName: cypressLib.cypressLibStrings.lostpointercapture, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_lostpointercapture(
    eventName: cypressLib.cypressLibStrings.lostpointercapture,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mousedown(eventName: cypressLib.cypressLibStrings.mousedown): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousedown(
    eventName: cypressLib.cypressLibStrings.mousedown,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousedown(eventName: cypressLib.cypressLibStrings.mousedown, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousedown(
    eventName: cypressLib.cypressLibStrings.mousedown,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mousedown(eventName: cypressLib.cypressLibStrings.mousedown, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousedown(
    eventName: cypressLib.cypressLibStrings.mousedown,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mouseenter(eventName: cypressLib.cypressLibStrings.mouseenter): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseenter(
    eventName: cypressLib.cypressLibStrings.mouseenter,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseenter(eventName: cypressLib.cypressLibStrings.mouseenter, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseenter(
    eventName: cypressLib.cypressLibStrings.mouseenter,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mouseenter(eventName: cypressLib.cypressLibStrings.mouseenter, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseenter(
    eventName: cypressLib.cypressLibStrings.mouseenter,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mouseleave(eventName: cypressLib.cypressLibStrings.mouseleave): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseleave(
    eventName: cypressLib.cypressLibStrings.mouseleave,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseleave(eventName: cypressLib.cypressLibStrings.mouseleave, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseleave(
    eventName: cypressLib.cypressLibStrings.mouseleave,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mouseleave(eventName: cypressLib.cypressLibStrings.mouseleave, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseleave(
    eventName: cypressLib.cypressLibStrings.mouseleave,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mousemove(eventName: cypressLib.cypressLibStrings.mousemove): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousemove(
    eventName: cypressLib.cypressLibStrings.mousemove,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousemove(eventName: cypressLib.cypressLibStrings.mousemove, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousemove(
    eventName: cypressLib.cypressLibStrings.mousemove,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mousemove(eventName: cypressLib.cypressLibStrings.mousemove, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mousemove(
    eventName: cypressLib.cypressLibStrings.mousemove,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mouseout(eventName: cypressLib.cypressLibStrings.mouseout): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseout(
    eventName: cypressLib.cypressLibStrings.mouseout,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseout(eventName: cypressLib.cypressLibStrings.mouseout, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseout(
    eventName: cypressLib.cypressLibStrings.mouseout,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mouseout(eventName: cypressLib.cypressLibStrings.mouseout, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseout(
    eventName: cypressLib.cypressLibStrings.mouseout,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mouseover(eventName: cypressLib.cypressLibStrings.mouseover): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseover(
    eventName: cypressLib.cypressLibStrings.mouseover,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseover(eventName: cypressLib.cypressLibStrings.mouseover, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseover(
    eventName: cypressLib.cypressLibStrings.mouseover,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mouseover(eventName: cypressLib.cypressLibStrings.mouseover, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseover(
    eventName: cypressLib.cypressLibStrings.mouseover,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mouseup(eventName: cypressLib.cypressLibStrings.mouseup): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseup(
    eventName: cypressLib.cypressLibStrings.mouseup,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseup(eventName: cypressLib.cypressLibStrings.mouseup, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseup(
    eventName: cypressLib.cypressLibStrings.mouseup,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_mouseup(eventName: cypressLib.cypressLibStrings.mouseup, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_mouseup(
    eventName: cypressLib.cypressLibStrings.mouseup,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.MouseEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_paste(eventName: cypressLib.cypressLibStrings.paste): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_paste(
    eventName: cypressLib.cypressLibStrings.paste,
    options: stdLib.Partial[TriggerOptions with stdLib.ClipboardEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_paste(eventName: cypressLib.cypressLibStrings.paste, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_paste(
    eventName: cypressLib.cypressLibStrings.paste,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.ClipboardEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_paste(eventName: cypressLib.cypressLibStrings.paste, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_paste(
    eventName: cypressLib.cypressLibStrings.paste,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.ClipboardEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pause(eventName: cypressLib.cypressLibStrings.pause): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pause(
    eventName: cypressLib.cypressLibStrings.pause,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pause(eventName: cypressLib.cypressLibStrings.pause, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pause(
    eventName: cypressLib.cypressLibStrings.pause,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pause(eventName: cypressLib.cypressLibStrings.pause, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pause(
    eventName: cypressLib.cypressLibStrings.pause,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_play(eventName: cypressLib.cypressLibStrings.play): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_play(
    eventName: cypressLib.cypressLibStrings.play,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_play(eventName: cypressLib.cypressLibStrings.play, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_play(
    eventName: cypressLib.cypressLibStrings.play,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_play(eventName: cypressLib.cypressLibStrings.play, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_play(
    eventName: cypressLib.cypressLibStrings.play,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_playing(eventName: cypressLib.cypressLibStrings.playing): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_playing(
    eventName: cypressLib.cypressLibStrings.playing,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_playing(eventName: cypressLib.cypressLibStrings.playing, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_playing(
    eventName: cypressLib.cypressLibStrings.playing,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_playing(eventName: cypressLib.cypressLibStrings.playing, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_playing(
    eventName: cypressLib.cypressLibStrings.playing,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointercancel(eventName: cypressLib.cypressLibStrings.pointercancel): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointercancel(
    eventName: cypressLib.cypressLibStrings.pointercancel,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointercancel(eventName: cypressLib.cypressLibStrings.pointercancel, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointercancel(
    eventName: cypressLib.cypressLibStrings.pointercancel,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointercancel(eventName: cypressLib.cypressLibStrings.pointercancel, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointercancel(
    eventName: cypressLib.cypressLibStrings.pointercancel,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointerdown(eventName: cypressLib.cypressLibStrings.pointerdown): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerdown(
    eventName: cypressLib.cypressLibStrings.pointerdown,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerdown(eventName: cypressLib.cypressLibStrings.pointerdown, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerdown(
    eventName: cypressLib.cypressLibStrings.pointerdown,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointerdown(eventName: cypressLib.cypressLibStrings.pointerdown, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerdown(
    eventName: cypressLib.cypressLibStrings.pointerdown,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointerenter(eventName: cypressLib.cypressLibStrings.pointerenter): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerenter(
    eventName: cypressLib.cypressLibStrings.pointerenter,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerenter(eventName: cypressLib.cypressLibStrings.pointerenter, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerenter(
    eventName: cypressLib.cypressLibStrings.pointerenter,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointerenter(eventName: cypressLib.cypressLibStrings.pointerenter, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerenter(
    eventName: cypressLib.cypressLibStrings.pointerenter,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointerleave(eventName: cypressLib.cypressLibStrings.pointerleave): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerleave(
    eventName: cypressLib.cypressLibStrings.pointerleave,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerleave(eventName: cypressLib.cypressLibStrings.pointerleave, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerleave(
    eventName: cypressLib.cypressLibStrings.pointerleave,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointerleave(eventName: cypressLib.cypressLibStrings.pointerleave, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerleave(
    eventName: cypressLib.cypressLibStrings.pointerleave,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointermove(eventName: cypressLib.cypressLibStrings.pointermove): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointermove(
    eventName: cypressLib.cypressLibStrings.pointermove,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointermove(eventName: cypressLib.cypressLibStrings.pointermove, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointermove(
    eventName: cypressLib.cypressLibStrings.pointermove,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointermove(eventName: cypressLib.cypressLibStrings.pointermove, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointermove(
    eventName: cypressLib.cypressLibStrings.pointermove,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointerout(eventName: cypressLib.cypressLibStrings.pointerout): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerout(
    eventName: cypressLib.cypressLibStrings.pointerout,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerout(eventName: cypressLib.cypressLibStrings.pointerout, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerout(
    eventName: cypressLib.cypressLibStrings.pointerout,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointerout(eventName: cypressLib.cypressLibStrings.pointerout, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerout(
    eventName: cypressLib.cypressLibStrings.pointerout,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointerover(eventName: cypressLib.cypressLibStrings.pointerover): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerover(
    eventName: cypressLib.cypressLibStrings.pointerover,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerover(eventName: cypressLib.cypressLibStrings.pointerover, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerover(
    eventName: cypressLib.cypressLibStrings.pointerover,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointerover(eventName: cypressLib.cypressLibStrings.pointerover, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerover(
    eventName: cypressLib.cypressLibStrings.pointerover,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointerup(eventName: cypressLib.cypressLibStrings.pointerup): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerup(
    eventName: cypressLib.cypressLibStrings.pointerup,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerup(eventName: cypressLib.cypressLibStrings.pointerup, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerup(
    eventName: cypressLib.cypressLibStrings.pointerup,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_pointerup(eventName: cypressLib.cypressLibStrings.pointerup, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_pointerup(
    eventName: cypressLib.cypressLibStrings.pointerup,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.PointerEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_progress(eventName: cypressLib.cypressLibStrings.progress): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_progress(
    eventName: cypressLib.cypressLibStrings.progress,
    options: stdLib.Partial[TriggerOptions with stdLib.ProgressEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_progress(eventName: cypressLib.cypressLibStrings.progress, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_progress(
    eventName: cypressLib.cypressLibStrings.progress,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.ProgressEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_progress(eventName: cypressLib.cypressLibStrings.progress, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_progress(
    eventName: cypressLib.cypressLibStrings.progress,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.ProgressEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_ratechange(eventName: cypressLib.cypressLibStrings.ratechange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ratechange(
    eventName: cypressLib.cypressLibStrings.ratechange,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ratechange(eventName: cypressLib.cypressLibStrings.ratechange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ratechange(
    eventName: cypressLib.cypressLibStrings.ratechange,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_ratechange(eventName: cypressLib.cypressLibStrings.ratechange, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_ratechange(
    eventName: cypressLib.cypressLibStrings.ratechange,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_readystatechange(eventName: cypressLib.cypressLibStrings.readystatechange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_readystatechange(
    eventName: cypressLib.cypressLibStrings.readystatechange,
    options: stdLib.Partial[TriggerOptions with stdLib.ProgressEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_readystatechange(eventName: cypressLib.cypressLibStrings.readystatechange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_readystatechange(
    eventName: cypressLib.cypressLibStrings.readystatechange,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.ProgressEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_readystatechange(eventName: cypressLib.cypressLibStrings.readystatechange, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_readystatechange(
    eventName: cypressLib.cypressLibStrings.readystatechange,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.ProgressEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_reset(eventName: cypressLib.cypressLibStrings.reset): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_reset(
    eventName: cypressLib.cypressLibStrings.reset,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_reset(eventName: cypressLib.cypressLibStrings.reset, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_reset(
    eventName: cypressLib.cypressLibStrings.reset,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_reset(eventName: cypressLib.cypressLibStrings.reset, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_reset(
    eventName: cypressLib.cypressLibStrings.reset,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_resize(eventName: cypressLib.cypressLibStrings.resize): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_resize(
    eventName: cypressLib.cypressLibStrings.resize,
    options: stdLib.Partial[TriggerOptions with stdLib.UIEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_resize(eventName: cypressLib.cypressLibStrings.resize, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_resize(
    eventName: cypressLib.cypressLibStrings.resize,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.UIEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_resize(eventName: cypressLib.cypressLibStrings.resize, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_resize(
    eventName: cypressLib.cypressLibStrings.resize,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.UIEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_scroll(eventName: cypressLib.cypressLibStrings.scroll): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_scroll(
    eventName: cypressLib.cypressLibStrings.scroll,
    options: stdLib.Partial[TriggerOptions with stdLib.UIEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_scroll(eventName: cypressLib.cypressLibStrings.scroll, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_scroll(
    eventName: cypressLib.cypressLibStrings.scroll,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.UIEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_scroll(eventName: cypressLib.cypressLibStrings.scroll, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_scroll(
    eventName: cypressLib.cypressLibStrings.scroll,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.UIEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_securitypolicyviolation(eventName: cypressLib.cypressLibStrings.securitypolicyviolation): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_securitypolicyviolation(
    eventName: cypressLib.cypressLibStrings.securitypolicyviolation,
    options: stdLib.Partial[TriggerOptions with stdLib.SecurityPolicyViolationEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_securitypolicyviolation(eventName: cypressLib.cypressLibStrings.securitypolicyviolation, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_securitypolicyviolation(
    eventName: cypressLib.cypressLibStrings.securitypolicyviolation,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.SecurityPolicyViolationEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_securitypolicyviolation(eventName: cypressLib.cypressLibStrings.securitypolicyviolation, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_securitypolicyviolation(
    eventName: cypressLib.cypressLibStrings.securitypolicyviolation,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.SecurityPolicyViolationEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_seeked(eventName: cypressLib.cypressLibStrings.seeked): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeked(
    eventName: cypressLib.cypressLibStrings.seeked,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeked(eventName: cypressLib.cypressLibStrings.seeked, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeked(
    eventName: cypressLib.cypressLibStrings.seeked,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_seeked(eventName: cypressLib.cypressLibStrings.seeked, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeked(
    eventName: cypressLib.cypressLibStrings.seeked,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_seeking(eventName: cypressLib.cypressLibStrings.seeking): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeking(
    eventName: cypressLib.cypressLibStrings.seeking,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeking(eventName: cypressLib.cypressLibStrings.seeking, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeking(
    eventName: cypressLib.cypressLibStrings.seeking,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_seeking(eventName: cypressLib.cypressLibStrings.seeking, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_seeking(
    eventName: cypressLib.cypressLibStrings.seeking,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_select(eventName: cypressLib.cypressLibStrings.select): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_select(
    eventName: cypressLib.cypressLibStrings.select,
    options: stdLib.Partial[TriggerOptions with stdLib.UIEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_select(eventName: cypressLib.cypressLibStrings.select, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_select(
    eventName: cypressLib.cypressLibStrings.select,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.UIEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_select(eventName: cypressLib.cypressLibStrings.select, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_select(
    eventName: cypressLib.cypressLibStrings.select,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.UIEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_stalled(eventName: cypressLib.cypressLibStrings.stalled): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_stalled(
    eventName: cypressLib.cypressLibStrings.stalled,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_stalled(eventName: cypressLib.cypressLibStrings.stalled, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_stalled(
    eventName: cypressLib.cypressLibStrings.stalled,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_stalled(eventName: cypressLib.cypressLibStrings.stalled, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_stalled(
    eventName: cypressLib.cypressLibStrings.stalled,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_submit(eventName: cypressLib.cypressLibStrings.submit): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_submit(
    eventName: cypressLib.cypressLibStrings.submit,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_submit(eventName: cypressLib.cypressLibStrings.submit, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_submit(
    eventName: cypressLib.cypressLibStrings.submit,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_submit(eventName: cypressLib.cypressLibStrings.submit, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_submit(
    eventName: cypressLib.cypressLibStrings.submit,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_suspend(eventName: cypressLib.cypressLibStrings.suspend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_suspend(
    eventName: cypressLib.cypressLibStrings.suspend,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_suspend(eventName: cypressLib.cypressLibStrings.suspend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_suspend(
    eventName: cypressLib.cypressLibStrings.suspend,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_suspend(eventName: cypressLib.cypressLibStrings.suspend, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_suspend(
    eventName: cypressLib.cypressLibStrings.suspend,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_timeupdate(eventName: cypressLib.cypressLibStrings.timeupdate): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_timeupdate(
    eventName: cypressLib.cypressLibStrings.timeupdate,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_timeupdate(eventName: cypressLib.cypressLibStrings.timeupdate, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_timeupdate(
    eventName: cypressLib.cypressLibStrings.timeupdate,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_timeupdate(eventName: cypressLib.cypressLibStrings.timeupdate, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_timeupdate(
    eventName: cypressLib.cypressLibStrings.timeupdate,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_toggle(eventName: cypressLib.cypressLibStrings.toggle): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_toggle(
    eventName: cypressLib.cypressLibStrings.toggle,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_toggle(eventName: cypressLib.cypressLibStrings.toggle, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_toggle(
    eventName: cypressLib.cypressLibStrings.toggle,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_toggle(eventName: cypressLib.cypressLibStrings.toggle, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_toggle(
    eventName: cypressLib.cypressLibStrings.toggle,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_touchcancel(eventName: cypressLib.cypressLibStrings.touchcancel): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchcancel(
    eventName: cypressLib.cypressLibStrings.touchcancel,
    options: stdLib.Partial[TriggerOptions with stdLib.TouchEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchcancel(eventName: cypressLib.cypressLibStrings.touchcancel, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchcancel(
    eventName: cypressLib.cypressLibStrings.touchcancel,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.TouchEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_touchcancel(eventName: cypressLib.cypressLibStrings.touchcancel, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchcancel(
    eventName: cypressLib.cypressLibStrings.touchcancel,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.TouchEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_touchend(eventName: cypressLib.cypressLibStrings.touchend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchend(
    eventName: cypressLib.cypressLibStrings.touchend,
    options: stdLib.Partial[TriggerOptions with stdLib.TouchEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchend(eventName: cypressLib.cypressLibStrings.touchend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchend(
    eventName: cypressLib.cypressLibStrings.touchend,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.TouchEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_touchend(eventName: cypressLib.cypressLibStrings.touchend, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchend(
    eventName: cypressLib.cypressLibStrings.touchend,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.TouchEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_touchmove(eventName: cypressLib.cypressLibStrings.touchmove): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchmove(
    eventName: cypressLib.cypressLibStrings.touchmove,
    options: stdLib.Partial[TriggerOptions with stdLib.TouchEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchmove(eventName: cypressLib.cypressLibStrings.touchmove, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchmove(
    eventName: cypressLib.cypressLibStrings.touchmove,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.TouchEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_touchmove(eventName: cypressLib.cypressLibStrings.touchmove, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchmove(
    eventName: cypressLib.cypressLibStrings.touchmove,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.TouchEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_touchstart(eventName: cypressLib.cypressLibStrings.touchstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchstart(
    eventName: cypressLib.cypressLibStrings.touchstart,
    options: stdLib.Partial[TriggerOptions with stdLib.TouchEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchstart(eventName: cypressLib.cypressLibStrings.touchstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchstart(
    eventName: cypressLib.cypressLibStrings.touchstart,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.TouchEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_touchstart(eventName: cypressLib.cypressLibStrings.touchstart, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_touchstart(
    eventName: cypressLib.cypressLibStrings.touchstart,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.TouchEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_transitioncancel(eventName: cypressLib.cypressLibStrings.transitioncancel): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitioncancel(
    eventName: cypressLib.cypressLibStrings.transitioncancel,
    options: stdLib.Partial[TriggerOptions with stdLib.TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitioncancel(eventName: cypressLib.cypressLibStrings.transitioncancel, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitioncancel(
    eventName: cypressLib.cypressLibStrings.transitioncancel,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.TransitionEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_transitioncancel(eventName: cypressLib.cypressLibStrings.transitioncancel, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitioncancel(
    eventName: cypressLib.cypressLibStrings.transitioncancel,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.TransitionEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_transitionend(eventName: cypressLib.cypressLibStrings.transitionend): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionend(
    eventName: cypressLib.cypressLibStrings.transitionend,
    options: stdLib.Partial[TriggerOptions with stdLib.TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionend(eventName: cypressLib.cypressLibStrings.transitionend, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionend(
    eventName: cypressLib.cypressLibStrings.transitionend,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.TransitionEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_transitionend(eventName: cypressLib.cypressLibStrings.transitionend, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionend(
    eventName: cypressLib.cypressLibStrings.transitionend,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.TransitionEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_transitionrun(eventName: cypressLib.cypressLibStrings.transitionrun): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionrun(
    eventName: cypressLib.cypressLibStrings.transitionrun,
    options: stdLib.Partial[TriggerOptions with stdLib.TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionrun(eventName: cypressLib.cypressLibStrings.transitionrun, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionrun(
    eventName: cypressLib.cypressLibStrings.transitionrun,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.TransitionEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_transitionrun(eventName: cypressLib.cypressLibStrings.transitionrun, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionrun(
    eventName: cypressLib.cypressLibStrings.transitionrun,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.TransitionEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_transitionstart(eventName: cypressLib.cypressLibStrings.transitionstart): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionstart(
    eventName: cypressLib.cypressLibStrings.transitionstart,
    options: stdLib.Partial[TriggerOptions with stdLib.TransitionEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionstart(eventName: cypressLib.cypressLibStrings.transitionstart, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionstart(
    eventName: cypressLib.cypressLibStrings.transitionstart,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.TransitionEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_transitionstart(eventName: cypressLib.cypressLibStrings.transitionstart, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_transitionstart(
    eventName: cypressLib.cypressLibStrings.transitionstart,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.TransitionEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_visibilitychange(eventName: cypressLib.cypressLibStrings.visibilitychange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_visibilitychange(
    eventName: cypressLib.cypressLibStrings.visibilitychange,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_visibilitychange(eventName: cypressLib.cypressLibStrings.visibilitychange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_visibilitychange(
    eventName: cypressLib.cypressLibStrings.visibilitychange,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_visibilitychange(eventName: cypressLib.cypressLibStrings.visibilitychange, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_visibilitychange(
    eventName: cypressLib.cypressLibStrings.visibilitychange,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_volumechange(eventName: cypressLib.cypressLibStrings.volumechange): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_volumechange(
    eventName: cypressLib.cypressLibStrings.volumechange,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_volumechange(eventName: cypressLib.cypressLibStrings.volumechange, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_volumechange(
    eventName: cypressLib.cypressLibStrings.volumechange,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_volumechange(eventName: cypressLib.cypressLibStrings.volumechange, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_volumechange(
    eventName: cypressLib.cypressLibStrings.volumechange,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_waiting(eventName: cypressLib.cypressLibStrings.waiting): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_waiting(
    eventName: cypressLib.cypressLibStrings.waiting,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_waiting(eventName: cypressLib.cypressLibStrings.waiting, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_waiting(
    eventName: cypressLib.cypressLibStrings.waiting,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_waiting(eventName: cypressLib.cypressLibStrings.waiting, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_waiting(
    eventName: cypressLib.cypressLibStrings.waiting,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.Event]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_wheel(eventName: cypressLib.cypressLibStrings.wheel): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_wheel(
    eventName: cypressLib.cypressLibStrings.wheel,
    options: stdLib.Partial[TriggerOptions with stdLib.WheelEvent]
  ): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_wheel(eventName: cypressLib.cypressLibStrings.wheel, position: PositionType): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_wheel(
    eventName: cypressLib.cypressLibStrings.wheel,
    position: PositionType,
    options: stdLib.Partial[TriggerOptions with stdLib.WheelEvent]
  ): Chainable[Subject] = js.native
  /**
    * Trigger an event on a DOM element.
    *
    * @see https://on.cypress.io/trigger
    */
  @JSName("trigger")
  def trigger_wheel(eventName: cypressLib.cypressLibStrings.wheel, x: scala.Double, y: scala.Double): Chainable[Subject] = js.native
  @JSName("trigger")
  def trigger_wheel(
    eventName: cypressLib.cypressLibStrings.wheel,
    x: scala.Double,
    y: scala.Double,
    options: stdLib.Partial[TriggerOptions with stdLib.WheelEvent]
  ): Chainable[Subject] = js.native
  /**
    * Type into a DOM element.
    *
    * @see https://on.cypress.io/type
    * @example
    *    cy.get('input').type('Hello, World')
    *    // type "hello" + press Enter
    *    cy.get('input').type('hello{enter}')
    */
  def `type`(text: java.lang.String): Chainable[Subject] = js.native
  def `type`(text: java.lang.String, options: stdLib.Partial[TypeOptions]): Chainable[Subject] = js.native
  /**
    * Uncheck checkbox(es).
    *
    * @see https://on.cypress.io/uncheck
    * @example
    *    // Unchecks checkbox element
    *    cy.get('[type="checkbox"]').uncheck()
    *    // Uncheck element with the id ‘saveUserName’
    *    cy.get('#saveUserName').uncheck()
    *    // Uncheck all checkboxes
    *    cy.get(':checkbox').uncheck()
    *    // Uncheck the checkbox with the value of ‘ga’
    *    cy.get('input[type="checkbox"]').uncheck(['ga'])
    */
  def uncheck(): Chainable[Subject] = js.native
  def uncheck(options: stdLib.Partial[CheckOptions]): Chainable[Subject] = js.native
  /**
    * Uncheck specific checkbox.
    *
    * @see https://on.cypress.io/uncheck
    * @example
    *    // Uncheck the checkbox with the value of ‘ga’
    *    cy.get('input[type="checkbox"]').uncheck('ga')
    */
  def uncheck(value: java.lang.String): Chainable[Subject] = js.native
  def uncheck(value: java.lang.String, options: stdLib.Partial[CheckOptions]): Chainable[Subject] = js.native
  /**
    * Uncheck specific checkboxes.
    *
    * @see https://on.cypress.io/uncheck
    * @example
    *    // Uncheck the checkbox with the value of ‘ga’, 'ma'
    *    cy.get('input[type="checkbox"]').uncheck(['ga', 'ma'])
    */
  def uncheck(values: js.Array[java.lang.String]): Chainable[Subject] = js.native
  def uncheck(values: js.Array[java.lang.String], options: stdLib.Partial[CheckOptions]): Chainable[Subject] = js.native
  /**
    * Get the current URL of the page that is currently active.
    *
    * @alias cy.location('href')
    * @see https://on.cypress.io/url
    */
  def url(): Chainable[java.lang.String] = js.native
  def url(options: stdLib.Partial[Loggable with Timeoutable]): Chainable[java.lang.String] = js.native
  /**
    * Control the size and orientation of the screen for your application.
    *
    * @see https://on.cypress.io/viewport
    * @example
    *    // Set viewport to 550px x 750px
    *    cy.viewport(550, 750)
    *    // Set viewport to 357px x 667px
    *    cy.viewport('iphone-6')
    */
  def viewport(preset: ViewportPreset): Chainable[scala.Null] = js.native
  def viewport(preset: ViewportPreset, orientation: ViewportOrientation): Chainable[scala.Null] = js.native
  def viewport(preset: ViewportPreset, orientation: ViewportOrientation, options: stdLib.Partial[Loggable]): Chainable[scala.Null] = js.native
  /**
    * Set viewport to the given resolution.
    *
    * @see https://on.cypress.io/viewport
    * @example
    *    // Set viewport to 550px x 750px
    *    cy.viewport(550, 750)
    */
  def viewport(width: scala.Double, height: scala.Double): Chainable[scala.Null] = js.native
  def viewport(width: scala.Double, height: scala.Double, options: stdLib.Partial[Loggable]): Chainable[scala.Null] = js.native
  /**
    * Visit the given url
    *
    * @param {string} url The URL to visit. If relative uses `baseUrl`
    * @param {VisitOptions} [options] Pass in an options object to change the default behavior of `cy.visit()`
    * @see https://on.cypress.io/visit
    * @example
    *    cy.visit('http://localhost:3000')
    *    cy.visit('/somewhere') // opens ${baseUrl}/somewhere
    *
    */
  def visit(url: java.lang.String): Chainable[mochaLib.Window with stdLib.Window] = js.native
  def visit(url: java.lang.String, options: stdLib.Partial[VisitOptions]): Chainable[mochaLib.Window with stdLib.Window] = js.native
  /**
    * Wait for a specific XHR to respond.
    *
    * @see https://on.cypress.io/wait
    */
  def wait(alias: java.lang.String): Chainable[WaitXHR] = js.native
  def wait(alias: java.lang.String, options: stdLib.Partial[Loggable with Timeoutable with TimeoutableXHR]): Chainable[WaitXHR] = js.native
  /**
    * Wait for list of XHR requests to complete.
    *
    * @see https://on.cypress.io/wait
    */
  def wait(alias: js.Array[java.lang.String]): Chainable[js.Array[WaitXHR]] = js.native
  def wait(
    alias: js.Array[java.lang.String],
    options: stdLib.Partial[Loggable with Timeoutable with TimeoutableXHR]
  ): Chainable[js.Array[WaitXHR]] = js.native
  /**
    * Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command.
    *
    * @see https://on.cypress.io/wait
    * @example
    *    cy.wait(1000) // wait for 1 second
    */
  def wait(ms: scala.Double): Chainable[js.UndefOr[scala.Nothing]] = js.native
  def wait(ms: scala.Double, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[js.UndefOr[scala.Nothing]] = js.native
  /**
    * Get the window object of the page that is currently active.
    *
    * @see https://on.cypress.io/window
    * @example
    *    cy.visit('http://localhost:8080/app')
    *    cy.window().then(function(win){
    *      // win is the remote window
    *      // of the page at: http://localhost:8080/app
    *    })
    */
  def window(): Chainable[mochaLib.Window with stdLib.Window] = js.native
  def window(options: stdLib.Partial[Loggable with Timeoutable]): Chainable[mochaLib.Window with stdLib.Window] = js.native
  /**
    * Scopes all subsequent cy commands to within this element.
    * Useful when working within a particular group of elements such as a `<form>`.
    * @see https://on.cypress.io/within
    * @example
    *    cy.get('form').within(($form) => {
    *      // cy.get() will only search for elements within form,
    *      // not within the entire document
    *      cy.get('input[name="username"]').type('john')
    *      cy.get('input[name="password"]').type('password')
    *      cy.root().submit()
    *    })
    *
    */
  def within(fn: js.Function1[/* currentSubject */ Subject, scala.Unit]): Chainable[Subject] = js.native
  /**
    * Scopes all subsequent cy commands to within this element.
    * Useful when working within a particular group of elements such as a `<form>`.
    * @see https://on.cypress.io/within
    */
  def within(options: stdLib.Partial[Loggable], fn: js.Function1[/* currentSubject */ Subject, scala.Unit]): Chainable[Subject] = js.native
  def wrap[E /* <: stdLib.Node */](element: jqueryLib.JQuery[E]): Chainable[jqueryLib.JQuery[E]] = js.native
  def wrap[E /* <: stdLib.Node */](element: jqueryLib.JQuery[E], options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Yields whatever is passed into `.wrap()` to the next command in the Cypress chain.
    *
    * @see https://on.cypress.io/wrap
    * @example
    *    // Make assertions about object
    *    cy.wrap({ amount: 10 })
    *      .should('have.property', 'amount')
    *      .and('eq', 10)
    */
  def wrap[S](`object`: S): Chainable[S] = js.native
  def wrap[S](`object`: S, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[S] = js.native
  // inconsistent argument order
  /**
    * Yield the element passed into `.wrap()`.
    *
    * @see https://on.cypress.io/wrap
    * @example
    *    cy.get('form').within(($form) => {
    *       // more commands
    *       cy.wrap($form).should('have.class', 'form-container')
    *    })
    */
  @JSName("wrap")
  def wrap_ENode[E /* <: stdLib.Node */](element: E): Chainable[jqueryLib.JQuery[E]] = js.native
  @JSName("wrap")
  def wrap_ENode[E /* <: stdLib.Node */](element: E, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[jqueryLib.JQuery[E]] = js.native
  /**
    * Yield the element passed into `.wrap()` to the next command in the Cypress chain.
    *
    * @see https://on.cypress.io/wrap
    * @example
    *    cy.wrap(new Promise((resolve, reject) => {
    *      setTimeout(resolve, 1000);
    *    }).then(result => {})
    */
  @JSName("wrap")
  def wrap_FPromiseS[F /* <: js.Promise[S] */, S](promise: F): Chainable[S] = js.native
  @JSName("wrap")
  def wrap_FPromiseS[F /* <: js.Promise[S] */, S](promise: F, options: stdLib.Partial[Loggable with Timeoutable]): Chainable[S] = js.native
  /**
    * Write to a file with the specified contents.
    *
    * @see https://on.cypress.io/writefile
    */
  def writeFile[C /* <: FileContents */](filePath: java.lang.String, contents: C): Chainable[C] = js.native
  /**
    * Write to a file with the specified encoding and contents.
    *
    * @see https://on.cypress.io/writefile
    */
  def writeFile[C /* <: FileContents */](filePath: java.lang.String, contents: C, encoding: Encodings): Chainable[C] = js.native
  def writeFile[C /* <: FileContents */](filePath: java.lang.String, contents: C, encoding: Encodings, options: stdLib.Partial[Loggable]): Chainable[C] = js.native
  def writeFile[C /* <: FileContents */](filePath: java.lang.String, contents: C, options: stdLib.Partial[Loggable]): Chainable[C] = js.native
}

