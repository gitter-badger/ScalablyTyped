package typings
package firmataLib.firmataMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation._

/**
  * Most of these are generated by observing https://github.com/firmata/firmata.js/blob/v0.15.0/lib/firmata.js.
  *
  * This is a starting point that appeared to work fine for months within a project of my company, but I give no
  * guarantee that it cannot be improved.
  */
@js.native
trait Board
  extends nodeLib.NodeJSNs.EventEmitter {
  var HIGH: firmataLib.firmataMod.BoardNs.PIN_STATE = js.native
  var I2C_MODES: firmataLib.firmataMod.BoardNs.I2cModes = js.native
  var LOW: firmataLib.firmataMod.BoardNs.PIN_STATE = js.native
  var MODES: firmataLib.firmataMod.BoardNs.PinModes = js.native
  var SERIAL_MODES: firmataLib.firmataMod.BoardNs.SerialModes = js.native
  var SERIAL_PIN_TYPES: firmataLib.firmataMod.BoardNs.SerialPinTypes = js.native
  var SERIAL_PORT_IDs: firmataLib.firmataMod.BoardNs.SerialPortIds = js.native
  var STEPPER: firmataLib.firmataMod.BoardNs.StepperConstants = js.native
  var analogPins: js.Array[scala.Double] = js.native
  var firmware: firmataLib.firmataMod.BoardNs.Firmware = js.native
  var pins: js.Array[firmataLib.firmataMod.BoardNs.Pins] = js.native
  var ports: js.Array[scala.Double] = js.native
  var settings: firmataLib.firmataMod.BoardNs.Settings = js.native
  var transport: serialportLib.serialportMod.namespaced = js.native
  var version: firmataLib.firmataMod.BoardNs.Version = js.native
  // TODO untested/incomplete --- TWW
  /* protected */ def _sendOneWireRequest(
    pin: scala.Double,
    subcommand: js.Any,
    device: js.Any,
    numBytesToRead: js.Any,
    correlationId: js.Any,
    delay: scala.Double,
    dataToWrite: js.Any,
    event: js.Any,
    callback: js.Function0[scala.Unit]
  ): scala.Unit = js.native
  // TODO untested/incomplete --- TWW
  /* protected */ def _sendOneWireSearch(`type`: js.Any, event: js.Any, pin: scala.Double, callback: js.Function0[scala.Unit]): scala.Unit = js.native
  def analogRead(pin: scala.Double, callback: js.Function1[/* value */ scala.Double, scala.Unit]): scala.Unit = js.native
  def analogWrite(pin: scala.Double, value: scala.Double): scala.Unit = js.native
  def digitalRead(
    pin: scala.Double,
    callback: js.Function1[/* val */ firmataLib.firmataMod.BoardNs.PIN_STATE, scala.Unit]
  ): scala.Unit = js.native
  def digitalWrite(pin: scala.Double, `val`: firmataLib.firmataMod.BoardNs.PIN_STATE): scala.Unit = js.native
  def getSamplingInterval(): scala.Double = js.native
  def i2cConfig(options: firmataLib.Anon_Delay): scala.Unit = js.native
  // TODO untested --- TWW
  def i2cConfig(options: scala.Double): scala.Unit = js.native
  def i2cRead(
    address: scala.Double,
    bytesToRead: scala.Double,
    callback: js.Function1[/* data */ js.Array[scala.Double], scala.Unit]
  ): scala.Unit = js.native
  // TODO untested --- TWW
  def i2cRead(
    address: scala.Double,
    register: scala.Double,
    bytesToRead: scala.Double,
    callback: js.Function1[/* data */ js.Array[scala.Double], scala.Unit]
  ): scala.Unit = js.native
  def i2cReadOnce(
    address: scala.Double,
    bytesToRead: scala.Double,
    callback: js.Function1[/* data */ js.Array[scala.Double], scala.Unit]
  ): scala.Unit = js.native
  // TODO untested --- TWW
  def i2cReadOnce(
    address: scala.Double,
    register: scala.Double,
    bytesToRead: scala.Double,
    callback: js.Function1[/* data */ js.Array[scala.Double], scala.Unit]
  ): scala.Unit = js.native
  def i2cStop(options: firmataLib.Anon_Bus): scala.Unit = js.native
  // TODO untested --- TWW
  def i2cStop(options: scala.Double): scala.Unit = js.native
  def i2cWrite(address: scala.Double, data: js.Array[scala.Double]): scala.Unit = js.native
  // TODO untested --- TWW
  def i2cWrite(address: scala.Double, register: scala.Double, inBytes: js.Array[scala.Double]): scala.Unit = js.native
  // TODO untested --- TWW
  def i2cWriteReg(address: scala.Double, register: scala.Double, byte: scala.Double): scala.Unit = js.native
  def pinMode(pin: scala.Double, mode: firmataLib.firmataMod.BoardNs.PIN_MODE): scala.Unit = js.native
  // TODO untested/incomplete --- TWW
  def pingRead(opts: js.Any, callback: js.Function0[scala.Unit]): scala.Unit = js.native
  def pwmWrite(pin: scala.Double, value: scala.Double): scala.Unit = js.native
  def queryAnalogMapping(callback: js.Function0[scala.Unit]): scala.Unit = js.native
  def queryCapabilities(callback: js.Function0[scala.Unit]): scala.Unit = js.native
  def queryFirmware(callback: js.Function0[scala.Unit]): scala.Unit = js.native
  def queryPinState(pin: scala.Double, callback: js.Function0[scala.Unit]): scala.Unit = js.native
  def reportAnalogPin(pin: scala.Double, value: firmataLib.firmataMod.BoardNs.REPORTING): scala.Unit = js.native
  def reportDigitalPin(pin: scala.Double, value: firmataLib.firmataMod.BoardNs.REPORTING): scala.Unit = js.native
  def reportVersion(callback: js.Function0[scala.Unit]): scala.Unit = js.native
  def reset(): scala.Unit = js.native
  // TODO untested --- TWW
  def sendI2CConfig(delay: scala.Double): scala.Unit = js.native
  // TODO untested --- TWW
  def sendI2CReadRequest(address: scala.Double, numBytes: scala.Double, callback: js.Function0[scala.Unit]): scala.Unit = js.native
  // TODO untested --- TWW
  def sendI2CWriteRequest(slaveAddress: scala.Double, bytes: js.Array[scala.Double]): scala.Unit = js.native
  // TODO untested --- TWW
  def sendOneWireAlarmsSearch(pin: scala.Double, callback: js.Function0[scala.Unit]): scala.Unit = js.native
  // TODO untested --- TWW
  def sendOneWireConfig(pin: scala.Double, enableParasiticPower: scala.Boolean): scala.Unit = js.native
  // TODO untested --- TWW
  def sendOneWireDelay(pin: scala.Double, delay: scala.Double): scala.Unit = js.native
  // TODO untested --- TWW
  def sendOneWireRead(
    pin: scala.Double,
    device: scala.Double,
    numBytesToRead: scala.Double,
    callback: js.Function0[scala.Unit]
  ): scala.Unit = js.native
  // TODO untested --- TWW
  def sendOneWireReset(pin: scala.Double): scala.Unit = js.native
  // TODO untested --- TWW
  def sendOneWireSearch(pin: scala.Double, callback: js.Function0[scala.Unit]): scala.Unit = js.native
  def sendOneWireWrite(pin: scala.Double, device: scala.Double, data: js.Array[scala.Double]): scala.Unit = js.native
  // TODO untested --- TWW
  def sendOneWireWrite(pin: scala.Double, device: scala.Double, data: scala.Double): scala.Unit = js.native
  def sendOneWireWriteAndRead(
    pin: scala.Double,
    device: scala.Double,
    data: js.Array[scala.Double],
    numBytesToRead: scala.Double,
    callback: js.Function2[
      /* error */ js.UndefOr[nodeLib.Error with stdLib.Error], 
      /* data */ js.UndefOr[scala.Double], 
      scala.Unit
    ]
  ): scala.Unit = js.native
  // TODO untested --- TWW
  def sendOneWireWriteAndRead(
    pin: scala.Double,
    device: scala.Double,
    data: scala.Double,
    numBytesToRead: scala.Double,
    callback: js.Function2[
      /* error */ js.UndefOr[nodeLib.Error with stdLib.Error], 
      /* data */ js.UndefOr[scala.Double], 
      scala.Unit
    ]
  ): scala.Unit = js.native
  // TODO untested --- TWW
  def sendString(str: java.lang.String): scala.Unit = js.native
  // TODO untested --- TWW
  def serialClose(portId: firmataLib.firmataMod.BoardNs.SERIAL_PORT_ID): scala.Unit = js.native
  // TODO untested --- TWW
  def serialConfig(options: firmataLib.Anon_PortId): scala.Unit = js.native
  // TODO untested --- TWW
  def serialFlush(portId: firmataLib.firmataMod.BoardNs.SERIAL_PORT_ID): scala.Unit = js.native
  // TODO untested --- TWW
  def serialListen(portId: firmataLib.firmataMod.BoardNs.SERIAL_PORT_ID): scala.Unit = js.native
  // TODO untested --- TWW
  def serialRead(
    portId: firmataLib.firmataMod.BoardNs.SERIAL_PORT_ID,
    maxBytesToRead: scala.Double,
    callback: js.Function0[scala.Unit]
  ): scala.Unit = js.native
  // TODO untested --- TWW
  def serialStop(portId: firmataLib.firmataMod.BoardNs.SERIAL_PORT_ID): scala.Unit = js.native
  // TODO untested --- TWW
  def serialWrite(portId: firmataLib.firmataMod.BoardNs.SERIAL_PORT_ID, inBytes: js.Array[scala.Double]): scala.Unit = js.native
  def servoConfig(pin: scala.Double, min: scala.Double, max: scala.Double): scala.Unit = js.native
  def servoWrite(pin: scala.Double, value: scala.Double): scala.Unit = js.native
  def setSamplingInterval(interval: scala.Double): scala.Unit = js.native
  def stepperConfig(
    deviceNum: scala.Double,
    `type`: scala.Double,
    stepsPerRev: scala.Double,
    dirOrMotor1Pin: scala.Double,
    stepOrMotor2Pin: scala.Double
  ): scala.Unit = js.native
  def stepperConfig(
    deviceNum: scala.Double,
    `type`: scala.Double,
    stepsPerRev: scala.Double,
    dirOrMotor1Pin: scala.Double,
    stepOrMotor2Pin: scala.Double,
    motor3Pin: scala.Double
  ): scala.Unit = js.native
  def stepperConfig(
    deviceNum: scala.Double,
    `type`: scala.Double,
    stepsPerRev: scala.Double,
    dirOrMotor1Pin: scala.Double,
    stepOrMotor2Pin: scala.Double,
    motor3Pin: scala.Double,
    motor4Pin: scala.Double
  ): scala.Unit = js.native
  def stepperStep(
    deviceNum: scala.Double,
    direction: firmataLib.firmataMod.BoardNs.STEPPER_DIRECTION,
    steps: scala.Double,
    speed: scala.Double,
    accel: js.Function1[/* bool */ js.UndefOr[scala.Boolean], scala.Unit]
  ): scala.Unit = js.native
  def stepperStep(
    deviceNum: scala.Double,
    direction: firmataLib.firmataMod.BoardNs.STEPPER_DIRECTION,
    steps: scala.Double,
    speed: scala.Double,
    accel: js.Function1[/* bool */ js.UndefOr[scala.Boolean], scala.Unit],
    decel: scala.Double
  ): scala.Unit = js.native
  def stepperStep(
    deviceNum: scala.Double,
    direction: firmataLib.firmataMod.BoardNs.STEPPER_DIRECTION,
    steps: scala.Double,
    speed: scala.Double,
    accel: js.Function1[/* bool */ js.UndefOr[scala.Boolean], scala.Unit],
    decel: scala.Double,
    callback: js.Function1[/* bool */ js.UndefOr[scala.Boolean], scala.Unit]
  ): scala.Unit = js.native
  def stepperStep(
    deviceNum: scala.Double,
    direction: firmataLib.firmataMod.BoardNs.STEPPER_DIRECTION,
    steps: scala.Double,
    speed: scala.Double,
    accel: scala.Double
  ): scala.Unit = js.native
  def stepperStep(
    deviceNum: scala.Double,
    direction: firmataLib.firmataMod.BoardNs.STEPPER_DIRECTION,
    steps: scala.Double,
    speed: scala.Double,
    accel: scala.Double,
    decel: scala.Double
  ): scala.Unit = js.native
  def stepperStep(
    deviceNum: scala.Double,
    direction: firmataLib.firmataMod.BoardNs.STEPPER_DIRECTION,
    steps: scala.Double,
    speed: scala.Double,
    accel: scala.Double,
    decel: scala.Double,
    callback: js.Function1[/* bool */ js.UndefOr[scala.Boolean], scala.Unit]
  ): scala.Unit = js.native
  // TODO untested --- TWW
  def sysexCommand(message: js.Array[scala.Double]): scala.Unit = js.native
  // TODO untested --- TWW
  def sysexResponse(commandByte: scala.Double, handler: js.Function1[/* data */ js.Array[scala.Double], scala.Unit]): scala.Unit = js.native
}

